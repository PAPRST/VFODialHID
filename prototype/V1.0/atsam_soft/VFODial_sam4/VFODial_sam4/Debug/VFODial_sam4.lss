
VFODial_sam4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060d0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000060d0  000060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ab8  20000000  000060d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000378  20000ac0  00006ba0  00020ac0  2**5
                  ALLOC
  4 .stack        00001000  20000e38  00006f18  00020ac0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020ab8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ae2  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001f52c  00000000  00000000  00020b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003fce  00000000  00000000  00040067  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a58  00000000  00000000  00044035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00030656  00000000  00000000  00044a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012a87  00000000  00000000  000750e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e19f6  00000000  00000000  00087b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a6f  00000000  00000000  00169560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ab8  00000000  00000000  00170fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027c0  00000000  00000000  00171a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  00174248  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000072  00000000  00000000  00174284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	38 1e 00 20 e9 2d 00 00 fd 22 00 00 e5 2d 00 00     8.. .-..."...-..
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      10:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 00 00 00 00     .-...-...-......
	...
			cpu_irq_prev_interrupt_state = true;
      2c:	e5 2d 00 00 e5 2d 00 00 00 00 00 00 e5 2d 00 00     .-...-.......-..
      3c:	e5 2d 00 00 e5 2d 00 00 21 27 00 00 31 27 00 00     .-...-..!'..1'..
      4c:	41 27 00 00 51 27 00 00 61 27 00 00 71 27 00 00     A'..Q'..a'..q'..
      5c:	81 27 00 00 91 27 00 00 a1 27 00 00 b1 27 00 00     .'...'...'...'..
      6c:	c1 27 00 00 d1 27 00 00 e1 27 00 00 f1 27 00 00     .'...'...'...'..
      7c:	01 28 00 00 11 28 00 00 e5 2d 00 00 85 15 00 00     .(...(...-......
      8c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      9c:	e5 2d 00 00 e5 2d 00 00 d1 25 00 00 e1 25 00 00     .-...-...%...%..
      ac:	f5 25 00 00 09 26 00 00 1d 26 00 00 2d 26 00 00     .%...&...&..-&..
      bc:	41 26 00 00 55 26 00 00 69 26 00 00 79 26 00 00     A&..U&..i&..y&..
      cc:	8d 26 00 00 a1 26 00 00 e5 2d 00 00 e5 2d 00 00     .&...&...-...-..
      dc:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      ec:	e5 2d 00 00 e5 2d 00 00 0d 23 00 00 1d 23 00 00     .-...-...#...#..
      fc:	2d 23 00 00 3d 23 00 00 4d 23 00 00 5d 23 00 00     -#..=#..M#..]#..
     10c:	6d 23 00 00 7d 23 00 00 e5 2d 00 00 e5 2d 00 00     m#..}#...-...-..
     11c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
     12c:	e5 2d 00 00 e5 2d 00 00 95 2d 00 00 e5 2d 00 00     .-...-...-...-..
     13c:	a9 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
     14c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
     15c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
     16c:	e5 2d 00 00 e5 2d 00 00 bd 2d 00 00 d1 2d 00 00     .-...-...-...-..
     17c:	e5 2d 00 00                                         .-..

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	20000ac0 	.word	0x20000ac0
     19c:	00000000 	.word	0x00000000
     1a0:	000060d8 	.word	0x000060d8

000001a4 <frame_dummy>:
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <frame_dummy+0x34>)
     1a6:	b143      	cbz	r3, 1ba <frame_dummy+0x16>
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <frame_dummy+0x38>)
     1aa:	490d      	ldr	r1, [pc, #52]	; (1e0 <frame_dummy+0x3c>)
     1ac:	b510      	push	{r4, lr}
     1ae:	f3af 8000 	nop.w
     1b2:	480c      	ldr	r0, [pc, #48]	; (1e4 <frame_dummy+0x40>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b923      	cbnz	r3, 1c2 <frame_dummy+0x1e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	480a      	ldr	r0, [pc, #40]	; (1e4 <frame_dummy+0x40>)
     1bc:	6803      	ldr	r3, [r0, #0]
     1be:	b933      	cbnz	r3, 1ce <frame_dummy+0x2a>
     1c0:	4770      	bx	lr
     1c2:	4b09      	ldr	r3, [pc, #36]	; (1e8 <frame_dummy+0x44>)
     1c4:	2b00      	cmp	r3, #0
     1c6:	d0f7      	beq.n	1b8 <frame_dummy+0x14>
     1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1cc:	4718      	bx	r3
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <frame_dummy+0x44>)
     1d0:	2b00      	cmp	r3, #0
     1d2:	d0f5      	beq.n	1c0 <frame_dummy+0x1c>
     1d4:	4718      	bx	r3
     1d6:	bf00      	nop
     1d8:	00000000 	.word	0x00000000
     1dc:	000060d8 	.word	0x000060d8
     1e0:	20000ac4 	.word	0x20000ac4
     1e4:	000060d8 	.word	0x000060d8
     1e8:	00000000 	.word	0x00000000

000001ec <udi_hid_generic_disable>:
	return UDI_HID_GENERIC_ENABLE_EXT();
}


void udi_hid_generic_disable(void)
{
     1ec:	4770      	bx	lr

000001ee <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     1ee:	2000      	movs	r0, #0
     1f0:	4770      	bx	lr
	...

000001f4 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <udi_hid_generic_setreport+0x38>)
     1f6:	885b      	ldrh	r3, [r3, #2]
     1f8:	0a1a      	lsrs	r2, r3, #8
     1fa:	2a03      	cmp	r2, #3
     1fc:	d001      	beq.n	202 <udi_hid_generic_setreport+0xe>
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
     1fe:	2000      	movs	r0, #0
     200:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     202:	f013 0fff 	tst.w	r3, #255	; 0xff
     206:	d10e      	bne.n	226 <udi_hid_generic_setreport+0x32>
					udd_g_ctrlreq.req.wLength)) {
     208:	4b08      	ldr	r3, [pc, #32]	; (22c <udi_hid_generic_setreport+0x38>)
			&& (sizeof(udi_hid_generic_report_feature) ==
     20a:	88db      	ldrh	r3, [r3, #6]
     20c:	2b04      	cmp	r3, #4
     20e:	d001      	beq.n	214 <udi_hid_generic_setreport+0x20>
	return false;
     210:	2000      	movs	r0, #0
}
     212:	4770      	bx	lr
		udd_g_ctrlreq.payload =
     214:	4b05      	ldr	r3, [pc, #20]	; (22c <udi_hid_generic_setreport+0x38>)
     216:	4a06      	ldr	r2, [pc, #24]	; (230 <udi_hid_generic_setreport+0x3c>)
     218:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     21a:	4a06      	ldr	r2, [pc, #24]	; (234 <udi_hid_generic_setreport+0x40>)
     21c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     21e:	2204      	movs	r2, #4
     220:	819a      	strh	r2, [r3, #12]
		return true;
     222:	2001      	movs	r0, #1
     224:	4770      	bx	lr
	return false;
     226:	2000      	movs	r0, #0
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20000d7c 	.word	0x20000d7c
     230:	20000ae8 	.word	0x20000ae8
     234:	000002d9 	.word	0x000002d9

00000238 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     238:	2201      	movs	r2, #1
     23a:	4b01      	ldr	r3, [pc, #4]	; (240 <udi_hid_generic_report_in_sent+0x8>)
     23c:	701a      	strb	r2, [r3, #0]
     23e:	4770      	bx	lr
     240:	20000adc 	.word	0x20000adc

00000244 <udi_hid_generic_report_out_enable>:
{
     244:	b510      	push	{r4, lr}
     246:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <udi_hid_generic_report_out_enable+0x18>)
     24a:	9300      	str	r3, [sp, #0]
     24c:	2340      	movs	r3, #64	; 0x40
     24e:	4a04      	ldr	r2, [pc, #16]	; (260 <udi_hid_generic_report_out_enable+0x1c>)
     250:	2100      	movs	r1, #0
     252:	2002      	movs	r0, #2
     254:	4c03      	ldr	r4, [pc, #12]	; (264 <udi_hid_generic_report_out_enable+0x20>)
     256:	47a0      	blx	r4
}
     258:	b002      	add	sp, #8
     25a:	bd10      	pop	{r4, pc}
     25c:	00000291 	.word	0x00000291
     260:	20000af4 	.word	0x20000af4
     264:	000013a1 	.word	0x000013a1

00000268 <udi_hid_generic_enable>:
{
     268:	b508      	push	{r3, lr}
	udi_hid_generic_rate = 0;
     26a:	2300      	movs	r3, #0
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <udi_hid_generic_enable+0x18>)
     26e:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
     270:	4a04      	ldr	r2, [pc, #16]	; (284 <udi_hid_generic_enable+0x1c>)
     272:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
     274:	2201      	movs	r2, #1
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <udi_hid_generic_enable+0x20>)
     278:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     27a:	4b04      	ldr	r3, [pc, #16]	; (28c <udi_hid_generic_enable+0x24>)
     27c:	4798      	blx	r3
}
     27e:	bd08      	pop	{r3, pc}
     280:	20000ae4 	.word	0x20000ae4
     284:	20000ae0 	.word	0x20000ae0
     288:	20000adc 	.word	0x20000adc
     28c:	00000245 	.word	0x00000245

00000290 <udi_hid_generic_report_out_received>:
	if (UDD_EP_TRANSFER_OK != status)
     290:	b948      	cbnz	r0, 2a6 <udi_hid_generic_report_out_received+0x16>
{
     292:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     294:	2940      	cmp	r1, #64	; 0x40
     296:	d002      	beq.n	29e <udi_hid_generic_report_out_received+0xe>
	udi_hid_generic_report_out_enable();
     298:	4b03      	ldr	r3, [pc, #12]	; (2a8 <udi_hid_generic_report_out_received+0x18>)
     29a:	4798      	blx	r3
     29c:	bd08      	pop	{r3, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     29e:	4803      	ldr	r0, [pc, #12]	; (2ac <udi_hid_generic_report_out_received+0x1c>)
     2a0:	4b03      	ldr	r3, [pc, #12]	; (2b0 <udi_hid_generic_report_out_received+0x20>)
     2a2:	4798      	blx	r3
     2a4:	e7f8      	b.n	298 <udi_hid_generic_report_out_received+0x8>
     2a6:	4770      	bx	lr
     2a8:	00000245 	.word	0x00000245
     2ac:	20000af4 	.word	0x20000af4
     2b0:	000030df 	.word	0x000030df

000002b4 <udi_hid_generic_setup>:
{
     2b4:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <udi_hid_generic_setup+0x10>)
     2b8:	4a03      	ldr	r2, [pc, #12]	; (2c8 <udi_hid_generic_setup+0x14>)
     2ba:	4904      	ldr	r1, [pc, #16]	; (2cc <udi_hid_generic_setup+0x18>)
     2bc:	4804      	ldr	r0, [pc, #16]	; (2d0 <udi_hid_generic_setup+0x1c>)
     2be:	4c05      	ldr	r4, [pc, #20]	; (2d4 <udi_hid_generic_setup+0x20>)
     2c0:	47a0      	blx	r4
}
     2c2:	bd10      	pop	{r4, pc}
     2c4:	000001f5 	.word	0x000001f5
     2c8:	20000040 	.word	0x20000040
     2cc:	20000ae0 	.word	0x20000ae0
     2d0:	20000ae4 	.word	0x20000ae4
     2d4:	00001a89 	.word	0x00001a89

000002d8 <udi_hid_generic_setfeature_valid>:
{
     2d8:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <udi_hid_generic_setfeature_valid+0x14>)
     2dc:	899b      	ldrh	r3, [r3, #12]
     2de:	2b04      	cmp	r3, #4
     2e0:	d000      	beq.n	2e4 <udi_hid_generic_setfeature_valid+0xc>
     2e2:	bd08      	pop	{r3, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     2e4:	4802      	ldr	r0, [pc, #8]	; (2f0 <udi_hid_generic_setfeature_valid+0x18>)
     2e6:	4b03      	ldr	r3, [pc, #12]	; (2f4 <udi_hid_generic_setfeature_valid+0x1c>)
     2e8:	4798      	blx	r3
     2ea:	e7fa      	b.n	2e2 <udi_hid_generic_setfeature_valid+0xa>
     2ec:	20000d7c 	.word	0x20000d7c
     2f0:	20000ae8 	.word	0x20000ae8
     2f4:	000030e1 	.word	0x000030e1

000002f8 <udi_hid_generic_send_report_in>:
	if (!udi_hid_generic_b_report_in_free)
     2f8:	4b19      	ldr	r3, [pc, #100]	; (360 <udi_hid_generic_send_report_in+0x68>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	b90b      	cbnz	r3, 302 <udi_hid_generic_send_report_in+0xa>
}
     2fe:	4618      	mov	r0, r3
     300:	4770      	bx	lr
{
     302:	b530      	push	{r4, r5, lr}
     304:	b085      	sub	sp, #20
     306:	4603      	mov	r3, r0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     308:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     30c:	fab2 f282 	clz	r2, r2
     310:	0952      	lsrs	r2, r2, #5
     312:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     314:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     316:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     31a:	2100      	movs	r1, #0
     31c:	4a11      	ldr	r2, [pc, #68]	; (364 <udi_hid_generic_send_report_in+0x6c>)
     31e:	7011      	strb	r1, [r2, #0]
	return flags;
     320:	9c03      	ldr	r4, [sp, #12]
	memset(&udi_hid_generic_report_in, 0,
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <udi_hid_generic_send_report_in+0x70>)
     324:	6011      	str	r1, [r2, #0]
     326:	7111      	strb	r1, [r2, #4]
	memcpy(&udi_hid_generic_report_in, data,
     328:	6800      	ldr	r0, [r0, #0]
     32a:	6010      	str	r0, [r2, #0]
     32c:	791b      	ldrb	r3, [r3, #4]
     32e:	7113      	strb	r3, [r2, #4]
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     330:	4b0e      	ldr	r3, [pc, #56]	; (36c <udi_hid_generic_send_report_in+0x74>)
     332:	9300      	str	r3, [sp, #0]
     334:	2305      	movs	r3, #5
     336:	2081      	movs	r0, #129	; 0x81
     338:	4d0d      	ldr	r5, [pc, #52]	; (370 <udi_hid_generic_send_report_in+0x78>)
     33a:	47a8      	blx	r5
							udi_hid_generic_report_in_sent);
     33c:	f080 0001 	eor.w	r0, r0, #1
	udi_hid_generic_b_report_in_free =
     340:	4b07      	ldr	r3, [pc, #28]	; (360 <udi_hid_generic_send_report_in+0x68>)
     342:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     344:	b12c      	cbz	r4, 352 <udi_hid_generic_send_report_in+0x5a>
		cpu_irq_enable();
     346:	2201      	movs	r2, #1
     348:	4b06      	ldr	r3, [pc, #24]	; (364 <udi_hid_generic_send_report_in+0x6c>)
     34a:	701a      	strb	r2, [r3, #0]
     34c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     350:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <udi_hid_generic_send_report_in+0x68>)
     354:	781b      	ldrb	r3, [r3, #0]
     356:	f083 0301 	eor.w	r3, r3, #1
}
     35a:	4618      	mov	r0, r3
     35c:	b005      	add	sp, #20
     35e:	bd30      	pop	{r4, r5, pc}
     360:	20000adc 	.word	0x20000adc
     364:	20000104 	.word	0x20000104
     368:	20000aec 	.word	0x20000aec
     36c:	00000239 	.word	0x00000239
     370:	000013a1 	.word	0x000013a1

00000374 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     374:	4b10      	ldr	r3, [pc, #64]	; (3b8 <udc_next_desc_in_iface+0x44>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     37a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     37c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     37e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     380:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     382:	4290      	cmp	r0, r2
     384:	d211      	bcs.n	3aa <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     386:	7843      	ldrb	r3, [r0, #1]
     388:	2b04      	cmp	r3, #4
     38a:	d010      	beq.n	3ae <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     38c:	428b      	cmp	r3, r1
     38e:	d009      	beq.n	3a4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     390:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     392:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
     394:	4290      	cmp	r0, r2
     396:	d206      	bcs.n	3a6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     398:	7843      	ldrb	r3, [r0, #1]
     39a:	2b04      	cmp	r3, #4
     39c:	d009      	beq.n	3b2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
     39e:	428b      	cmp	r3, r1
     3a0:	d1f6      	bne.n	390 <udc_next_desc_in_iface+0x1c>
     3a2:	e007      	b.n	3b4 <udc_next_desc_in_iface+0x40>
     3a4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
     3a6:	2000      	movs	r0, #0
     3a8:	4770      	bx	lr
     3aa:	2000      	movs	r0, #0
     3ac:	4770      	bx	lr
     3ae:	2000      	movs	r0, #0
     3b0:	4770      	bx	lr
     3b2:	2000      	movs	r0, #0
}
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop
     3b8:	20000b40 	.word	0x20000b40

000003bc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     3bc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     3be:	4b03      	ldr	r3, [pc, #12]	; (3cc <udc_valid_address+0x10>)
     3c0:	7898      	ldrb	r0, [r3, #2]
     3c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     3c6:	4b02      	ldr	r3, [pc, #8]	; (3d0 <udc_valid_address+0x14>)
     3c8:	4798      	blx	r3
     3ca:	bd08      	pop	{r3, pc}
     3cc:	20000d7c 	.word	0x20000d7c
     3d0:	00001221 	.word	0x00001221

000003d4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
     3d4:	4b19      	ldr	r3, [pc, #100]	; (43c <udc_update_iface_desc+0x68>)
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	b34b      	cbz	r3, 42e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     3da:	4b19      	ldr	r3, [pc, #100]	; (440 <udc_update_iface_desc+0x6c>)
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	791a      	ldrb	r2, [r3, #4]
     3e2:	4282      	cmp	r2, r0
     3e4:	d925      	bls.n	432 <udc_update_iface_desc+0x5e>
{
     3e6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     3e8:	4a16      	ldr	r2, [pc, #88]	; (444 <udc_update_iface_desc+0x70>)
     3ea:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     3ec:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     3ee:	441c      	add	r4, r3
	while (ptr_end_desc >
     3f0:	42a3      	cmp	r3, r4
     3f2:	d220      	bcs.n	436 <udc_update_iface_desc+0x62>
     3f4:	2500      	movs	r5, #0
     3f6:	2601      	movs	r6, #1
     3f8:	e007      	b.n	40a <udc_update_iface_desc+0x36>
     3fa:	4a12      	ldr	r2, [pc, #72]	; (444 <udc_update_iface_desc+0x70>)
     3fc:	6013      	str	r3, [r2, #0]
     3fe:	e00f      	b.n	420 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
     400:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     402:	4413      	add	r3, r2
     404:	4635      	mov	r5, r6
	while (ptr_end_desc >
     406:	42a3      	cmp	r3, r4
     408:	d20c      	bcs.n	424 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     40a:	785a      	ldrb	r2, [r3, #1]
     40c:	2a04      	cmp	r2, #4
     40e:	d1f7      	bne.n	400 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     410:	789a      	ldrb	r2, [r3, #2]
     412:	4282      	cmp	r2, r0
     414:	d1f4      	bne.n	400 <udc_update_iface_desc+0x2c>
     416:	78da      	ldrb	r2, [r3, #3]
     418:	428a      	cmp	r2, r1
     41a:	d1f1      	bne.n	400 <udc_update_iface_desc+0x2c>
     41c:	2d00      	cmp	r5, #0
     41e:	d1ec      	bne.n	3fa <udc_update_iface_desc+0x26>
				return true; // Interface found
     420:	2001      	movs	r0, #1
     422:	e002      	b.n	42a <udc_update_iface_desc+0x56>
     424:	4a07      	ldr	r2, [pc, #28]	; (444 <udc_update_iface_desc+0x70>)
     426:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     428:	2000      	movs	r0, #0
}
     42a:	bc70      	pop	{r4, r5, r6}
     42c:	4770      	bx	lr
		return false;
     42e:	2000      	movs	r0, #0
     430:	4770      	bx	lr
		return false;
     432:	2000      	movs	r0, #0
     434:	4770      	bx	lr
	return false; // Interface not found
     436:	2000      	movs	r0, #0
     438:	e7f7      	b.n	42a <udc_update_iface_desc+0x56>
     43a:	bf00      	nop
     43c:	20000b3c 	.word	0x20000b3c
     440:	20000b40 	.word	0x20000b40
     444:	20000b44 	.word	0x20000b44

00000448 <udc_iface_disable>:
{
     448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     44c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     44e:	2100      	movs	r1, #0
     450:	4b13      	ldr	r3, [pc, #76]	; (4a0 <udc_iface_disable+0x58>)
     452:	4798      	blx	r3
     454:	4680      	mov	r8, r0
     456:	b910      	cbnz	r0, 45e <udc_iface_disable+0x16>
}
     458:	4640      	mov	r0, r8
     45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     45e:	4b11      	ldr	r3, [pc, #68]	; (4a4 <udc_iface_disable+0x5c>)
     460:	681b      	ldr	r3, [r3, #0]
     462:	685b      	ldr	r3, [r3, #4]
     464:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     468:	f8d9 300c 	ldr.w	r3, [r9, #12]
     46c:	4798      	blx	r3
     46e:	4601      	mov	r1, r0
     470:	4620      	mov	r0, r4
     472:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <udc_iface_disable+0x58>)
     474:	4798      	blx	r3
     476:	4680      	mov	r8, r0
     478:	2800      	cmp	r0, #0
     47a:	d0ed      	beq.n	458 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     47c:	4b0a      	ldr	r3, [pc, #40]	; (4a8 <udc_iface_disable+0x60>)
     47e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     480:	2605      	movs	r6, #5
     482:	4d0a      	ldr	r5, [pc, #40]	; (4ac <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     484:	4f0a      	ldr	r7, [pc, #40]	; (4b0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     486:	4631      	mov	r1, r6
     488:	4620      	mov	r0, r4
     48a:	47a8      	blx	r5
			if (NULL == ep_desc) {
     48c:	4604      	mov	r4, r0
     48e:	b110      	cbz	r0, 496 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     490:	7880      	ldrb	r0, [r0, #2]
     492:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     494:	e7f7      	b.n	486 <udc_iface_disable+0x3e>
	udi_api->disable();
     496:	f8d9 3004 	ldr.w	r3, [r9, #4]
     49a:	4798      	blx	r3
	return true;
     49c:	e7dc      	b.n	458 <udc_iface_disable+0x10>
     49e:	bf00      	nop
     4a0:	000003d5 	.word	0x000003d5
     4a4:	20000b40 	.word	0x20000b40
     4a8:	20000b44 	.word	0x20000b44
     4ac:	00000375 	.word	0x00000375
     4b0:	00001a3d 	.word	0x00001a3d

000004b4 <udc_iface_enable>:
{
     4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4b8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     4ba:	4b10      	ldr	r3, [pc, #64]	; (4fc <udc_iface_enable+0x48>)
     4bc:	4798      	blx	r3
     4be:	4603      	mov	r3, r0
     4c0:	b1c8      	cbz	r0, 4f6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     4c2:	4b0f      	ldr	r3, [pc, #60]	; (500 <udc_iface_enable+0x4c>)
     4c4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4c6:	2605      	movs	r6, #5
     4c8:	4d0e      	ldr	r5, [pc, #56]	; (504 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     4ca:	4f0f      	ldr	r7, [pc, #60]	; (508 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4cc:	4631      	mov	r1, r6
     4ce:	4620      	mov	r0, r4
     4d0:	47a8      	blx	r5
		if (NULL == ep_desc)
     4d2:	4604      	mov	r4, r0
     4d4:	b138      	cbz	r0, 4e6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     4d6:	8882      	ldrh	r2, [r0, #4]
     4d8:	78c1      	ldrb	r1, [r0, #3]
     4da:	7880      	ldrb	r0, [r0, #2]
     4dc:	47b8      	blx	r7
     4de:	4603      	mov	r3, r0
     4e0:	2800      	cmp	r0, #0
     4e2:	d1f3      	bne.n	4cc <udc_iface_enable+0x18>
     4e4:	e007      	b.n	4f6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <udc_iface_enable+0x58>)
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	685b      	ldr	r3, [r3, #4]
     4ec:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	4798      	blx	r3
     4f4:	4603      	mov	r3, r0
}
     4f6:	4618      	mov	r0, r3
     4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4fc:	000003d5 	.word	0x000003d5
     500:	20000b44 	.word	0x20000b44
     504:	00000375 	.word	0x00000375
     508:	00001265 	.word	0x00001265
     50c:	20000b40 	.word	0x20000b40

00000510 <udc_get_interface_desc>:
}
     510:	4b01      	ldr	r3, [pc, #4]	; (518 <udc_get_interface_desc+0x8>)
     512:	6818      	ldr	r0, [r3, #0]
     514:	4770      	bx	lr
     516:	bf00      	nop
     518:	20000b44 	.word	0x20000b44

0000051c <udc_start>:
{
     51c:	b508      	push	{r3, lr}
	udd_enable();
     51e:	4b01      	ldr	r3, [pc, #4]	; (524 <udc_start+0x8>)
     520:	4798      	blx	r3
     522:	bd08      	pop	{r3, pc}
     524:	000010e1 	.word	0x000010e1

00000528 <udc_reset>:
{
     528:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     52a:	4b0d      	ldr	r3, [pc, #52]	; (560 <udc_reset+0x38>)
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	b183      	cbz	r3, 552 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     530:	4b0c      	ldr	r3, [pc, #48]	; (564 <udc_reset+0x3c>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     536:	791b      	ldrb	r3, [r3, #4]
     538:	b15b      	cbz	r3, 552 <udc_reset+0x2a>
     53a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     53c:	4e0a      	ldr	r6, [pc, #40]	; (568 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     53e:	4d09      	ldr	r5, [pc, #36]	; (564 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
     540:	4620      	mov	r0, r4
     542:	47b0      	blx	r6
				iface_num++) {
     544:	3401      	adds	r4, #1
     546:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     548:	682b      	ldr	r3, [r5, #0]
     54a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     54c:	791b      	ldrb	r3, [r3, #4]
     54e:	42a3      	cmp	r3, r4
     550:	d8f6      	bhi.n	540 <udc_reset+0x18>
	udc_num_configuration = 0;
     552:	2300      	movs	r3, #0
     554:	4a02      	ldr	r2, [pc, #8]	; (560 <udc_reset+0x38>)
     556:	7013      	strb	r3, [r2, #0]
	udc_device_status =
     558:	4a04      	ldr	r2, [pc, #16]	; (56c <udc_reset+0x44>)
     55a:	8013      	strh	r3, [r2, #0]
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	bf00      	nop
     560:	20000b3c 	.word	0x20000b3c
     564:	20000b40 	.word	0x20000b40
     568:	00000449 	.word	0x00000449
     56c:	20000b34 	.word	0x20000b34

00000570 <udc_sof_notify>:
{
     570:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
     572:	4b0d      	ldr	r3, [pc, #52]	; (5a8 <udc_sof_notify+0x38>)
     574:	781b      	ldrb	r3, [r3, #0]
     576:	b1b3      	cbz	r3, 5a6 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     578:	4b0c      	ldr	r3, [pc, #48]	; (5ac <udc_sof_notify+0x3c>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
     57e:	7912      	ldrb	r2, [r2, #4]
     580:	b18a      	cbz	r2, 5a6 <udc_sof_notify+0x36>
     582:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     584:	4d09      	ldr	r5, [pc, #36]	; (5ac <udc_sof_notify+0x3c>)
     586:	e006      	b.n	596 <udc_sof_notify+0x26>
				iface_num++) {
     588:	3401      	adds	r4, #1
     58a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     58c:	682b      	ldr	r3, [r5, #0]
     58e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
     590:	7912      	ldrb	r2, [r2, #4]
     592:	42a2      	cmp	r2, r4
     594:	d907      	bls.n	5a6 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     596:	685b      	ldr	r3, [r3, #4]
     598:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     59c:	691b      	ldr	r3, [r3, #16]
     59e:	2b00      	cmp	r3, #0
     5a0:	d0f2      	beq.n	588 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     5a2:	4798      	blx	r3
     5a4:	e7f0      	b.n	588 <udc_sof_notify+0x18>
     5a6:	bd38      	pop	{r3, r4, r5, pc}
     5a8:	20000b3c 	.word	0x20000b3c
     5ac:	20000b40 	.word	0x20000b40

000005b0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     5b2:	4b88      	ldr	r3, [pc, #544]	; (7d4 <udc_process_setup+0x224>)
     5b4:	2200      	movs	r2, #0
     5b6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     5b8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     5ba:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     5bc:	781b      	ldrb	r3, [r3, #0]
     5be:	f013 0f80 	tst.w	r3, #128	; 0x80
     5c2:	d114      	bne.n	5ee <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     5c4:	f013 0f60 	tst.w	r3, #96	; 0x60
     5c8:	f000 80d5 	beq.w	776 <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     5cc:	4b81      	ldr	r3, [pc, #516]	; (7d4 <udc_process_setup+0x224>)
     5ce:	781b      	ldrb	r3, [r3, #0]
     5d0:	f003 031f 	and.w	r3, r3, #31
     5d4:	2b01      	cmp	r3, #1
     5d6:	f000 816e 	beq.w	8b6 <udc_process_setup+0x306>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     5da:	4b7e      	ldr	r3, [pc, #504]	; (7d4 <udc_process_setup+0x224>)
     5dc:	781b      	ldrb	r3, [r3, #0]
     5de:	f003 031f 	and.w	r3, r3, #31
     5e2:	2b02      	cmp	r3, #2
     5e4:	f000 81c9 	beq.w	97a <udc_process_setup+0x3ca>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     5e8:	2300      	movs	r3, #0
#endif
}
     5ea:	4618      	mov	r0, r3
     5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     5ee:	4a79      	ldr	r2, [pc, #484]	; (7d4 <udc_process_setup+0x224>)
     5f0:	88d2      	ldrh	r2, [r2, #6]
     5f2:	2a00      	cmp	r2, #0
     5f4:	f000 81ea 	beq.w	9cc <udc_process_setup+0x41c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     5f8:	f013 0f60 	tst.w	r3, #96	; 0x60
     5fc:	d1e6      	bne.n	5cc <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     5fe:	f013 031f 	ands.w	r3, r3, #31
     602:	d106      	bne.n	612 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
     604:	4973      	ldr	r1, [pc, #460]	; (7d4 <udc_process_setup+0x224>)
     606:	7849      	ldrb	r1, [r1, #1]
     608:	2906      	cmp	r1, #6
     60a:	d014      	beq.n	636 <udc_process_setup+0x86>
     60c:	2908      	cmp	r1, #8
     60e:	d074      	beq.n	6fa <udc_process_setup+0x14a>
     610:	b151      	cbz	r1, 628 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     612:	2b01      	cmp	r3, #1
     614:	d079      	beq.n	70a <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     616:	2b02      	cmp	r3, #2
     618:	d1d8      	bne.n	5cc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     61a:	4b6e      	ldr	r3, [pc, #440]	; (7d4 <udc_process_setup+0x224>)
     61c:	785b      	ldrb	r3, [r3, #1]
     61e:	2b00      	cmp	r3, #0
     620:	f000 809b 	beq.w	75a <udc_process_setup+0x1aa>
	return false;
     624:	2300      	movs	r3, #0
     626:	e18a      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     628:	2a02      	cmp	r2, #2
     62a:	d1d6      	bne.n	5da <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     62c:	2102      	movs	r1, #2
     62e:	486a      	ldr	r0, [pc, #424]	; (7d8 <udc_process_setup+0x228>)
     630:	4b6a      	ldr	r3, [pc, #424]	; (7dc <udc_process_setup+0x22c>)
     632:	4798      	blx	r3
     634:	e0bb      	b.n	7ae <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     636:	4b67      	ldr	r3, [pc, #412]	; (7d4 <udc_process_setup+0x224>)
     638:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     63a:	0a13      	lsrs	r3, r2, #8
     63c:	3b01      	subs	r3, #1
     63e:	2b0e      	cmp	r3, #14
     640:	f200 817a 	bhi.w	938 <udc_process_setup+0x388>
     644:	e8df f013 	tbh	[pc, r3, lsl #1]
     648:	001d000f 	.word	0x001d000f
     64c:	01780037 	.word	0x01780037
     650:	01780178 	.word	0x01780178
     654:	01780178 	.word	0x01780178
     658:	01780178 	.word	0x01780178
     65c:	01780178 	.word	0x01780178
     660:	01780178 	.word	0x01780178
     664:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
     666:	4b5e      	ldr	r3, [pc, #376]	; (7e0 <udc_process_setup+0x230>)
     668:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     66a:	7801      	ldrb	r1, [r0, #0]
     66c:	4b5b      	ldr	r3, [pc, #364]	; (7dc <udc_process_setup+0x22c>)
     66e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     670:	4b58      	ldr	r3, [pc, #352]	; (7d4 <udc_process_setup+0x224>)
     672:	88da      	ldrh	r2, [r3, #6]
     674:	899b      	ldrh	r3, [r3, #12]
     676:	4293      	cmp	r3, r2
     678:	f240 8099 	bls.w	7ae <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     67c:	4b55      	ldr	r3, [pc, #340]	; (7d4 <udc_process_setup+0x224>)
     67e:	819a      	strh	r2, [r3, #12]
     680:	e095      	b.n	7ae <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     682:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     684:	4b56      	ldr	r3, [pc, #344]	; (7e0 <udc_process_setup+0x230>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	7c5b      	ldrb	r3, [r3, #17]
     68a:	4293      	cmp	r3, r2
     68c:	d9a5      	bls.n	5da <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     68e:	4b54      	ldr	r3, [pc, #336]	; (7e0 <udc_process_setup+0x230>)
     690:	685b      	ldr	r3, [r3, #4]
     692:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
     696:	8841      	ldrh	r1, [r0, #2]
     698:	4b50      	ldr	r3, [pc, #320]	; (7dc <udc_process_setup+0x22c>)
     69a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     69c:	4b4d      	ldr	r3, [pc, #308]	; (7d4 <udc_process_setup+0x224>)
     69e:	689b      	ldr	r3, [r3, #8]
     6a0:	2202      	movs	r2, #2
     6a2:	705a      	strb	r2, [r3, #1]
     6a4:	e7e4      	b.n	670 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
     6a6:	4b4e      	ldr	r3, [pc, #312]	; (7e0 <udc_process_setup+0x230>)
     6a8:	6898      	ldr	r0, [r3, #8]
     6aa:	2800      	cmp	r0, #0
     6ac:	d095      	beq.n	5da <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     6ae:	8841      	ldrh	r1, [r0, #2]
     6b0:	4b4a      	ldr	r3, [pc, #296]	; (7dc <udc_process_setup+0x22c>)
     6b2:	4798      	blx	r3
     6b4:	e7dc      	b.n	670 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     6b6:	b2d2      	uxtb	r2, r2
     6b8:	2a01      	cmp	r2, #1
     6ba:	d01b      	beq.n	6f4 <udc_process_setup+0x144>
     6bc:	b1aa      	cbz	r2, 6ea <udc_process_setup+0x13a>
     6be:	2a02      	cmp	r2, #2
     6c0:	d184      	bne.n	5cc <udc_process_setup+0x1c>
		str = udc_string_product_name;
     6c2:	4948      	ldr	r1, [pc, #288]	; (7e4 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     6c4:	2208      	movs	r2, #8
     6c6:	3901      	subs	r1, #1
     6c8:	4847      	ldr	r0, [pc, #284]	; (7e8 <udc_process_setup+0x238>)
     6ca:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     6cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     6d0:	f820 4b02 	strh.w	r4, [r0], #2
		for(i = 0; i < str_length; i++) {
     6d4:	3301      	adds	r3, #1
     6d6:	b2db      	uxtb	r3, r3
     6d8:	4293      	cmp	r3, r2
     6da:	d3f7      	bcc.n	6cc <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     6dc:	0052      	lsls	r2, r2, #1
     6de:	1c91      	adds	r1, r2, #2
     6e0:	4842      	ldr	r0, [pc, #264]	; (7ec <udc_process_setup+0x23c>)
     6e2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     6e4:	4b3d      	ldr	r3, [pc, #244]	; (7dc <udc_process_setup+0x22c>)
     6e6:	4798      	blx	r3
     6e8:	e7c2      	b.n	670 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     6ea:	2104      	movs	r1, #4
     6ec:	4840      	ldr	r0, [pc, #256]	; (7f0 <udc_process_setup+0x240>)
     6ee:	4b3b      	ldr	r3, [pc, #236]	; (7dc <udc_process_setup+0x22c>)
     6f0:	4798      	blx	r3
     6f2:	e7bd      	b.n	670 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
     6f4:	493f      	ldr	r1, [pc, #252]	; (7f4 <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     6f6:	2206      	movs	r2, #6
     6f8:	e7e5      	b.n	6c6 <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
     6fa:	2a01      	cmp	r2, #1
     6fc:	f47f af6d 	bne.w	5da <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     700:	2101      	movs	r1, #1
     702:	483d      	ldr	r0, [pc, #244]	; (7f8 <udc_process_setup+0x248>)
     704:	4b35      	ldr	r3, [pc, #212]	; (7dc <udc_process_setup+0x22c>)
     706:	4798      	blx	r3
     708:	e051      	b.n	7ae <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
     70a:	4932      	ldr	r1, [pc, #200]	; (7d4 <udc_process_setup+0x224>)
     70c:	7849      	ldrb	r1, [r1, #1]
     70e:	290a      	cmp	r1, #10
     710:	d181      	bne.n	616 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
     712:	2a01      	cmp	r2, #1
     714:	f040 80cf 	bne.w	8b6 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
     718:	4b37      	ldr	r3, [pc, #220]	; (7f8 <udc_process_setup+0x248>)
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	2b00      	cmp	r3, #0
     71e:	f000 80ca 	beq.w	8b6 <udc_process_setup+0x306>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     722:	4b2c      	ldr	r3, [pc, #176]	; (7d4 <udc_process_setup+0x224>)
     724:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     726:	4b35      	ldr	r3, [pc, #212]	; (7fc <udc_process_setup+0x24c>)
     728:	681d      	ldr	r5, [r3, #0]
     72a:	682b      	ldr	r3, [r5, #0]
     72c:	791b      	ldrb	r3, [r3, #4]
     72e:	42a3      	cmp	r3, r4
     730:	f240 80c1 	bls.w	8b6 <udc_process_setup+0x306>
	if (!udc_update_iface_desc(iface_num, 0)) {
     734:	2100      	movs	r1, #0
     736:	4620      	mov	r0, r4
     738:	4b31      	ldr	r3, [pc, #196]	; (800 <udc_process_setup+0x250>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	f43f af45 	beq.w	5cc <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     742:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
     744:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     748:	68db      	ldr	r3, [r3, #12]
     74a:	4798      	blx	r3
     74c:	4b2d      	ldr	r3, [pc, #180]	; (804 <udc_process_setup+0x254>)
     74e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     750:	2101      	movs	r1, #1
     752:	4618      	mov	r0, r3
     754:	4b21      	ldr	r3, [pc, #132]	; (7dc <udc_process_setup+0x22c>)
     756:	4798      	blx	r3
     758:	e029      	b.n	7ae <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     75a:	2a02      	cmp	r2, #2
     75c:	f47f af3d 	bne.w	5da <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     760:	4b1c      	ldr	r3, [pc, #112]	; (7d4 <udc_process_setup+0x224>)
     762:	7918      	ldrb	r0, [r3, #4]
     764:	4b28      	ldr	r3, [pc, #160]	; (808 <udc_process_setup+0x258>)
     766:	4798      	blx	r3
     768:	4b28      	ldr	r3, [pc, #160]	; (80c <udc_process_setup+0x25c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     76a:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     76c:	2102      	movs	r1, #2
     76e:	4618      	mov	r0, r3
     770:	4b1a      	ldr	r3, [pc, #104]	; (7dc <udc_process_setup+0x22c>)
     772:	4798      	blx	r3
     774:	e01b      	b.n	7ae <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     776:	f013 031f 	ands.w	r3, r3, #31
     77a:	f040 8085 	bne.w	888 <udc_process_setup+0x2d8>
			switch (udd_g_ctrlreq.req.bRequest) {
     77e:	4a15      	ldr	r2, [pc, #84]	; (7d4 <udc_process_setup+0x224>)
     780:	7852      	ldrb	r2, [r2, #1]
     782:	3a01      	subs	r2, #1
     784:	2a08      	cmp	r2, #8
     786:	d87f      	bhi.n	888 <udc_process_setup+0x2d8>
     788:	e8df f012 	tbh	[pc, r2, lsl #1]
     78c:	007e0013 	.word	0x007e0013
     790:	007e00d8 	.word	0x007e00d8
     794:	007e0009 	.word	0x007e0009
     798:	007e007e 	.word	0x007e007e
     79c:	0044      	.short	0x0044
	if (udd_g_ctrlreq.req.wLength) {
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <udc_process_setup+0x224>)
     7a0:	88db      	ldrh	r3, [r3, #6]
     7a2:	2b00      	cmp	r3, #0
     7a4:	f47f af19 	bne.w	5da <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     7a8:	4a19      	ldr	r2, [pc, #100]	; (810 <udc_process_setup+0x260>)
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <udc_process_setup+0x224>)
     7ac:	611a      	str	r2, [r3, #16]
			return true;
     7ae:	2301      	movs	r3, #1
     7b0:	e71b      	b.n	5ea <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     7b2:	4b08      	ldr	r3, [pc, #32]	; (7d4 <udc_process_setup+0x224>)
     7b4:	88db      	ldrh	r3, [r3, #6]
     7b6:	2b00      	cmp	r3, #0
     7b8:	f47f af0f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     7bc:	4b05      	ldr	r3, [pc, #20]	; (7d4 <udc_process_setup+0x224>)
     7be:	885b      	ldrh	r3, [r3, #2]
     7c0:	2b01      	cmp	r3, #1
     7c2:	f47f af0a 	bne.w	5da <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     7c6:	4a04      	ldr	r2, [pc, #16]	; (7d8 <udc_process_setup+0x228>)
     7c8:	8813      	ldrh	r3, [r2, #0]
     7ca:	f023 0302 	bic.w	r3, r3, #2
     7ce:	8013      	strh	r3, [r2, #0]
     7d0:	e7ed      	b.n	7ae <udc_process_setup+0x1fe>
     7d2:	bf00      	nop
     7d4:	20000d7c 	.word	0x20000d7c
     7d8:	20000b34 	.word	0x20000b34
     7dc:	00001259 	.word	0x00001259
     7e0:	200000a8 	.word	0x200000a8
     7e4:	2000009c 	.word	0x2000009c
     7e8:	2000007e 	.word	0x2000007e
     7ec:	2000007c 	.word	0x2000007c
     7f0:	20000090 	.word	0x20000090
     7f4:	20000094 	.word	0x20000094
     7f8:	20000b3c 	.word	0x20000b3c
     7fc:	20000b40 	.word	0x20000b40
     800:	000003d5 	.word	0x000003d5
     804:	20000b38 	.word	0x20000b38
     808:	00001301 	.word	0x00001301
     80c:	20000b36 	.word	0x20000b36
     810:	000003bd 	.word	0x000003bd
	if (udd_g_ctrlreq.req.wLength) {
     814:	4b6f      	ldr	r3, [pc, #444]	; (9d4 <udc_process_setup+0x424>)
     816:	88db      	ldrh	r3, [r3, #6]
     818:	2b00      	cmp	r3, #0
     81a:	f47f aede 	bne.w	5da <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     81e:	4b6e      	ldr	r3, [pc, #440]	; (9d8 <udc_process_setup+0x428>)
     820:	4798      	blx	r3
     822:	2800      	cmp	r0, #0
     824:	f43f aed2 	beq.w	5cc <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     828:	4b6a      	ldr	r3, [pc, #424]	; (9d4 <udc_process_setup+0x424>)
     82a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     82c:	4b6b      	ldr	r3, [pc, #428]	; (9dc <udc_process_setup+0x42c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     832:	429a      	cmp	r2, r3
     834:	f73f aeca 	bgt.w	5cc <udc_process_setup+0x1c>
	udc_reset();
     838:	4b69      	ldr	r3, [pc, #420]	; (9e0 <udc_process_setup+0x430>)
     83a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     83c:	4b65      	ldr	r3, [pc, #404]	; (9d4 <udc_process_setup+0x424>)
     83e:	789b      	ldrb	r3, [r3, #2]
     840:	4a68      	ldr	r2, [pc, #416]	; (9e4 <udc_process_setup+0x434>)
     842:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     844:	2b00      	cmp	r3, #0
     846:	d0b2      	beq.n	7ae <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     848:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     84c:	3b01      	subs	r3, #1
     84e:	4a63      	ldr	r2, [pc, #396]	; (9dc <udc_process_setup+0x42c>)
     850:	6852      	ldr	r2, [r2, #4]
     852:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
     856:	4964      	ldr	r1, [pc, #400]	; (9e8 <udc_process_setup+0x438>)
     858:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     85a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     85e:	791b      	ldrb	r3, [r3, #4]
     860:	2b00      	cmp	r3, #0
     862:	d0a4      	beq.n	7ae <udc_process_setup+0x1fe>
     864:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     866:	4626      	mov	r6, r4
     868:	4d60      	ldr	r5, [pc, #384]	; (9ec <udc_process_setup+0x43c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     86a:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
     86c:	4631      	mov	r1, r6
     86e:	4620      	mov	r0, r4
     870:	47a8      	blx	r5
     872:	2800      	cmp	r0, #0
     874:	f43f aeaa 	beq.w	5cc <udc_process_setup+0x1c>
			iface_num++) {
     878:	3401      	adds	r4, #1
     87a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	681b      	ldr	r3, [r3, #0]
     880:	791b      	ldrb	r3, [r3, #4]
     882:	42a3      	cmp	r3, r4
     884:	d8f2      	bhi.n	86c <udc_process_setup+0x2bc>
     886:	e792      	b.n	7ae <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     888:	2b01      	cmp	r3, #1
     88a:	d00a      	beq.n	8a2 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     88c:	2b02      	cmp	r3, #2
     88e:	f47f ae9d 	bne.w	5cc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     892:	4b50      	ldr	r3, [pc, #320]	; (9d4 <udc_process_setup+0x424>)
     894:	785b      	ldrb	r3, [r3, #1]
     896:	2b01      	cmp	r3, #1
     898:	d02b      	beq.n	8f2 <udc_process_setup+0x342>
     89a:	2b03      	cmp	r3, #3
     89c:	d039      	beq.n	912 <udc_process_setup+0x362>
	return false;
     89e:	2300      	movs	r3, #0
     8a0:	e04d      	b.n	93e <udc_process_setup+0x38e>
			switch (udd_g_ctrlreq.req.bRequest) {
     8a2:	4a4c      	ldr	r2, [pc, #304]	; (9d4 <udc_process_setup+0x424>)
     8a4:	7852      	ldrb	r2, [r2, #1]
     8a6:	2a0b      	cmp	r2, #11
     8a8:	d1f0      	bne.n	88c <udc_process_setup+0x2dc>
	if (udd_g_ctrlreq.req.wLength) {
     8aa:	4b4a      	ldr	r3, [pc, #296]	; (9d4 <udc_process_setup+0x424>)
     8ac:	88db      	ldrh	r3, [r3, #6]
     8ae:	b913      	cbnz	r3, 8b6 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
     8b0:	4b4c      	ldr	r3, [pc, #304]	; (9e4 <udc_process_setup+0x434>)
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	b973      	cbnz	r3, 8d4 <udc_process_setup+0x324>
	if (0 == udc_num_configuration) {
     8b6:	4b4b      	ldr	r3, [pc, #300]	; (9e4 <udc_process_setup+0x434>)
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	f000 8088 	beq.w	9d0 <udc_process_setup+0x420>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     8c0:	4b44      	ldr	r3, [pc, #272]	; (9d4 <udc_process_setup+0x424>)
     8c2:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     8c4:	4b48      	ldr	r3, [pc, #288]	; (9e8 <udc_process_setup+0x438>)
     8c6:	681d      	ldr	r5, [r3, #0]
     8c8:	682b      	ldr	r3, [r5, #0]
     8ca:	791b      	ldrb	r3, [r3, #4]
     8cc:	42a3      	cmp	r3, r4
     8ce:	d83a      	bhi.n	946 <udc_process_setup+0x396>
	return false;
     8d0:	2300      	movs	r3, #0
     8d2:	e68a      	b.n	5ea <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     8d4:	4b3f      	ldr	r3, [pc, #252]	; (9d4 <udc_process_setup+0x424>)
     8d6:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     8d8:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     8da:	4620      	mov	r0, r4
     8dc:	4b44      	ldr	r3, [pc, #272]	; (9f0 <udc_process_setup+0x440>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	f43f ae73 	beq.w	5cc <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     8e6:	b2e9      	uxtb	r1, r5
     8e8:	4620      	mov	r0, r4
     8ea:	4b40      	ldr	r3, [pc, #256]	; (9ec <udc_process_setup+0x43c>)
     8ec:	4798      	blx	r3
     8ee:	4603      	mov	r3, r0
     8f0:	e025      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
     8f2:	4b38      	ldr	r3, [pc, #224]	; (9d4 <udc_process_setup+0x424>)
     8f4:	88db      	ldrh	r3, [r3, #6]
     8f6:	2b00      	cmp	r3, #0
     8f8:	f47f ae6f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     8fc:	4b35      	ldr	r3, [pc, #212]	; (9d4 <udc_process_setup+0x424>)
     8fe:	885b      	ldrh	r3, [r3, #2]
     900:	2b00      	cmp	r3, #0
     902:	f47f ae6a 	bne.w	5da <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     906:	4b33      	ldr	r3, [pc, #204]	; (9d4 <udc_process_setup+0x424>)
     908:	7918      	ldrb	r0, [r3, #4]
     90a:	4b3a      	ldr	r3, [pc, #232]	; (9f4 <udc_process_setup+0x444>)
     90c:	4798      	blx	r3
     90e:	4603      	mov	r3, r0
     910:	e015      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
     912:	4b30      	ldr	r3, [pc, #192]	; (9d4 <udc_process_setup+0x424>)
     914:	88db      	ldrh	r3, [r3, #6]
     916:	2b00      	cmp	r3, #0
     918:	f47f ae5f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     91c:	4b2d      	ldr	r3, [pc, #180]	; (9d4 <udc_process_setup+0x424>)
     91e:	885b      	ldrh	r3, [r3, #2]
     920:	2b00      	cmp	r3, #0
     922:	f47f ae5a 	bne.w	5da <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     926:	4c2b      	ldr	r4, [pc, #172]	; (9d4 <udc_process_setup+0x424>)
     928:	7920      	ldrb	r0, [r4, #4]
     92a:	4b33      	ldr	r3, [pc, #204]	; (9f8 <udc_process_setup+0x448>)
     92c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     92e:	7920      	ldrb	r0, [r4, #4]
     930:	4b32      	ldr	r3, [pc, #200]	; (9fc <udc_process_setup+0x44c>)
     932:	4798      	blx	r3
     934:	4603      	mov	r3, r0
     936:	e002      	b.n	93e <udc_process_setup+0x38e>
		return false;
     938:	2300      	movs	r3, #0
     93a:	e000      	b.n	93e <udc_process_setup+0x38e>
				return udc_req_std_dev_set_feature();
     93c:	2300      	movs	r3, #0
		if (udc_reqstd()) {
     93e:	2b00      	cmp	r3, #0
     940:	f47f ae53 	bne.w	5ea <udc_process_setup+0x3a>
     944:	e642      	b.n	5cc <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
     946:	2100      	movs	r1, #0
     948:	4620      	mov	r0, r4
     94a:	4b2d      	ldr	r3, [pc, #180]	; (a00 <udc_process_setup+0x450>)
     94c:	4798      	blx	r3
     94e:	2800      	cmp	r0, #0
     950:	f43f ae43 	beq.w	5da <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     954:	686b      	ldr	r3, [r5, #4]
     956:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     95a:	68eb      	ldr	r3, [r5, #12]
     95c:	4798      	blx	r3
     95e:	4601      	mov	r1, r0
     960:	4620      	mov	r0, r4
     962:	4b27      	ldr	r3, [pc, #156]	; (a00 <udc_process_setup+0x450>)
     964:	4798      	blx	r3
     966:	2800      	cmp	r0, #0
     968:	f43f ae37 	beq.w	5da <udc_process_setup+0x2a>
	return udi_api->setup();
     96c:	68ab      	ldr	r3, [r5, #8]
     96e:	4798      	blx	r3
		if (udc_req_iface()) {
     970:	4603      	mov	r3, r0
     972:	2800      	cmp	r0, #0
     974:	f47f ae39 	bne.w	5ea <udc_process_setup+0x3a>
     978:	e62f      	b.n	5da <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <udc_process_setup+0x434>)
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	b30b      	cbz	r3, 9c4 <udc_process_setup+0x414>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     980:	4b19      	ldr	r3, [pc, #100]	; (9e8 <udc_process_setup+0x438>)
     982:	681a      	ldr	r2, [r3, #0]
     984:	6813      	ldr	r3, [r2, #0]
     986:	791b      	ldrb	r3, [r3, #4]
     988:	b1f3      	cbz	r3, 9c8 <udc_process_setup+0x418>
     98a:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     98c:	4e1c      	ldr	r6, [pc, #112]	; (a00 <udc_process_setup+0x450>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     98e:	4f16      	ldr	r7, [pc, #88]	; (9e8 <udc_process_setup+0x438>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     990:	6853      	ldr	r3, [r2, #4]
     992:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     996:	68eb      	ldr	r3, [r5, #12]
     998:	4798      	blx	r3
     99a:	4601      	mov	r1, r0
     99c:	4620      	mov	r0, r4
     99e:	47b0      	blx	r6
     9a0:	4603      	mov	r3, r0
     9a2:	2800      	cmp	r0, #0
     9a4:	f43f ae21 	beq.w	5ea <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     9a8:	68ab      	ldr	r3, [r5, #8]
     9aa:	4798      	blx	r3
     9ac:	4603      	mov	r3, r0
     9ae:	2800      	cmp	r0, #0
     9b0:	f47f ae1b 	bne.w	5ea <udc_process_setup+0x3a>
			iface_num++) {
     9b4:	3401      	adds	r4, #1
     9b6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9b8:	683a      	ldr	r2, [r7, #0]
     9ba:	6811      	ldr	r1, [r2, #0]
     9bc:	7909      	ldrb	r1, [r1, #4]
     9be:	42a1      	cmp	r1, r4
     9c0:	d8e6      	bhi.n	990 <udc_process_setup+0x3e0>
     9c2:	e612      	b.n	5ea <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
     9c4:	2300      	movs	r3, #0
     9c6:	e610      	b.n	5ea <udc_process_setup+0x3a>
	return false;
     9c8:	2300      	movs	r3, #0
     9ca:	e60e      	b.n	5ea <udc_process_setup+0x3a>
			return false; // Error from USB host
     9cc:	2300      	movs	r3, #0
     9ce:	e60c      	b.n	5ea <udc_process_setup+0x3a>
	return false;
     9d0:	2300      	movs	r3, #0
     9d2:	e60a      	b.n	5ea <udc_process_setup+0x3a>
     9d4:	20000d7c 	.word	0x20000d7c
     9d8:	00001249 	.word	0x00001249
     9dc:	200000a8 	.word	0x200000a8
     9e0:	00000529 	.word	0x00000529
     9e4:	20000b3c 	.word	0x20000b3c
     9e8:	20000b40 	.word	0x20000b40
     9ec:	000004b5 	.word	0x000004b5
     9f0:	00000449 	.word	0x00000449
     9f4:	00001315 	.word	0x00001315
     9f8:	000014dd 	.word	0x000014dd
     9fc:	00001a61 	.word	0x00001a61
     a00:	000003d5 	.word	0x000003d5

00000a04 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
     a04:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
     a06:	4601      	mov	r1, r0
     a08:	bb28      	cbnz	r0, a56 <udd_sleep_mode+0x52>
     a0a:	4b24      	ldr	r3, [pc, #144]	; (a9c <udd_sleep_mode+0x98>)
     a0c:	781b      	ldrb	r3, [r3, #0]
     a0e:	b91b      	cbnz	r3, a18 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
     a10:	4b22      	ldr	r3, [pc, #136]	; (a9c <udd_sleep_mode+0x98>)
     a12:	7019      	strb	r1, [r3, #0]
}
     a14:	b002      	add	sp, #8
     a16:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     a18:	4b21      	ldr	r3, [pc, #132]	; (aa0 <udd_sleep_mode+0x9c>)
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	b903      	cbnz	r3, a20 <udd_sleep_mode+0x1c>
     a1e:	e7fe      	b.n	a1e <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a20:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a24:	fab3 f383 	clz	r3, r3
     a28:	095b      	lsrs	r3, r3, #5
     a2a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a32:	2200      	movs	r2, #0
     a34:	4b1b      	ldr	r3, [pc, #108]	; (aa4 <udd_sleep_mode+0xa0>)
     a36:	701a      	strb	r2, [r3, #0]
	return flags;
     a38:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     a3a:	4a19      	ldr	r2, [pc, #100]	; (aa0 <udd_sleep_mode+0x9c>)
     a3c:	7813      	ldrb	r3, [r2, #0]
     a3e:	3b01      	subs	r3, #1
     a40:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     a42:	2800      	cmp	r0, #0
     a44:	d0e4      	beq.n	a10 <udd_sleep_mode+0xc>
		cpu_irq_enable();
     a46:	2201      	movs	r2, #1
     a48:	4b16      	ldr	r3, [pc, #88]	; (aa4 <udd_sleep_mode+0xa0>)
     a4a:	701a      	strb	r2, [r3, #0]
     a4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a50:	b662      	cpsie	i
     a52:	e7dd      	b.n	a10 <udd_sleep_mode+0xc>
     a54:	e7fe      	b.n	a54 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
     a56:	4b11      	ldr	r3, [pc, #68]	; (a9c <udd_sleep_mode+0x98>)
     a58:	781b      	ldrb	r3, [r3, #0]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d1d8      	bne.n	a10 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
     a5e:	4b10      	ldr	r3, [pc, #64]	; (aa0 <udd_sleep_mode+0x9c>)
     a60:	781b      	ldrb	r3, [r3, #0]
     a62:	2bff      	cmp	r3, #255	; 0xff
     a64:	d0f6      	beq.n	a54 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a66:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a6a:	fab3 f383 	clz	r3, r3
     a6e:	095b      	lsrs	r3, r3, #5
     a70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a72:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a78:	2200      	movs	r2, #0
     a7a:	4b0a      	ldr	r3, [pc, #40]	; (aa4 <udd_sleep_mode+0xa0>)
     a7c:	701a      	strb	r2, [r3, #0]
	return flags;
     a7e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
     a80:	4a07      	ldr	r2, [pc, #28]	; (aa0 <udd_sleep_mode+0x9c>)
     a82:	7813      	ldrb	r3, [r2, #0]
     a84:	3301      	adds	r3, #1
     a86:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     a88:	2800      	cmp	r0, #0
     a8a:	d0c1      	beq.n	a10 <udd_sleep_mode+0xc>
		cpu_irq_enable();
     a8c:	2201      	movs	r2, #1
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <udd_sleep_mode+0xa0>)
     a90:	701a      	strb	r2, [r3, #0]
     a92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a96:	b662      	cpsie	i
     a98:	e7ba      	b.n	a10 <udd_sleep_mode+0xc>
     a9a:	bf00      	nop
     a9c:	20000b49 	.word	0x20000b49
     aa0:	20000cec 	.word	0x20000cec
     aa4:	20000104 	.word	0x20000104

00000aa8 <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
     aa8:	2201      	movs	r2, #1
     aaa:	4b06      	ldr	r3, [pc, #24]	; (ac4 <udd_ctrl_init+0x1c>)
     aac:	601a      	str	r2, [r3, #0]
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
     aae:	2202      	movs	r2, #2
     ab0:	3bc0      	subs	r3, #192	; 0xc0
     ab2:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
     ab4:	4a04      	ldr	r2, [pc, #16]	; (ac8 <udd_ctrl_init+0x20>)
     ab6:	2300      	movs	r3, #0
     ab8:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     aba:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
     abc:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
     abe:	4a03      	ldr	r2, [pc, #12]	; (acc <udd_ctrl_init+0x24>)
     ac0:	7013      	strb	r3, [r2, #0]
     ac2:	4770      	bx	lr
     ac4:	400a5220 	.word	0x400a5220
     ac8:	20000d7c 	.word	0x20000d7c
     acc:	20000b4e 	.word	0x20000b4e

00000ad0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
     ad0:	2205      	movs	r2, #5
     ad2:	4b03      	ldr	r3, [pc, #12]	; (ae0 <udd_ctrl_stall_data+0x10>)
     ad4:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
     ad6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     ada:	4b02      	ldr	r3, [pc, #8]	; (ae4 <udd_ctrl_stall_data+0x14>)
     adc:	601a      	str	r2, [r3, #0]
     ade:	4770      	bx	lr
     ae0:	20000b4e 	.word	0x20000b4e
     ae4:	400a51f0 	.word	0x400a51f0

00000ae8 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
     ae8:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
     aea:	2203      	movs	r2, #3
     aec:	4b12      	ldr	r3, [pc, #72]	; (b38 <udd_ctrl_send_zlp_in+0x50>)
     aee:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
     af0:	4b12      	ldr	r3, [pc, #72]	; (b3c <udd_ctrl_send_zlp_in+0x54>)
     af2:	685a      	ldr	r2, [r3, #4]
     af4:	f36f 020e 	bfc	r2, #0, #15
     af8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     afa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     afe:	fab3 f383 	clz	r3, r3
     b02:	095b      	lsrs	r3, r3, #5
     b04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     b06:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     b08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     b0c:	2200      	movs	r2, #0
     b0e:	4b0c      	ldr	r3, [pc, #48]	; (b40 <udd_ctrl_send_zlp_in+0x58>)
     b10:	701a      	strb	r2, [r3, #0]
	return flags;
     b12:	9801      	ldr	r0, [sp, #4]

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
     b14:	490b      	ldr	r1, [pc, #44]	; (b44 <udd_ctrl_send_zlp_in+0x5c>)
     b16:	2201      	movs	r2, #1
     b18:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
     b1a:	4b0b      	ldr	r3, [pc, #44]	; (b48 <udd_ctrl_send_zlp_in+0x60>)
     b1c:	601a      	str	r2, [r3, #0]

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
     b1e:	2208      	movs	r2, #8
     b20:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
     b22:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
     b24:	b128      	cbz	r0, b32 <udd_ctrl_send_zlp_in+0x4a>
		cpu_irq_enable();
     b26:	2201      	movs	r2, #1
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <udd_ctrl_send_zlp_in+0x58>)
     b2a:	701a      	strb	r2, [r3, #0]
     b2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b30:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
     b32:	b002      	add	sp, #8
     b34:	4770      	bx	lr
     b36:	bf00      	nop
     b38:	20000b4e 	.word	0x20000b4e
     b3c:	20000b80 	.word	0x20000b80
     b40:	20000104 	.word	0x20000104
     b44:	400a5160 	.word	0x400a5160
     b48:	400a51f0 	.word	0x400a51f0

00000b4c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
     b4c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
     b4e:	4b02      	ldr	r3, [pc, #8]	; (b58 <udd_ctrl_endofrequest+0xc>)
     b50:	691b      	ldr	r3, [r3, #16]
     b52:	b103      	cbz	r3, b56 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
     b54:	4798      	blx	r3
     b56:	bd08      	pop	{r3, pc}
     b58:	20000d7c 	.word	0x20000d7c

00000b5c <udd_ctrl_in_sent>:
{
     b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5e:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b60:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     b64:	fab3 f383 	clz	r3, r3
     b68:	095b      	lsrs	r3, r3, #5
     b6a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     b6c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     b6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     b72:	2200      	movs	r2, #0
     b74:	4b4c      	ldr	r3, [pc, #304]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     b76:	701a      	strb	r2, [r3, #0]
	return flags;
     b78:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
     b7a:	2101      	movs	r1, #1
     b7c:	4a4b      	ldr	r2, [pc, #300]	; (cac <udd_ctrl_in_sent+0x150>)
     b7e:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     b80:	b123      	cbz	r3, b8c <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
     b82:	4b49      	ldr	r3, [pc, #292]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     b84:	7019      	strb	r1, [r3, #0]
     b86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b8a:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
     b8c:	4b48      	ldr	r3, [pc, #288]	; (cb0 <udd_ctrl_in_sent+0x154>)
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	2b03      	cmp	r3, #3
     b92:	d043      	beq.n	c1c <udd_ctrl_in_sent+0xc0>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
     b94:	4b47      	ldr	r3, [pc, #284]	; (cb4 <udd_ctrl_in_sent+0x158>)
     b96:	881b      	ldrh	r3, [r3, #0]
     b98:	4a47      	ldr	r2, [pc, #284]	; (cb8 <udd_ctrl_in_sent+0x15c>)
     b9a:	8994      	ldrh	r4, [r2, #12]
     b9c:	1ae4      	subs	r4, r4, r3
     b9e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
     ba0:	b9c4      	cbnz	r4, bd4 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
     ba2:	4a46      	ldr	r2, [pc, #280]	; (cbc <udd_ctrl_in_sent+0x160>)
     ba4:	8811      	ldrh	r1, [r2, #0]
     ba6:	440b      	add	r3, r1
     ba8:	b29b      	uxth	r3, r3
     baa:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
     bac:	4a42      	ldr	r2, [pc, #264]	; (cb8 <udd_ctrl_in_sent+0x15c>)
     bae:	88d2      	ldrh	r2, [r2, #6]
     bb0:	429a      	cmp	r2, r3
     bb2:	d038      	beq.n	c26 <udd_ctrl_in_sent+0xca>
				|| b_shortpacket) {
     bb4:	4b42      	ldr	r3, [pc, #264]	; (cc0 <udd_ctrl_in_sent+0x164>)
     bb6:	781b      	ldrb	r3, [r3, #0]
     bb8:	2b00      	cmp	r3, #0
     bba:	d134      	bne.n	c26 <udd_ctrl_in_sent+0xca>
		if ((!udd_g_ctrlreq.over_under_run)
     bbc:	4b3e      	ldr	r3, [pc, #248]	; (cb8 <udd_ctrl_in_sent+0x15c>)
     bbe:	695b      	ldr	r3, [r3, #20]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d04e      	beq.n	c62 <udd_ctrl_in_sent+0x106>
				|| (!udd_g_ctrlreq.over_under_run())) {
     bc4:	4798      	blx	r3
     bc6:	2800      	cmp	r0, #0
     bc8:	d04b      	beq.n	c62 <udd_ctrl_in_sent+0x106>
			udd_ctrl_payload_nb_trans = 0;
     bca:	2200      	movs	r2, #0
     bcc:	4b39      	ldr	r3, [pc, #228]	; (cb4 <udd_ctrl_in_sent+0x158>)
     bce:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
     bd0:	4b39      	ldr	r3, [pc, #228]	; (cb8 <udd_ctrl_in_sent+0x15c>)
     bd2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
     bd4:	2c07      	cmp	r4, #7
     bd6:	d944      	bls.n	c62 <udd_ctrl_in_sent+0x106>
		b_shortpacket = false;
     bd8:	2200      	movs	r2, #0
     bda:	4b39      	ldr	r3, [pc, #228]	; (cc0 <udd_ctrl_in_sent+0x164>)
     bdc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
     bde:	2408      	movs	r4, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     be0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     be4:	fab3 f383 	clz	r3, r3
     be8:	095b      	lsrs	r3, r3, #5
     bea:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     bec:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     bee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     bf2:	2200      	movs	r2, #0
     bf4:	4b2c      	ldr	r3, [pc, #176]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     bf6:	701a      	strb	r2, [r3, #0]
	return flags;
     bf8:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
     bfa:	4b32      	ldr	r3, [pc, #200]	; (cc4 <udd_ctrl_in_sent+0x168>)
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	f013 0f02 	tst.w	r3, #2
     c02:	d032      	beq.n	c6a <udd_ctrl_in_sent+0x10e>
	if (cpu_irq_is_enabled_flags(flags))
     c04:	b12d      	cbz	r5, c12 <udd_ctrl_in_sent+0xb6>
		cpu_irq_enable();
     c06:	2201      	movs	r2, #1
     c08:	4b27      	ldr	r3, [pc, #156]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     c0a:	701a      	strb	r2, [r3, #0]
     c0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c10:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     c12:	2204      	movs	r2, #4
     c14:	4b26      	ldr	r3, [pc, #152]	; (cb0 <udd_ctrl_in_sent+0x154>)
     c16:	701a      	strb	r2, [r3, #0]
}
     c18:	b005      	add	sp, #20
     c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		udd_ctrl_endofrequest();
     c1c:	4b2a      	ldr	r3, [pc, #168]	; (cc8 <udd_ctrl_in_sent+0x16c>)
     c1e:	4798      	blx	r3
		udd_ctrl_init();
     c20:	4b2a      	ldr	r3, [pc, #168]	; (ccc <udd_ctrl_in_sent+0x170>)
     c22:	4798      	blx	r3
		return;
     c24:	e7f8      	b.n	c18 <udd_ctrl_in_sent+0xbc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     c26:	2204      	movs	r2, #4
     c28:	4b21      	ldr	r3, [pc, #132]	; (cb0 <udd_ctrl_in_sent+0x154>)
     c2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c2c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c30:	fab3 f383 	clz	r3, r3
     c34:	095b      	lsrs	r3, r3, #5
     c36:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c3a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c3e:	2200      	movs	r2, #0
     c40:	4b19      	ldr	r3, [pc, #100]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     c42:	701a      	strb	r2, [r3, #0]
	return flags;
     c44:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
     c46:	2310      	movs	r3, #16
     c48:	4921      	ldr	r1, [pc, #132]	; (cd0 <udd_ctrl_in_sent+0x174>)
     c4a:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
     c4c:	3190      	adds	r1, #144	; 0x90
     c4e:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
     c50:	2a00      	cmp	r2, #0
     c52:	d0e1      	beq.n	c18 <udd_ctrl_in_sent+0xbc>
		cpu_irq_enable();
     c54:	2201      	movs	r2, #1
     c56:	4b14      	ldr	r3, [pc, #80]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     c58:	701a      	strb	r2, [r3, #0]
     c5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c5e:	b662      	cpsie	i
     c60:	e7da      	b.n	c18 <udd_ctrl_in_sent+0xbc>
		b_shortpacket = true;
     c62:	2201      	movs	r2, #1
     c64:	4b16      	ldr	r3, [pc, #88]	; (cc0 <udd_ctrl_in_sent+0x164>)
     c66:	701a      	strb	r2, [r3, #0]
     c68:	e7ba      	b.n	be0 <udd_ctrl_in_sent+0x84>
	memcpy(udd_ctrl_buffer,
     c6a:	4f12      	ldr	r7, [pc, #72]	; (cb4 <udd_ctrl_in_sent+0x158>)
     c6c:	883e      	ldrh	r6, [r7, #0]
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
     c6e:	4b12      	ldr	r3, [pc, #72]	; (cb8 <udd_ctrl_in_sent+0x15c>)
     c70:	6899      	ldr	r1, [r3, #8]
	memcpy(udd_ctrl_buffer,
     c72:	4622      	mov	r2, r4
     c74:	4431      	add	r1, r6
     c76:	4817      	ldr	r0, [pc, #92]	; (cd4 <udd_ctrl_in_sent+0x178>)
     c78:	4b17      	ldr	r3, [pc, #92]	; (cd8 <udd_ctrl_in_sent+0x17c>)
     c7a:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_remain;
     c7c:	4426      	add	r6, r4
     c7e:	803e      	strh	r6, [r7, #0]
	udd_udesc_set_buf0_ctn(0, nb_remain);
     c80:	4b16      	ldr	r3, [pc, #88]	; (cdc <udd_ctrl_in_sent+0x180>)
     c82:	685a      	ldr	r2, [r3, #4]
     c84:	f364 020e 	bfi	r2, r4, #0, #15
     c88:	605a      	str	r2, [r3, #4]
	udd_ack_in_send(0);
     c8a:	2301      	movs	r3, #1
     c8c:	4a10      	ldr	r2, [pc, #64]	; (cd0 <udd_ctrl_in_sent+0x174>)
     c8e:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
     c90:	3290      	adds	r2, #144	; 0x90
     c92:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     c94:	2d00      	cmp	r5, #0
     c96:	d0bf      	beq.n	c18 <udd_ctrl_in_sent+0xbc>
		cpu_irq_enable();
     c98:	461a      	mov	r2, r3
     c9a:	4b03      	ldr	r3, [pc, #12]	; (ca8 <udd_ctrl_in_sent+0x14c>)
     c9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     c9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ca2:	b662      	cpsie	i
     ca4:	e7b8      	b.n	c18 <udd_ctrl_in_sent+0xbc>
     ca6:	bf00      	nop
     ca8:	20000104 	.word	0x20000104
     cac:	400a5220 	.word	0x400a5220
     cb0:	20000b4e 	.word	0x20000b4e
     cb4:	20000b4a 	.word	0x20000b4a
     cb8:	20000d7c 	.word	0x20000d7c
     cbc:	20000b4c 	.word	0x20000b4c
     cc0:	20000b48 	.word	0x20000b48
     cc4:	400a5130 	.word	0x400a5130
     cc8:	00000b4d 	.word	0x00000b4d
     ccc:	00000aa9 	.word	0x00000aa9
     cd0:	400a5160 	.word	0x400a5160
     cd4:	20000d94 	.word	0x20000d94
     cd8:	000031a9 	.word	0x000031a9
     cdc:	20000b80 	.word	0x20000b80

00000ce0 <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
     ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ce4:	b085      	sub	sp, #20
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
     ce6:	f000 050f 	and.w	r5, r0, #15
	ep_size = udd_get_endpoint_size(ep_num);
     cea:	4bc5      	ldr	r3, [pc, #788]	; (1000 <__stack_size__>)
     cec:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
     cf0:	1e6c      	subs	r4, r5, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     cf2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     cf6:	fab3 f383 	clz	r3, r3
     cfa:	095b      	lsrs	r3, r3, #5
     cfc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     cfe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     d00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     d04:	2200      	movs	r2, #0
     d06:	4bbf      	ldr	r3, [pc, #764]	; (1004 <__stack_size__+0x4>)
     d08:	701a      	strb	r2, [r3, #0]
	return flags;
     d0a:	9b01      	ldr	r3, [sp, #4]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
     d0c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
     d10:	40ae      	lsls	r6, r5
     d12:	4abd      	ldr	r2, [pc, #756]	; (1008 <__stack_size__+0x8>)
     d14:	6156      	str	r6, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
     d16:	b12b      	cbz	r3, d24 <udd_ep_trans_done+0x44>
		cpu_irq_enable();
     d18:	2201      	movs	r2, #1
     d1a:	4bba      	ldr	r3, [pc, #744]	; (1004 <__stack_size__+0x4>)
     d1c:	701a      	strb	r2, [r3, #0]
     d1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d22:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
     d24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     d28:	4ab8      	ldr	r2, [pc, #736]	; (100c <__stack_size__+0xc>)
     d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     d2e:	7c1b      	ldrb	r3, [r3, #16]
     d30:	f013 0f01 	tst.w	r3, #1
     d34:	d049      	beq.n	dca <udd_ep_trans_done+0xea>
     d36:	4607      	mov	r7, r0
	ep_size = udd_get_endpoint_size(ep_num);
     d38:	f3c1 1102 	ubfx	r1, r1, #4, #3
     d3c:	2208      	movs	r2, #8
     d3e:	fa02 fa01 	lsl.w	sl, r2, r1
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
     d42:	f010 0f80 	tst.w	r0, #128	; 0x80
     d46:	d143      	bne.n	dd0 <udd_ep_trans_done+0xf0>
			cpu_irq_restore(flags);
			return;
		}
	} else {
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
     d48:	ea4f 0945 	mov.w	r9, r5, lsl #1
     d4c:	4ab0      	ldr	r2, [pc, #704]	; (1010 <__stack_size__+0x10>)
     d4e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
     d52:	6852      	ldr	r2, [r2, #4]
     d54:	f3c2 080e 	ubfx	r8, r2, #0, #15

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
     d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d5c:	49ad      	ldr	r1, [pc, #692]	; (1014 <__stack_size__+0x14>)
     d5e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]

		// Ack interrupt
		udd_ack_out_received(ep_num);
     d62:	2102      	movs	r1, #2
     d64:	4aac      	ldr	r2, [pc, #688]	; (1018 <__stack_size__+0x18>)
     d66:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
		udd_ack_fifocon(ep_num);
     d6a:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 101c <__stack_size__+0x1c>
     d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     d72:	f84b 2025 	str.w	r2, [fp, r5, lsl #2]

		dbg_print("o%d ", nb_trans);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
     d76:	f013 0f04 	tst.w	r3, #4
     d7a:	f040 80c9 	bne.w	f10 <udd_ep_trans_done+0x230>
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
     d7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     d82:	4aa2      	ldr	r2, [pc, #648]	; (100c <__stack_size__+0xc>)
     d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     d88:	68da      	ldr	r2, [r3, #12]
     d8a:	4442      	add	r2, r8
     d8c:	60da      	str	r2, [r3, #12]
		if (ptr_job->nb_trans > ptr_job->buf_size) {
     d8e:	689b      	ldr	r3, [r3, #8]
     d90:	429a      	cmp	r2, r3
     d92:	f240 80d4 	bls.w	f3e <udd_ep_trans_done+0x25e>
			ptr_job->nb_trans = ptr_job->buf_size;
     d96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     d9a:	499c      	ldr	r1, [pc, #624]	; (100c <__stack_size__+0xc>)
     d9c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     da0:	60d3      	str	r3, [r2, #12]
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
     da2:	4b9b      	ldr	r3, [pc, #620]	; (1010 <__stack_size__+0x10>)
     da4:	eb03 1909 	add.w	r9, r3, r9, lsl #4
     da8:	f8d9 3004 	ldr.w	r3, [r9, #4]
		}
	}

	// Job complete then call callback
	dbg_print("done%x ", ep);
	ptr_job->busy = false;
     dac:	4a97      	ldr	r2, [pc, #604]	; (100c <__stack_size__+0xc>)
     dae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     db2:	009b      	lsls	r3, r3, #2
     db4:	18d1      	adds	r1, r2, r3
     db6:	7c08      	ldrb	r0, [r1, #16]
     db8:	f36f 0000 	bfc	r0, #0, #1
     dbc:	7408      	strb	r0, [r1, #16]
	if (NULL != ptr_job->call_trans) {
     dbe:	58d5      	ldr	r5, [r2, r3]
     dc0:	b11d      	cbz	r5, dca <udd_ep_trans_done+0xea>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
     dc2:	463a      	mov	r2, r7
     dc4:	68c9      	ldr	r1, [r1, #12]
     dc6:	2000      	movs	r0, #0
     dc8:	47a8      	blx	r5
	}
	return;
}
     dca:	b005      	add	sp, #20
     dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nb_trans = udd_udesc_get_buf0_size(ep_num);
     dd0:	0069      	lsls	r1, r5, #1
     dd2:	4b8f      	ldr	r3, [pc, #572]	; (1010 <__stack_size__+0x10>)
     dd4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     dd8:	685a      	ldr	r2, [r3, #4]
     dda:	f3c2 4e0e 	ubfx	lr, r2, #16, #15
		udd_enable_busy_bank0(ep_num);
     dde:	488d      	ldr	r0, [pc, #564]	; (1014 <__stack_size__+0x14>)
     de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     de4:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
		udd_ack_in_send(ep_num);
     de8:	2201      	movs	r2, #1
     dea:	4b8b      	ldr	r3, [pc, #556]	; (1018 <__stack_size__+0x18>)
     dec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
		if (0 == nb_trans) {
     df0:	f1be 0f00 	cmp.w	lr, #0
     df4:	d10b      	bne.n	e0e <udd_ep_trans_done+0x12e>
			if (0 == udd_nb_busy_bank(ep_num)) {
     df6:	3b30      	subs	r3, #48	; 0x30
     df8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
     dfc:	f413 5f40 	tst.w	r3, #12288	; 0x3000
     e00:	d105      	bne.n	e0e <udd_ep_trans_done+0x12e>
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
     e02:	4b83      	ldr	r3, [pc, #524]	; (1010 <__stack_size__+0x10>)
     e04:	eb03 1301 	add.w	r3, r3, r1, lsl #4
     e08:	685a      	ldr	r2, [r3, #4]
     e0a:	f3c2 0e0e 	ubfx	lr, r2, #0, #15
		ptr_job->nb_trans += nb_trans;
     e0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     e12:	4a7e      	ldr	r2, [pc, #504]	; (100c <__stack_size__+0xc>)
     e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e18:	68da      	ldr	r2, [r3, #12]
     e1a:	4472      	add	r2, lr
     e1c:	60da      	str	r2, [r3, #12]
		if ((ptr_job->nb_trans != ptr_job->buf_size)
     e1e:	689b      	ldr	r3, [r3, #8]
     e20:	429a      	cmp	r2, r3
     e22:	d056      	beq.n	ed2 <udd_ep_trans_done+0x1f2>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
     e24:	1a9b      	subs	r3, r3, r2
     e26:	b29b      	uxth	r3, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     e28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     e2c:	d15e      	bne.n	eec <udd_ep_trans_done+0x20c>
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
     e2e:	eb04 0784 	add.w	r7, r4, r4, lsl #2
     e32:	4a76      	ldr	r2, [pc, #472]	; (100c <__stack_size__+0xc>)
     e34:	eb02 0787 	add.w	r7, r2, r7, lsl #2
     e38:	7c3a      	ldrb	r2, [r7, #16]
     e3a:	f3c2 0840 	ubfx	r8, r2, #1, #1
     e3e:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 1010 <__stack_size__+0x10>
     e42:	eb0e 1e01 	add.w	lr, lr, r1, lsl #4
     e46:	f8de c004 	ldr.w	ip, [lr, #4]
     e4a:	f368 7cdf 	bfi	ip, r8, #31, #1
     e4e:	f8ce c004 	str.w	ip, [lr, #4]
				ptr_job->b_shortpacket = false; // No need to request another ZLP
     e52:	f36f 0241 	bfc	r2, #1, #1
     e56:	743a      	strb	r2, [r7, #16]
			udd_udesc_set_buf0_ctn(ep_num, next_trans);
     e58:	4f6d      	ldr	r7, [pc, #436]	; (1010 <__stack_size__+0x10>)
     e5a:	0109      	lsls	r1, r1, #4
     e5c:	187a      	adds	r2, r7, r1
     e5e:	f8d2 e004 	ldr.w	lr, [r2, #4]
     e62:	f363 0e0e 	bfi	lr, r3, #0, #15
     e66:	f8c2 e004 	str.w	lr, [r2, #4]
			udd_udesc_rst_buf0_size(ep_num);
     e6a:	6853      	ldr	r3, [r2, #4]
     e6c:	f36f 431e 	bfc	r3, #16, #15
     e70:	6053      	str	r3, [r2, #4]
			udd_udesc_set_buf0_addr(ep_num,
     e72:	4b66      	ldr	r3, [pc, #408]	; (100c <__stack_size__+0xc>)
     e74:	00a2      	lsls	r2, r4, #2
     e76:	eb02 0e04 	add.w	lr, r2, r4
     e7a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
     e7e:	f8de 2004 	ldr.w	r2, [lr, #4]
     e82:	f8de 300c 	ldr.w	r3, [lr, #12]
     e86:	4413      	add	r3, r2
     e88:	507b      	str	r3, [r7, r1]
			udd_ack_fifocon(ep_num);
     e8a:	4b64      	ldr	r3, [pc, #400]	; (101c <__stack_size__+0x1c>)
     e8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     e90:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
			udd_disable_busy_bank0(ep_num);
     e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     ea0:	fab3 f383 	clz	r3, r3
     ea4:	095b      	lsrs	r3, r3, #5
     ea6:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     ea8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     eaa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     eae:	2200      	movs	r2, #0
     eb0:	4b54      	ldr	r3, [pc, #336]	; (1004 <__stack_size__+0x4>)
     eb2:	701a      	strb	r2, [r3, #0]
	return flags;
     eb4:	9b02      	ldr	r3, [sp, #8]
			udd_enable_in_send_interrupt(ep_num);
     eb6:	2201      	movs	r2, #1
     eb8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
			udd_enable_endpoint_interrupt(ep_num);
     ebc:	4a52      	ldr	r2, [pc, #328]	; (1008 <__stack_size__+0x8>)
     ebe:	6196      	str	r6, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
     ec0:	2b00      	cmp	r3, #0
     ec2:	d082      	beq.n	dca <udd_ep_trans_done+0xea>
		cpu_irq_enable();
     ec4:	2201      	movs	r2, #1
     ec6:	4b4f      	ldr	r3, [pc, #316]	; (1004 <__stack_size__+0x4>)
     ec8:	701a      	strb	r2, [r3, #0]
     eca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ece:	b662      	cpsie	i
     ed0:	e77b      	b.n	dca <udd_ep_trans_done+0xea>
				|| ptr_job->b_shortpacket) {
     ed2:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
     ed6:	f8df c134 	ldr.w	ip, [pc, #308]	; 100c <__stack_size__+0xc>
     eda:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
     ede:	f89e e010 	ldrb.w	lr, [lr, #16]
     ee2:	f01e 0f02 	tst.w	lr, #2
     ee6:	f43f af61 	beq.w	dac <udd_ep_trans_done+0xcc>
     eea:	e79b      	b.n	e24 <udd_ep_trans_done+0x144>
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
     eec:	fa1f f78a 	uxth.w	r7, sl
     ef0:	f647 73ff 	movw	r3, #32767	; 0x7fff
     ef4:	fb93 f2f7 	sdiv	r2, r3, r7
     ef8:	fb07 3212 	mls	r2, r7, r2, r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
     efc:	1a9b      	subs	r3, r3, r2
     efe:	b29b      	uxth	r3, r3
				udd_udesc_set_buf0_autozlp(ep_num, false);
     f00:	4a43      	ldr	r2, [pc, #268]	; (1010 <__stack_size__+0x10>)
     f02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
     f06:	6857      	ldr	r7, [r2, #4]
     f08:	f36f 77df 	bfc	r7, #31, #1
     f0c:	6057      	str	r7, [r2, #4]
     f0e:	e7a3      	b.n	e58 <udd_ep_trans_done+0x178>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
     f10:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     f14:	4a3d      	ldr	r2, [pc, #244]	; (100c <__stack_size__+0xc>)
     f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f1a:	f8d3 e004 	ldr.w	lr, [r3, #4]
     f1e:	68d8      	ldr	r0, [r3, #12]
     f20:	fa1f f28a 	uxth.w	r2, sl
					ptr_job->buf_size % ep_size);
     f24:	6899      	ldr	r1, [r3, #8]
     f26:	4613      	mov	r3, r2
     f28:	fbb1 f2f2 	udiv	r2, r1, r2
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
     f2c:	fb03 1212 	mls	r2, r3, r2, r1
     f30:	493b      	ldr	r1, [pc, #236]	; (1020 <__stack_size__+0x20>)
     f32:	eb01 1184 	add.w	r1, r1, r4, lsl #6
     f36:	4470      	add	r0, lr
     f38:	4b3a      	ldr	r3, [pc, #232]	; (1024 <__stack_size__+0x24>)
     f3a:	4798      	blx	r3
     f3c:	e71f      	b.n	d7e <udd_ep_trans_done+0x9e>
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
     f3e:	4934      	ldr	r1, [pc, #208]	; (1010 <__stack_size__+0x10>)
     f40:	eb01 1109 	add.w	r1, r1, r9, lsl #4
     f44:	6849      	ldr	r1, [r1, #4]
     f46:	f3c1 410e 	ubfx	r1, r1, #16, #15
     f4a:	4588      	cmp	r8, r1
     f4c:	f47f af2e 	bne.w	dac <udd_ep_trans_done+0xcc>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
     f50:	429a      	cmp	r2, r3
     f52:	f43f af2b 	beq.w	dac <udd_ep_trans_done+0xcc>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
     f56:	1a9b      	subs	r3, r3, r2
     f58:	b29b      	uxth	r3, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     f5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f5e:	d143      	bne.n	fe8 <udd_ep_trans_done+0x308>
     f60:	f1ca 0100 	rsb	r1, sl, #0
     f64:	400b      	ands	r3, r1
	ep_size = udd_get_endpoint_size(ep_num);
     f66:	fa1f f78a 	uxth.w	r7, sl
			udd_udesc_rst_buf0_ctn(ep_num);
     f6a:	4929      	ldr	r1, [pc, #164]	; (1010 <__stack_size__+0x10>)
     f6c:	eb01 1109 	add.w	r1, r1, r9, lsl #4
     f70:	6848      	ldr	r0, [r1, #4]
     f72:	f36f 000e 	bfc	r0, #0, #15
     f76:	6048      	str	r0, [r1, #4]
			if (next_trans < ep_size) {
     f78:	42bb      	cmp	r3, r7
     f7a:	d255      	bcs.n	1028 <__stack_size__+0x28>
				ptr_job->b_use_out_cache_buffer = true;
     f7c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     f80:	4b22      	ldr	r3, [pc, #136]	; (100c <__stack_size__+0xc>)
     f82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f86:	7c1a      	ldrb	r2, [r3, #16]
     f88:	f042 0204 	orr.w	r2, r2, #4
     f8c:	741a      	strb	r2, [r3, #16]
				udd_udesc_set_buf0_addr(ep_num,
     f8e:	4b24      	ldr	r3, [pc, #144]	; (1020 <__stack_size__+0x20>)
     f90:	eb03 1484 	add.w	r4, r3, r4, lsl #6
     f94:	4a1e      	ldr	r2, [pc, #120]	; (1010 <__stack_size__+0x10>)
     f96:	ea4f 1909 	mov.w	r9, r9, lsl #4
     f9a:	f842 4009 	str.w	r4, [r2, r9]
				udd_udesc_set_buf0_size(ep_num, ep_size);
     f9e:	684a      	ldr	r2, [r1, #4]
     fa0:	f367 421e 	bfi	r2, r7, #16, #15
     fa4:	604a      	str	r2, [r1, #4]
			udd_disable_busy_bank0(ep_num);
     fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     faa:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fae:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     fb2:	fab3 f383 	clz	r3, r3
     fb6:	095b      	lsrs	r3, r3, #5
     fb8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     fba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     fbc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     fc0:	2200      	movs	r2, #0
     fc2:	4b10      	ldr	r3, [pc, #64]	; (1004 <__stack_size__+0x4>)
     fc4:	701a      	strb	r2, [r3, #0]
	return flags;
     fc6:	9b03      	ldr	r3, [sp, #12]
			udd_enable_out_received_interrupt(ep_num);
     fc8:	2202      	movs	r2, #2
     fca:	4912      	ldr	r1, [pc, #72]	; (1014 <__stack_size__+0x14>)
     fcc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
			udd_enable_endpoint_interrupt(ep_num);
     fd0:	4a0d      	ldr	r2, [pc, #52]	; (1008 <__stack_size__+0x8>)
     fd2:	6196      	str	r6, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
     fd4:	2b00      	cmp	r3, #0
     fd6:	f43f aef8 	beq.w	dca <udd_ep_trans_done+0xea>
		cpu_irq_enable();
     fda:	2201      	movs	r2, #1
     fdc:	4b09      	ldr	r3, [pc, #36]	; (1004 <__stack_size__+0x4>)
     fde:	701a      	strb	r2, [r3, #0]
     fe0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fe4:	b662      	cpsie	i
     fe6:	e6f0      	b.n	dca <udd_ep_trans_done+0xea>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
     fe8:	fa1f f08a 	uxth.w	r0, sl
     fec:	f647 73ff 	movw	r3, #32767	; 0x7fff
     ff0:	fb93 f1f0 	sdiv	r1, r3, r0
     ff4:	fb00 3111 	mls	r1, r0, r1, r3
				next_trans = UDD_ENDPOINT_MAX_TRANS
     ff8:	1a5b      	subs	r3, r3, r1
     ffa:	b29b      	uxth	r3, r3
     ffc:	e7b3      	b.n	f66 <udd_ep_trans_done+0x286>
     ffe:	bf00      	nop
    1000:	400a5100 	.word	0x400a5100
    1004:	20000104 	.word	0x20000104
    1008:	400a5000 	.word	0x400a5000
    100c:	20000b50 	.word	0x20000b50
    1010:	20000b80 	.word	0x20000b80
    1014:	400a51f0 	.word	0x400a51f0
    1018:	400a5160 	.word	0x400a5160
    101c:	400a5220 	.word	0x400a5220
    1020:	20000cfc 	.word	0x20000cfc
    1024:	000031a9 	.word	0x000031a9
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
    1028:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    102c:	4908      	ldr	r1, [pc, #32]	; (1050 <__stack_size__+0x50>)
    102e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1032:	6861      	ldr	r1, [r4, #4]
    1034:	440a      	add	r2, r1
    1036:	4807      	ldr	r0, [pc, #28]	; (1054 <__stack_size__+0x54>)
    1038:	ea4f 1909 	mov.w	r9, r9, lsl #4
    103c:	eb00 0109 	add.w	r1, r0, r9
    1040:	f840 2009 	str.w	r2, [r0, r9]
				udd_udesc_set_buf0_size(ep_num, next_trans);
    1044:	684a      	ldr	r2, [r1, #4]
    1046:	f363 421e 	bfi	r2, r3, #16, #15
    104a:	604a      	str	r2, [r1, #4]
    104c:	e7ab      	b.n	fa6 <udd_ep_trans_done+0x2c6>
    104e:	bf00      	nop
    1050:	20000b50 	.word	0x20000b50
    1054:	20000b80 	.word	0x20000b80

00001058 <udd_attach>:
{
    1058:	b530      	push	{r4, r5, lr}
    105a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    105c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1060:	fab3 f383 	clz	r3, r3
    1064:	095b      	lsrs	r3, r3, #5
    1066:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1068:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    106a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    106e:	2200      	movs	r2, #0
    1070:	4b18      	ldr	r3, [pc, #96]	; (10d4 <udd_attach+0x7c>)
    1072:	701a      	strb	r2, [r3, #0]
	return flags;
    1074:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
    1076:	2001      	movs	r0, #1
    1078:	4b17      	ldr	r3, [pc, #92]	; (10d8 <udd_attach+0x80>)
    107a:	4798      	blx	r3
	otg_unfreeze_clock();
    107c:	4a17      	ldr	r2, [pc, #92]	; (10dc <udd_attach+0x84>)
    107e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
    1082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1086:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while(!Is_otg_clock_usable());
    108a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    108e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1092:	d0fa      	beq.n	108a <udd_attach+0x32>
	udd_attach_device();
    1094:	4b11      	ldr	r3, [pc, #68]	; (10dc <udd_attach+0x84>)
    1096:	681a      	ldr	r2, [r3, #0]
    1098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    109c:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
    109e:	2508      	movs	r5, #8
    10a0:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
    10a2:	2101      	movs	r1, #1
    10a4:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
    10a6:	2210      	movs	r2, #16
    10a8:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
    10aa:	2004      	movs	r0, #4
    10ac:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
    10ae:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
    10b0:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
    10b2:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
    10b4:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
    10b6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    10ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    10be:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
    10c2:	b124      	cbz	r4, 10ce <udd_attach+0x76>
		cpu_irq_enable();
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <udd_attach+0x7c>)
    10c6:	7019      	strb	r1, [r3, #0]
    10c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    10cc:	b662      	cpsie	i
}
    10ce:	b003      	add	sp, #12
    10d0:	bd30      	pop	{r4, r5, pc}
    10d2:	bf00      	nop
    10d4:	20000104 	.word	0x20000104
    10d8:	00000a05 	.word	0x00000a05
    10dc:	400a5000 	.word	0x400a5000

000010e0 <udd_enable>:
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    10e8:	fab3 f383 	clz	r3, r3
    10ec:	095b      	lsrs	r3, r3, #5
    10ee:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    10f0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    10f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    10f6:	2500      	movs	r5, #0
    10f8:	4b3c      	ldr	r3, [pc, #240]	; (11ec <udd_enable+0x10c>)
    10fa:	701d      	strb	r5, [r3, #0]
	return flags;
    10fc:	9e00      	ldr	r6, [sp, #0]
	sysclk_enable_usb();
    10fe:	4b3c      	ldr	r3, [pc, #240]	; (11f0 <udd_enable+0x110>)
    1100:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1102:	4b3c      	ldr	r3, [pc, #240]	; (11f4 <udd_enable+0x114>)
    1104:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1108:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    110c:	2150      	movs	r1, #80	; 0x50
    110e:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1112:	601a      	str	r2, [r3, #0]
 * \param awen_mask Mask of asynchronous wake-up sources (use one of the defines
 *  PM_AWEN_xxxx in the part-specific header file)
 */
__always_inline static void usbc_async_wake_up_enable(void)
{
	PM->PM_AWEN |= (1U << PM_AWEN_USBC);
    1114:	4a38      	ldr	r2, [pc, #224]	; (11f8 <udd_enable+0x118>)
    1116:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    111a:	f043 0304 	orr.w	r3, r3, #4
    111e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	bpm_enable_fast_wakeup(BPM);
    1122:	4836      	ldr	r0, [pc, #216]	; (11fc <udd_enable+0x11c>)
    1124:	4b36      	ldr	r3, [pc, #216]	; (1200 <udd_enable+0x120>)
    1126:	4798      	blx	r3
	otg_enable_device_mode();
    1128:	4c36      	ldr	r4, [pc, #216]	; (1204 <udd_enable+0x124>)
    112a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    112e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1132:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_enable();
    1136:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    113e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_unfreeze_clock();
    1142:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    1146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    114a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	(void)Is_otg_clock_frozen();
    114e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
    1152:	4f2d      	ldr	r7, [pc, #180]	; (1208 <udd_enable+0x128>)
    1154:	2260      	movs	r2, #96	; 0x60
    1156:	4629      	mov	r1, r5
    1158:	4638      	mov	r0, r7
    115a:	4b2c      	ldr	r3, [pc, #176]	; (120c <udd_enable+0x12c>)
    115c:	4798      	blx	r3
	otg_register_desc_tab(udd_g_ep_table);
    115e:	f8d4 3830 	ldr.w	r3, [r4, #2096]	; 0x830
    1162:	f8c4 7830 	str.w	r7, [r4, #2096]	; 0x830
			udd_ep_job[i].busy = false;
    1166:	4b2a      	ldr	r3, [pc, #168]	; (1210 <udd_enable+0x130>)
    1168:	7c1a      	ldrb	r2, [r3, #16]
    116a:	f365 0200 	bfi	r2, r5, #0, #1
    116e:	741a      	strb	r2, [r3, #16]
    1170:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    1174:	f365 0200 	bfi	r2, r5, #0, #1
    1178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	udd_low_speed_disable();
    117c:	6823      	ldr	r3, [r4, #0]
    117e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1182:	6023      	str	r3, [r4, #0]
	udd_high_speed_disable();
    1184:	6823      	ldr	r3, [r4, #0]
    1186:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    118a:	6023      	str	r3, [r4, #0]
	otg_freeze_clock();
    118c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    1190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1194:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	udd_b_idle = false;
    1198:	4b1e      	ldr	r3, [pc, #120]	; (1214 <udd_enable+0x134>)
    119a:	701d      	strb	r5, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
    119c:	4b1e      	ldr	r3, [pc, #120]	; (1218 <udd_enable+0x138>)
    119e:	799b      	ldrb	r3, [r3, #6]
    11a0:	2bff      	cmp	r3, #255	; 0xff
    11a2:	d022      	beq.n	11ea <udd_enable+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    11a8:	fab3 f383 	clz	r3, r3
    11ac:	095b      	lsrs	r3, r3, #5
    11ae:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    11b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    11b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    11b6:	2200      	movs	r2, #0
    11b8:	4b0c      	ldr	r3, [pc, #48]	; (11ec <udd_enable+0x10c>)
    11ba:	701a      	strb	r2, [r3, #0]
	return flags;
    11bc:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
    11be:	4a16      	ldr	r2, [pc, #88]	; (1218 <udd_enable+0x138>)
    11c0:	7993      	ldrb	r3, [r2, #6]
    11c2:	3301      	adds	r3, #1
    11c4:	7193      	strb	r3, [r2, #6]
	if (cpu_irq_is_enabled_flags(flags))
    11c6:	b129      	cbz	r1, 11d4 <udd_enable+0xf4>
		cpu_irq_enable();
    11c8:	2201      	movs	r2, #1
    11ca:	4b08      	ldr	r3, [pc, #32]	; (11ec <udd_enable+0x10c>)
    11cc:	701a      	strb	r2, [r3, #0]
    11ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11d2:	b662      	cpsie	i
	udd_attach();
    11d4:	4b11      	ldr	r3, [pc, #68]	; (121c <udd_enable+0x13c>)
    11d6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    11d8:	b12e      	cbz	r6, 11e6 <udd_enable+0x106>
		cpu_irq_enable();
    11da:	2201      	movs	r2, #1
    11dc:	4b03      	ldr	r3, [pc, #12]	; (11ec <udd_enable+0x10c>)
    11de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    11e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11e4:	b662      	cpsie	i
}
    11e6:	b003      	add	sp, #12
    11e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11ea:	e7fe      	b.n	11ea <udd_enable+0x10a>
    11ec:	20000104 	.word	0x20000104
    11f0:	00002135 	.word	0x00002135
    11f4:	e000e100 	.word	0xe000e100
    11f8:	400e0000 	.word	0x400e0000
    11fc:	400f0000 	.word	0x400f0000
    1200:	000022cd 	.word	0x000022cd
    1204:	400a5000 	.word	0x400a5000
    1208:	20000b80 	.word	0x20000b80
    120c:	000032dd 	.word	0x000032dd
    1210:	20000b50 	.word	0x20000b50
    1214:	20000b49 	.word	0x20000b49
    1218:	20000cec 	.word	0x20000cec
    121c:	00001059 	.word	0x00001059

00001220 <udd_set_address>:
	udd_disable_address();
    1220:	4b08      	ldr	r3, [pc, #32]	; (1244 <udd_set_address+0x24>)
    1222:	681a      	ldr	r2, [r3, #0]
    1224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1228:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
    122a:	681a      	ldr	r2, [r3, #0]
    122c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1230:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1234:	4302      	orrs	r2, r0
    1236:	601a      	str	r2, [r3, #0]
	udd_enable_address();
    1238:	681a      	ldr	r2, [r3, #0]
    123a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    123e:	601a      	str	r2, [r3, #0]
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	400a5000 	.word	0x400a5000

00001248 <udd_getaddress>:
	return udd_get_configured_address();
    1248:	4b02      	ldr	r3, [pc, #8]	; (1254 <udd_getaddress+0xc>)
    124a:	6818      	ldr	r0, [r3, #0]
}
    124c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	400a5000 	.word	0x400a5000

00001258 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <udd_set_setup_payload+0x8>)
    125a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    125c:	8199      	strh	r1, [r3, #12]
    125e:	4770      	bx	lr
    1260:	20000d7c 	.word	0x20000d7c

00001264 <udd_ep_alloc>:
{
    1264:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
    1266:	f000 050f 	and.w	r5, r0, #15
	if (Is_udd_endpoint_enabled(ep_addr)) {
    126a:	4b22      	ldr	r3, [pc, #136]	; (12f4 <udd_ep_alloc+0x90>)
    126c:	69db      	ldr	r3, [r3, #28]
    126e:	2401      	movs	r4, #1
    1270:	40ac      	lsls	r4, r5
    1272:	4223      	tst	r3, r4
    1274:	d13b      	bne.n	12ee <udd_ep_alloc+0x8a>
	udd_configure_endpoint(ep_addr, bmAttributes,
    1276:	4e20      	ldr	r6, [pc, #128]	; (12f8 <udd_ep_alloc+0x94>)
    1278:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
    127c:	f427 57cb 	bic.w	r7, r7, #6496	; 0x1960
    1280:	f027 0714 	bic.w	r7, r7, #20
    1284:	02c9      	lsls	r1, r1, #11
    1286:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
    128a:	b240      	sxtb	r0, r0
    128c:	2800      	cmp	r0, #0
    128e:	bfb4      	ite	lt
    1290:	f44f 7380 	movlt.w	r3, #256	; 0x100
    1294:	2300      	movge	r3, #0
    1296:	430b      	orrs	r3, r1
    1298:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
    129c:	b289      	uxth	r1, r1
    129e:	f5b1 4f7c 	cmp.w	r1, #64512	; 0xfc00
    12a2:	d304      	bcc.n	12ae <udd_ep_alloc+0x4a>
    12a4:	2a08      	cmp	r2, #8
    12a6:	d920      	bls.n	12ea <udd_ep_alloc+0x86>
    12a8:	0052      	lsls	r2, r2, #1
    12aa:	3a01      	subs	r2, #1
    12ac:	e001      	b.n	12b2 <udd_ep_alloc+0x4e>
    12ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
    12b2:	fab2 f282 	clz	r2, r2
    12b6:	f1c2 021c 	rsb	r2, r2, #28
    12ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    12be:	f423 63d1 	bic.w	r3, r3, #1672	; 0x688
    12c2:	f023 0303 	bic.w	r3, r3, #3
    12c6:	04db      	lsls	r3, r3, #19
    12c8:	0cdb      	lsrs	r3, r3, #19
    12ca:	433b      	orrs	r3, r7
    12cc:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	udd_enable_busy_bank0(ep_addr);
    12d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    12d4:	4b09      	ldr	r3, [pc, #36]	; (12fc <udd_ep_alloc+0x98>)
    12d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
	udd_enable_endpoint(ep_addr);
    12da:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
    12de:	69da      	ldr	r2, [r3, #28]
    12e0:	4314      	orrs	r4, r2
    12e2:	61dc      	str	r4, [r3, #28]
	return true;
    12e4:	2001      	movs	r0, #1
}
    12e6:	bcf0      	pop	{r4, r5, r6, r7}
    12e8:	4770      	bx	lr
	udd_configure_endpoint(ep_addr, bmAttributes,
    12ea:	220f      	movs	r2, #15
    12ec:	e7e1      	b.n	12b2 <udd_ep_alloc+0x4e>
		return false;
    12ee:	2000      	movs	r0, #0
    12f0:	e7f9      	b.n	12e6 <udd_ep_alloc+0x82>
    12f2:	bf00      	nop
    12f4:	400a5000 	.word	0x400a5000
    12f8:	400a5100 	.word	0x400a5100
    12fc:	400a51f0 	.word	0x400a51f0

00001300 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
    1300:	f000 000f 	and.w	r0, r0, #15
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <udd_ep_is_halted+0x10>)
    1306:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    130a:	f3c0 40c0 	ubfx	r0, r0, #19, #1
    130e:	4770      	bx	lr
    1310:	400a51c0 	.word	0x400a51c0

00001314 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
    1314:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
    1318:	2802      	cmp	r0, #2
    131a:	d834      	bhi.n	1386 <udd_ep_clear_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep)) {
    131c:	4b1c      	ldr	r3, [pc, #112]	; (1390 <udd_ep_clear_halt+0x7c>)
    131e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1322:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    1326:	d030      	beq.n	138a <udd_ep_clear_halt+0x76>
		udd_disable_stall_handshake(ep);
    1328:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    132c:	4b19      	ldr	r3, [pc, #100]	; (1394 <udd_ep_clear_halt+0x80>)
    132e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (Is_udd_stall(ep)) {
    1332:	3bf0      	subs	r3, #240	; 0xf0
    1334:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1338:	f013 0f40 	tst.w	r3, #64	; 0x40
    133c:	d008      	beq.n	1350 <udd_ep_clear_halt+0x3c>
			udd_ack_stall(ep);
    133e:	2240      	movs	r2, #64	; 0x40
    1340:	4b15      	ldr	r3, [pc, #84]	; (1398 <udd_ep_clear_halt+0x84>)
    1342:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_reset_data_toggle(ep);
    1346:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    134a:	3390      	adds	r3, #144	; 0x90
    134c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	ptr_job = &udd_ep_job[ep - 1];
    1350:	3801      	subs	r0, #1
		if (ptr_job->busy == true) {
    1352:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    1356:	4b11      	ldr	r3, [pc, #68]	; (139c <udd_ep_clear_halt+0x88>)
    1358:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    135c:	7c1b      	ldrb	r3, [r3, #16]
    135e:	f013 0f01 	tst.w	r3, #1
    1362:	d101      	bne.n	1368 <udd_ep_clear_halt+0x54>
	return true;
    1364:	2001      	movs	r0, #1
    1366:	4770      	bx	lr
{
    1368:	b510      	push	{r4, lr}
			ptr_job->busy = false;
    136a:	490c      	ldr	r1, [pc, #48]	; (139c <udd_ep_clear_halt+0x88>)
    136c:	0083      	lsls	r3, r0, #2
    136e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1372:	7c14      	ldrb	r4, [r2, #16]
    1374:	f36f 0400 	bfc	r4, #0, #1
    1378:	7414      	strb	r4, [r2, #16]
			ptr_job->call_nohalt();
    137a:	4418      	add	r0, r3
    137c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    1380:	4798      	blx	r3
	return true;
    1382:	2001      	movs	r0, #1
    1384:	bd10      	pop	{r4, pc}
		return false;
    1386:	2000      	movs	r0, #0
    1388:	4770      	bx	lr
	return true;
    138a:	2001      	movs	r0, #1
    138c:	4770      	bx	lr
    138e:	bf00      	nop
    1390:	400a51c0 	.word	0x400a51c0
    1394:	400a5220 	.word	0x400a5220
    1398:	400a5160 	.word	0x400a5160
    139c:	20000b50 	.word	0x20000b50

000013a0 <udd_ep_run>:
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	b083      	sub	sp, #12
	ep_num = ep & USB_EP_ADDR_MASK;
    13a4:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_num) {
    13a8:	2c02      	cmp	r4, #2
    13aa:	d87f      	bhi.n	14ac <udd_ep_run+0x10c>
	if ((!Is_udd_endpoint_enabled(ep_num))
    13ac:	4d44      	ldr	r5, [pc, #272]	; (14c0 <udd_ep_run+0x120>)
    13ae:	69ee      	ldr	r6, [r5, #28]
    13b0:	2501      	movs	r5, #1
    13b2:	40a5      	lsls	r5, r4
    13b4:	4235      	tst	r5, r6
    13b6:	d07c      	beq.n	14b2 <udd_ep_run+0x112>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
    13b8:	4d42      	ldr	r5, [pc, #264]	; (14c4 <udd_ep_run+0x124>)
    13ba:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    13be:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    13c2:	d178      	bne.n	14b6 <udd_ep_run+0x116>
	ptr_job = &udd_ep_job[ep_num - 1];
    13c4:	1e66      	subs	r6, r4, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13c6:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    13ca:	fab5 f585 	clz	r5, r5
    13ce:	096d      	lsrs	r5, r5, #5
    13d0:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    13d2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    13d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    13d8:	2700      	movs	r7, #0
    13da:	4d3b      	ldr	r5, [pc, #236]	; (14c8 <udd_ep_run+0x128>)
    13dc:	702f      	strb	r7, [r5, #0]
	return flags;
    13de:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (ptr_job->busy == true) {
    13e2:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    13e6:	4d39      	ldr	r5, [pc, #228]	; (14cc <udd_ep_run+0x12c>)
    13e8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    13ec:	7c2d      	ldrb	r5, [r5, #16]
    13ee:	f015 0f01 	tst.w	r5, #1
    13f2:	d00a      	beq.n	140a <udd_ep_run+0x6a>
	if (cpu_irq_is_enabled_flags(flags))
    13f4:	f1be 0f00 	cmp.w	lr, #0
    13f8:	d05f      	beq.n	14ba <udd_ep_run+0x11a>
		cpu_irq_enable();
    13fa:	2201      	movs	r2, #1
    13fc:	4b32      	ldr	r3, [pc, #200]	; (14c8 <udd_ep_run+0x128>)
    13fe:	701a      	strb	r2, [r3, #0]
    1400:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1404:	b662      	cpsie	i
		return false; // Job already on going
    1406:	2000      	movs	r0, #0
    1408:	e051      	b.n	14ae <udd_ep_run+0x10e>
	ptr_job->busy = true;
    140a:	eb06 0586 	add.w	r5, r6, r6, lsl #2
    140e:	4f2f      	ldr	r7, [pc, #188]	; (14cc <udd_ep_run+0x12c>)
    1410:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    1414:	7c2f      	ldrb	r7, [r5, #16]
    1416:	f047 0701 	orr.w	r7, r7, #1
    141a:	742f      	strb	r7, [r5, #16]
	if (cpu_irq_is_enabled_flags(flags))
    141c:	f1be 0f00 	cmp.w	lr, #0
    1420:	d005      	beq.n	142e <udd_ep_run+0x8e>
		cpu_irq_enable();
    1422:	2701      	movs	r7, #1
    1424:	4d28      	ldr	r5, [pc, #160]	; (14c8 <udd_ep_run+0x128>)
    1426:	702f      	strb	r7, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1428:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    142c:	b662      	cpsie	i
	ptr_job->buf = buf;
    142e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 14cc <udd_ep_run+0x12c>
    1432:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    1436:	00bf      	lsls	r7, r7, #2
    1438:	eb0c 0507 	add.w	r5, ip, r7
    143c:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
    143e:	60ab      	str	r3, [r5, #8]
	ptr_job->nb_trans = 0;
    1440:	f04f 0e00 	mov.w	lr, #0
    1444:	f8c5 e00c 	str.w	lr, [r5, #12]
	ptr_job->call_trans = callback;
    1448:	9a08      	ldr	r2, [sp, #32]
    144a:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket;
    144e:	7c2a      	ldrb	r2, [r5, #16]
    1450:	f361 0241 	bfi	r2, r1, #1, #1
	ptr_job->b_use_out_cache_buffer = false;
    1454:	f36e 0282 	bfi	r2, lr, #2, #1
    1458:	742a      	strb	r2, [r5, #16]
	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
    145a:	f010 0f80 	tst.w	r0, #128	; 0x80
    145e:	d107      	bne.n	1470 <udd_ep_run+0xd0>
	&& (USBC_UECFG0_EPTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
    1460:	491b      	ldr	r1, [pc, #108]	; (14d0 <udd_ep_run+0x130>)
    1462:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    1466:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    146a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    146e:	d00e      	beq.n	148e <udd_ep_run+0xee>
	udd_udesc_rst_buf0_ctn(ep_num);
    1470:	4b18      	ldr	r3, [pc, #96]	; (14d4 <udd_ep_run+0x134>)
    1472:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1476:	6863      	ldr	r3, [r4, #4]
    1478:	f36f 030e 	bfc	r3, #0, #15
    147c:	6063      	str	r3, [r4, #4]
	udd_udesc_rst_buf0_size(ep_num);
    147e:	6863      	ldr	r3, [r4, #4]
    1480:	f36f 431e 	bfc	r3, #16, #15
    1484:	6063      	str	r3, [r4, #4]
	udd_ep_trans_done(ep);
    1486:	4b14      	ldr	r3, [pc, #80]	; (14d8 <udd_ep_run+0x138>)
    1488:	4798      	blx	r3
	return true;
    148a:	2001      	movs	r0, #1
    148c:	e00f      	b.n	14ae <udd_ep_run+0x10e>
	&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
    148e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    1492:	f3c1 1102 	ubfx	r1, r1, #4, #3
    1496:	2208      	movs	r2, #8
    1498:	408a      	lsls	r2, r1
    149a:	3a01      	subs	r2, #1
    149c:	421a      	tst	r2, r3
    149e:	d0e7      	beq.n	1470 <udd_ep_run+0xd0>
		ptr_job->busy = false;
    14a0:	7c2b      	ldrb	r3, [r5, #16]
    14a2:	f36f 0300 	bfc	r3, #0, #1
    14a6:	742b      	strb	r3, [r5, #16]
		return false;
    14a8:	4670      	mov	r0, lr
    14aa:	e000      	b.n	14ae <udd_ep_run+0x10e>
		return false;
    14ac:	2000      	movs	r0, #0
}
    14ae:	b003      	add	sp, #12
    14b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
    14b2:	2000      	movs	r0, #0
    14b4:	e7fb      	b.n	14ae <udd_ep_run+0x10e>
    14b6:	2000      	movs	r0, #0
    14b8:	e7f9      	b.n	14ae <udd_ep_run+0x10e>
		return false; // Job already on going
    14ba:	2000      	movs	r0, #0
    14bc:	e7f7      	b.n	14ae <udd_ep_run+0x10e>
    14be:	bf00      	nop
    14c0:	400a5000 	.word	0x400a5000
    14c4:	400a51c0 	.word	0x400a51c0
    14c8:	20000104 	.word	0x20000104
    14cc:	20000b50 	.word	0x20000b50
    14d0:	400a5100 	.word	0x400a5100
    14d4:	20000b80 	.word	0x20000b80
    14d8:	00000ce1 	.word	0x00000ce1

000014dc <udd_ep_abort>:
{
    14dc:	b570      	push	{r4, r5, r6, lr}
    14de:	b082      	sub	sp, #8
	ep &= USB_EP_ADDR_MASK;
    14e0:	f000 020f 	and.w	r2, r0, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    14e8:	fab3 f383 	clz	r3, r3
    14ec:	095b      	lsrs	r3, r3, #5
    14ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    14f0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    14f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    14f6:	2100      	movs	r1, #0
    14f8:	4b1d      	ldr	r3, [pc, #116]	; (1570 <udd_ep_abort+0x94>)
    14fa:	7019      	strb	r1, [r3, #0]
	return flags;
    14fc:	9801      	ldr	r0, [sp, #4]
	udd_disable_endpoint_interrupt(ep);
    14fe:	4613      	mov	r3, r2
    1500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1504:	4091      	lsls	r1, r2
    1506:	4c1b      	ldr	r4, [pc, #108]	; (1574 <udd_ep_abort+0x98>)
    1508:	6161      	str	r1, [r4, #20]
	if (cpu_irq_is_enabled_flags(flags))
    150a:	b128      	cbz	r0, 1518 <udd_ep_abort+0x3c>
		cpu_irq_enable();
    150c:	2001      	movs	r0, #1
    150e:	4918      	ldr	r1, [pc, #96]	; (1570 <udd_ep_abort+0x94>)
    1510:	7008      	strb	r0, [r1, #0]
    1512:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1516:	b662      	cpsie	i
	udd_enable_busy_bank0(ep);
    1518:	0095      	lsls	r5, r2, #2
    151a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    151e:	4916      	ldr	r1, [pc, #88]	; (1578 <udd_ep_abort+0x9c>)
    1520:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	ptr_job = &udd_ep_job[ep - 1];
    1524:	3b01      	subs	r3, #1
	if (!ptr_job->busy) {
    1526:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    152a:	4914      	ldr	r1, [pc, #80]	; (157c <udd_ep_abort+0xa0>)
    152c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1530:	7c09      	ldrb	r1, [r1, #16]
    1532:	f011 0f01 	tst.w	r1, #1
    1536:	d019      	beq.n	156c <udd_ep_abort+0x90>
	ptr_job->busy = false;
    1538:	4810      	ldr	r0, [pc, #64]	; (157c <udd_ep_abort+0xa0>)
    153a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    153e:	0089      	lsls	r1, r1, #2
    1540:	1844      	adds	r4, r0, r1
    1542:	7c26      	ldrb	r6, [r4, #16]
    1544:	f36f 0600 	bfc	r6, #0, #1
    1548:	7426      	strb	r6, [r4, #16]
	if (NULL != ptr_job->call_trans) {
    154a:	5844      	ldr	r4, [r0, r1]
    154c:	b174      	cbz	r4, 156c <udd_ep_abort+0x90>
		if (Is_udd_endpoint_in(ep)) {
    154e:	490c      	ldr	r1, [pc, #48]	; (1580 <udd_ep_abort+0xa4>)
    1550:	5869      	ldr	r1, [r5, r1]
    1552:	f411 7f80 	tst.w	r1, #256	; 0x100
			ep |= USB_EP_DIR_IN;
    1556:	bf18      	it	ne
    1558:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    155c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1560:	4906      	ldr	r1, [pc, #24]	; (157c <udd_ep_abort+0xa0>)
    1562:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1566:	68d9      	ldr	r1, [r3, #12]
    1568:	2001      	movs	r0, #1
    156a:	47a0      	blx	r4
}
    156c:	b002      	add	sp, #8
    156e:	bd70      	pop	{r4, r5, r6, pc}
    1570:	20000104 	.word	0x20000104
    1574:	400a5000 	.word	0x400a5000
    1578:	400a51f0 	.word	0x400a51f0
    157c:	20000b50 	.word	0x20000b50
    1580:	400a5100 	.word	0x400a5100

00001584 <USBC_Handler>:
{
    1584:	b530      	push	{r4, r5, lr}
    1586:	b085      	sub	sp, #20
	if (Is_udd_sof()) {
    1588:	4b8d      	ldr	r3, [pc, #564]	; (17c0 <USBC_Handler+0x23c>)
    158a:	685b      	ldr	r3, [r3, #4]
    158c:	f013 0f04 	tst.w	r3, #4
    1590:	d174      	bne.n	167c <USBC_Handler+0xf8>
	if (!Is_udd_endpoint_interrupt(0)) {
    1592:	4b8b      	ldr	r3, [pc, #556]	; (17c0 <USBC_Handler+0x23c>)
    1594:	685b      	ldr	r3, [r3, #4]
    1596:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    159a:	d026      	beq.n	15ea <USBC_Handler+0x66>
	udd_disable_nak_in_interrupt(0);
    159c:	4b89      	ldr	r3, [pc, #548]	; (17c4 <USBC_Handler+0x240>)
    159e:	2210      	movs	r2, #16
    15a0:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
    15a2:	2208      	movs	r2, #8
    15a4:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
    15a6:	3bf0      	subs	r3, #240	; 0xf0
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	f013 0f04 	tst.w	r3, #4
    15ae:	d170      	bne.n	1692 <USBC_Handler+0x10e>
	if (Is_udd_out_received(0)) {
    15b0:	4b85      	ldr	r3, [pc, #532]	; (17c8 <USBC_Handler+0x244>)
    15b2:	681b      	ldr	r3, [r3, #0]
    15b4:	f013 0f02 	tst.w	r3, #2
    15b8:	f040 80cb 	bne.w	1752 <USBC_Handler+0x1ce>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
    15bc:	4b82      	ldr	r3, [pc, #520]	; (17c8 <USBC_Handler+0x244>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	f013 0f01 	tst.w	r3, #1
    15c4:	d005      	beq.n	15d2 <USBC_Handler+0x4e>
    15c6:	4b81      	ldr	r3, [pc, #516]	; (17cc <USBC_Handler+0x248>)
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	f013 0f01 	tst.w	r3, #1
    15ce:	f040 816e 	bne.w	18ae <USBC_Handler+0x32a>
	if (Is_udd_nak_out(0)) {
    15d2:	4b7d      	ldr	r3, [pc, #500]	; (17c8 <USBC_Handler+0x244>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	f013 0f08 	tst.w	r3, #8
    15da:	f040 816b 	bne.w	18b4 <USBC_Handler+0x330>
	if (Is_udd_nak_in(0)) {
    15de:	4b7a      	ldr	r3, [pc, #488]	; (17c8 <USBC_Handler+0x244>)
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	f013 0f10 	tst.w	r3, #16
    15e6:	f040 8178 	bne.w	18da <USBC_Handler+0x356>
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    15ea:	4b75      	ldr	r3, [pc, #468]	; (17c0 <USBC_Handler+0x23c>)
    15ec:	691b      	ldr	r3, [r3, #16]
    15ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    15f2:	d005      	beq.n	1600 <USBC_Handler+0x7c>
				|| !Is_udd_endpoint_interrupt(ep)) {
    15f4:	4b72      	ldr	r3, [pc, #456]	; (17c0 <USBC_Handler+0x23c>)
    15f6:	685b      	ldr	r3, [r3, #4]
    15f8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    15fc:	f040 8187 	bne.w	190e <USBC_Handler+0x38a>
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    1600:	4b6f      	ldr	r3, [pc, #444]	; (17c0 <USBC_Handler+0x23c>)
    1602:	691b      	ldr	r3, [r3, #16]
    1604:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1608:	d005      	beq.n	1616 <USBC_Handler+0x92>
				|| !Is_udd_endpoint_interrupt(ep)) {
    160a:	4b6d      	ldr	r3, [pc, #436]	; (17c0 <USBC_Handler+0x23c>)
    160c:	685b      	ldr	r3, [r3, #4]
    160e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1612:	f040 817a 	bne.w	190a <USBC_Handler+0x386>
	if (Is_udd_reset()) {
    1616:	4b6a      	ldr	r3, [pc, #424]	; (17c0 <USBC_Handler+0x23c>)
    1618:	685b      	ldr	r3, [r3, #4]
    161a:	f013 0f08 	tst.w	r3, #8
    161e:	f040 8182 	bne.w	1926 <USBC_Handler+0x3a2>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
    1622:	4b67      	ldr	r3, [pc, #412]	; (17c0 <USBC_Handler+0x23c>)
    1624:	691b      	ldr	r3, [r3, #16]
    1626:	f013 0f01 	tst.w	r3, #1
    162a:	d005      	beq.n	1638 <USBC_Handler+0xb4>
    162c:	4b64      	ldr	r3, [pc, #400]	; (17c0 <USBC_Handler+0x23c>)
    162e:	685b      	ldr	r3, [r3, #4]
    1630:	f013 0f01 	tst.w	r3, #1
    1634:	f040 81c2 	bne.w	19bc <USBC_Handler+0x438>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
    1638:	4b61      	ldr	r3, [pc, #388]	; (17c0 <USBC_Handler+0x23c>)
    163a:	691b      	ldr	r3, [r3, #16]
    163c:	f013 0f10 	tst.w	r3, #16
    1640:	d023      	beq.n	168a <USBC_Handler+0x106>
    1642:	4b5f      	ldr	r3, [pc, #380]	; (17c0 <USBC_Handler+0x23c>)
    1644:	685b      	ldr	r3, [r3, #4]
    1646:	f013 0f10 	tst.w	r3, #16
    164a:	d01e      	beq.n	168a <USBC_Handler+0x106>
		udd_ack_wake_up();
    164c:	4b5c      	ldr	r3, [pc, #368]	; (17c0 <USBC_Handler+0x23c>)
    164e:	2210      	movs	r2, #16
    1650:	609a      	str	r2, [r3, #8]
		otg_unfreeze_clock();
    1652:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    1656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    165a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable());
    165e:	461a      	mov	r2, r3
    1660:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    1664:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1668:	d0fa      	beq.n	1660 <USBC_Handler+0xdc>
		udd_disable_wake_up_interrupt();
    166a:	4b55      	ldr	r3, [pc, #340]	; (17c0 <USBC_Handler+0x23c>)
    166c:	2210      	movs	r2, #16
    166e:	615a      	str	r2, [r3, #20]
		udd_ack_suspend();
    1670:	2001      	movs	r0, #1
    1672:	6098      	str	r0, [r3, #8]
		udd_enable_suspend_interrupt();
    1674:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
    1676:	4b56      	ldr	r3, [pc, #344]	; (17d0 <USBC_Handler+0x24c>)
    1678:	4798      	blx	r3
		goto udd_interrupt_end;
    167a:	e006      	b.n	168a <USBC_Handler+0x106>
		udd_ack_sof();
    167c:	2204      	movs	r2, #4
    167e:	4b50      	ldr	r3, [pc, #320]	; (17c0 <USBC_Handler+0x23c>)
    1680:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
    1682:	4b54      	ldr	r3, [pc, #336]	; (17d4 <USBC_Handler+0x250>)
    1684:	4798      	blx	r3
		UDC_SOF_EVENT();
    1686:	4b54      	ldr	r3, [pc, #336]	; (17d8 <USBC_Handler+0x254>)
    1688:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    168a:	f3bf 8f5f 	dmb	sy
}
    168e:	b005      	add	sp, #20
    1690:	bd30      	pop	{r4, r5, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1692:	4b52      	ldr	r3, [pc, #328]	; (17dc <USBC_Handler+0x258>)
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	b95b      	cbnz	r3, 16b0 <USBC_Handler+0x12c>
	if (8 != udd_udesc_get_buf0_ctn(0)) {
    1698:	4b51      	ldr	r3, [pc, #324]	; (17e0 <USBC_Handler+0x25c>)
    169a:	685b      	ldr	r3, [r3, #4]
    169c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    16a0:	2b08      	cmp	r3, #8
    16a2:	d00a      	beq.n	16ba <USBC_Handler+0x136>
		udd_ctrl_stall_data();
    16a4:	4b4f      	ldr	r3, [pc, #316]	; (17e4 <USBC_Handler+0x260>)
    16a6:	4798      	blx	r3
		udd_ack_setup_received(0);
    16a8:	2204      	movs	r2, #4
    16aa:	4b4f      	ldr	r3, [pc, #316]	; (17e8 <USBC_Handler+0x264>)
    16ac:	601a      	str	r2, [r3, #0]
    16ae:	e7ec      	b.n	168a <USBC_Handler+0x106>
		udd_ctrl_endofrequest();
    16b0:	4b4e      	ldr	r3, [pc, #312]	; (17ec <USBC_Handler+0x268>)
    16b2:	4798      	blx	r3
		udd_ctrl_init();
    16b4:	4b4e      	ldr	r3, [pc, #312]	; (17f0 <USBC_Handler+0x26c>)
    16b6:	4798      	blx	r3
    16b8:	e7ee      	b.n	1698 <USBC_Handler+0x114>
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    16ba:	4b4e      	ldr	r3, [pc, #312]	; (17f4 <USBC_Handler+0x270>)
    16bc:	4a4e      	ldr	r2, [pc, #312]	; (17f8 <USBC_Handler+0x274>)
    16be:	e892 0003 	ldmia.w	r2, {r0, r1}
    16c2:	e883 0003 	stmia.w	r3, {r0, r1}
	if (udc_process_setup() == false) {
    16c6:	4b4d      	ldr	r3, [pc, #308]	; (17fc <USBC_Handler+0x278>)
    16c8:	4798      	blx	r3
    16ca:	2800      	cmp	r0, #0
    16cc:	d02d      	beq.n	172a <USBC_Handler+0x1a6>
	udd_ack_setup_received(0);
    16ce:	2204      	movs	r2, #4
    16d0:	4b45      	ldr	r3, [pc, #276]	; (17e8 <USBC_Handler+0x264>)
    16d2:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
    16d4:	4b47      	ldr	r3, [pc, #284]	; (17f4 <USBC_Handler+0x270>)
    16d6:	f993 3000 	ldrsb.w	r3, [r3]
    16da:	2b00      	cmp	r3, #0
    16dc:	db2b      	blt.n	1736 <USBC_Handler+0x1b2>
		if (0 == udd_g_ctrlreq.req.wLength) {
    16de:	4b45      	ldr	r3, [pc, #276]	; (17f4 <USBC_Handler+0x270>)
    16e0:	88db      	ldrh	r3, [r3, #6]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d032      	beq.n	174c <USBC_Handler+0x1c8>
		udd_ctrl_prev_payload_nb_trans = 0;
    16e6:	2200      	movs	r2, #0
    16e8:	4b45      	ldr	r3, [pc, #276]	; (1800 <USBC_Handler+0x27c>)
    16ea:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
    16ec:	4b45      	ldr	r3, [pc, #276]	; (1804 <USBC_Handler+0x280>)
    16ee:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    16f0:	2101      	movs	r1, #1
    16f2:	4b3a      	ldr	r3, [pc, #232]	; (17dc <USBC_Handler+0x258>)
    16f4:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
    16f6:	2110      	movs	r1, #16
    16f8:	4b3b      	ldr	r3, [pc, #236]	; (17e8 <USBC_Handler+0x264>)
    16fa:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    16fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1700:	fab3 f383 	clz	r3, r3
    1704:	095b      	lsrs	r3, r3, #5
    1706:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1708:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    170a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    170e:	4b3e      	ldr	r3, [pc, #248]	; (1808 <USBC_Handler+0x284>)
    1710:	701a      	strb	r2, [r3, #0]
	return flags;
    1712:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
    1714:	4a3d      	ldr	r2, [pc, #244]	; (180c <USBC_Handler+0x288>)
    1716:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
    1718:	2b00      	cmp	r3, #0
    171a:	d0b6      	beq.n	168a <USBC_Handler+0x106>
		cpu_irq_enable();
    171c:	2201      	movs	r2, #1
    171e:	4b3a      	ldr	r3, [pc, #232]	; (1808 <USBC_Handler+0x284>)
    1720:	701a      	strb	r2, [r3, #0]
    1722:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1726:	b662      	cpsie	i
    1728:	e7af      	b.n	168a <USBC_Handler+0x106>
		udd_ctrl_stall_data();
    172a:	4b2e      	ldr	r3, [pc, #184]	; (17e4 <USBC_Handler+0x260>)
    172c:	4798      	blx	r3
		udd_ack_setup_received(0);
    172e:	2204      	movs	r2, #4
    1730:	4b2d      	ldr	r3, [pc, #180]	; (17e8 <USBC_Handler+0x264>)
    1732:	601a      	str	r2, [r3, #0]
    1734:	e7a9      	b.n	168a <USBC_Handler+0x106>
		udd_ctrl_prev_payload_nb_trans = 0;
    1736:	2300      	movs	r3, #0
    1738:	4a31      	ldr	r2, [pc, #196]	; (1800 <USBC_Handler+0x27c>)
    173a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
    173c:	4a31      	ldr	r2, [pc, #196]	; (1804 <USBC_Handler+0x280>)
    173e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1740:	2202      	movs	r2, #2
    1742:	4b26      	ldr	r3, [pc, #152]	; (17dc <USBC_Handler+0x258>)
    1744:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
    1746:	4b32      	ldr	r3, [pc, #200]	; (1810 <USBC_Handler+0x28c>)
    1748:	4798      	blx	r3
    174a:	e79e      	b.n	168a <USBC_Handler+0x106>
			udd_ctrl_send_zlp_in();
    174c:	4b31      	ldr	r3, [pc, #196]	; (1814 <USBC_Handler+0x290>)
    174e:	4798      	blx	r3
    1750:	e79b      	b.n	168a <USBC_Handler+0x106>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
    1752:	4b22      	ldr	r3, [pc, #136]	; (17dc <USBC_Handler+0x258>)
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b01      	cmp	r3, #1
    1758:	d00b      	beq.n	1772 <USBC_Handler+0x1ee>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
    175a:	2b02      	cmp	r3, #2
    175c:	d004      	beq.n	1768 <USBC_Handler+0x1e4>
    175e:	2b04      	cmp	r3, #4
    1760:	d002      	beq.n	1768 <USBC_Handler+0x1e4>
			udd_ctrl_stall_data();
    1762:	4b20      	ldr	r3, [pc, #128]	; (17e4 <USBC_Handler+0x260>)
    1764:	4798      	blx	r3
    1766:	e001      	b.n	176c <USBC_Handler+0x1e8>
			udd_ctrl_endofrequest();
    1768:	4b20      	ldr	r3, [pc, #128]	; (17ec <USBC_Handler+0x268>)
    176a:	4798      	blx	r3
		udd_ctrl_init();
    176c:	4b20      	ldr	r3, [pc, #128]	; (17f0 <USBC_Handler+0x26c>)
    176e:	4798      	blx	r3
    1770:	e78b      	b.n	168a <USBC_Handler+0x106>
	nb_data = udd_udesc_get_buf0_ctn(0);
    1772:	4b1b      	ldr	r3, [pc, #108]	; (17e0 <USBC_Handler+0x25c>)
    1774:	685d      	ldr	r5, [r3, #4]
    1776:	f3c5 050e 	ubfx	r5, r5, #0, #15
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    177a:	4b1e      	ldr	r3, [pc, #120]	; (17f4 <USBC_Handler+0x270>)
    177c:	899b      	ldrh	r3, [r3, #12]
    177e:	4a21      	ldr	r2, [pc, #132]	; (1804 <USBC_Handler+0x280>)
    1780:	8814      	ldrh	r4, [r2, #0]
    1782:	1962      	adds	r2, r4, r5
    1784:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
    1786:	bfbc      	itt	lt
    1788:	1b1b      	sublt	r3, r3, r4
    178a:	b29d      	uxthlt	r5, r3
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    178c:	4b19      	ldr	r3, [pc, #100]	; (17f4 <USBC_Handler+0x270>)
    178e:	6898      	ldr	r0, [r3, #8]
    1790:	462a      	mov	r2, r5
    1792:	4919      	ldr	r1, [pc, #100]	; (17f8 <USBC_Handler+0x274>)
    1794:	4420      	add	r0, r4
    1796:	4b20      	ldr	r3, [pc, #128]	; (1818 <USBC_Handler+0x294>)
    1798:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    179a:	442c      	add	r4, r5
    179c:	b2a4      	uxth	r4, r4
    179e:	4b19      	ldr	r3, [pc, #100]	; (1804 <USBC_Handler+0x280>)
    17a0:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    17a2:	2d08      	cmp	r5, #8
    17a4:	d03a      	beq.n	181c <USBC_Handler+0x298>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    17a6:	4b13      	ldr	r3, [pc, #76]	; (17f4 <USBC_Handler+0x270>)
    17a8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    17aa:	695b      	ldr	r3, [r3, #20]
    17ac:	b113      	cbz	r3, 17b4 <USBC_Handler+0x230>
			if (!udd_g_ctrlreq.over_under_run()) {
    17ae:	4798      	blx	r3
    17b0:	2800      	cmp	r0, #0
    17b2:	d05c      	beq.n	186e <USBC_Handler+0x2ea>
		udd_ack_out_received(0);
    17b4:	2202      	movs	r2, #2
    17b6:	4b0c      	ldr	r3, [pc, #48]	; (17e8 <USBC_Handler+0x264>)
    17b8:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
    17ba:	4b16      	ldr	r3, [pc, #88]	; (1814 <USBC_Handler+0x290>)
    17bc:	4798      	blx	r3
    17be:	e764      	b.n	168a <USBC_Handler+0x106>
    17c0:	400a5000 	.word	0x400a5000
    17c4:	400a5220 	.word	0x400a5220
    17c8:	400a5130 	.word	0x400a5130
    17cc:	400a51c0 	.word	0x400a51c0
    17d0:	00000a05 	.word	0x00000a05
    17d4:	00000571 	.word	0x00000571
    17d8:	000030dd 	.word	0x000030dd
    17dc:	20000b4e 	.word	0x20000b4e
    17e0:	20000b80 	.word	0x20000b80
    17e4:	00000ad1 	.word	0x00000ad1
    17e8:	400a5160 	.word	0x400a5160
    17ec:	00000b4d 	.word	0x00000b4d
    17f0:	00000aa9 	.word	0x00000aa9
    17f4:	20000d7c 	.word	0x20000d7c
    17f8:	20000d94 	.word	0x20000d94
    17fc:	000005b1 	.word	0x000005b1
    1800:	20000b4c 	.word	0x20000b4c
    1804:	20000b4a 	.word	0x20000b4a
    1808:	20000104 	.word	0x20000104
    180c:	400a51f0 	.word	0x400a51f0
    1810:	00000b5d 	.word	0x00000b5d
    1814:	00000ae9 	.word	0x00000ae9
    1818:	000031a9 	.word	0x000031a9
			(udd_g_ctrlreq.req.wLength <=
    181c:	4b73      	ldr	r3, [pc, #460]	; (19ec <USBC_Handler+0x468>)
    181e:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans)))
    1820:	4b73      	ldr	r3, [pc, #460]	; (19f0 <USBC_Handler+0x46c>)
    1822:	881b      	ldrh	r3, [r3, #0]
    1824:	4423      	add	r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    1826:	429a      	cmp	r2, r3
    1828:	ddbd      	ble.n	17a6 <USBC_Handler+0x222>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    182a:	4b70      	ldr	r3, [pc, #448]	; (19ec <USBC_Handler+0x468>)
    182c:	899b      	ldrh	r3, [r3, #12]
    182e:	42a3      	cmp	r3, r4
    1830:	d023      	beq.n	187a <USBC_Handler+0x2f6>
	udd_ack_out_received(0);
    1832:	4b70      	ldr	r3, [pc, #448]	; (19f4 <USBC_Handler+0x470>)
    1834:	2202      	movs	r2, #2
    1836:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
    1838:	2210      	movs	r2, #16
    183a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    183c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1840:	fab3 f383 	clz	r3, r3
    1844:	095b      	lsrs	r3, r3, #5
    1846:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1848:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    184a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    184e:	2100      	movs	r1, #0
    1850:	4b69      	ldr	r3, [pc, #420]	; (19f8 <USBC_Handler+0x474>)
    1852:	7019      	strb	r1, [r3, #0]
	return flags;
    1854:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
    1856:	4969      	ldr	r1, [pc, #420]	; (19fc <USBC_Handler+0x478>)
    1858:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
    185a:	2b00      	cmp	r3, #0
    185c:	f43f af15 	beq.w	168a <USBC_Handler+0x106>
		cpu_irq_enable();
    1860:	2201      	movs	r2, #1
    1862:	4b65      	ldr	r3, [pc, #404]	; (19f8 <USBC_Handler+0x474>)
    1864:	701a      	strb	r2, [r3, #0]
    1866:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    186a:	b662      	cpsie	i
    186c:	e70d      	b.n	168a <USBC_Handler+0x106>
				udd_ctrl_stall_data();
    186e:	4b64      	ldr	r3, [pc, #400]	; (1a00 <USBC_Handler+0x47c>)
    1870:	4798      	blx	r3
				udd_ack_out_received(0);
    1872:	2202      	movs	r2, #2
    1874:	4b5f      	ldr	r3, [pc, #380]	; (19f4 <USBC_Handler+0x470>)
    1876:	601a      	str	r2, [r3, #0]
    1878:	e707      	b.n	168a <USBC_Handler+0x106>
		if (!udd_g_ctrlreq.over_under_run) {
    187a:	4b5c      	ldr	r3, [pc, #368]	; (19ec <USBC_Handler+0x468>)
    187c:	695b      	ldr	r3, [r3, #20]
    187e:	b153      	cbz	r3, 1896 <USBC_Handler+0x312>
		if (!udd_g_ctrlreq.over_under_run()) {
    1880:	4798      	blx	r3
    1882:	b170      	cbz	r0, 18a2 <USBC_Handler+0x31e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1884:	495a      	ldr	r1, [pc, #360]	; (19f0 <USBC_Handler+0x46c>)
    1886:	4a5f      	ldr	r2, [pc, #380]	; (1a04 <USBC_Handler+0x480>)
    1888:	880b      	ldrh	r3, [r1, #0]
    188a:	8810      	ldrh	r0, [r2, #0]
    188c:	4403      	add	r3, r0
    188e:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1890:	2300      	movs	r3, #0
    1892:	8013      	strh	r3, [r2, #0]
    1894:	e7cd      	b.n	1832 <USBC_Handler+0x2ae>
			udd_ctrl_stall_data();
    1896:	4b5a      	ldr	r3, [pc, #360]	; (1a00 <USBC_Handler+0x47c>)
    1898:	4798      	blx	r3
			udd_ack_out_received(0);
    189a:	2202      	movs	r2, #2
    189c:	4b55      	ldr	r3, [pc, #340]	; (19f4 <USBC_Handler+0x470>)
    189e:	601a      	str	r2, [r3, #0]
    18a0:	e6f3      	b.n	168a <USBC_Handler+0x106>
			udd_ctrl_stall_data();
    18a2:	4b57      	ldr	r3, [pc, #348]	; (1a00 <USBC_Handler+0x47c>)
    18a4:	4798      	blx	r3
			udd_ack_out_received(0);
    18a6:	2202      	movs	r2, #2
    18a8:	4b52      	ldr	r3, [pc, #328]	; (19f4 <USBC_Handler+0x470>)
    18aa:	601a      	str	r2, [r3, #0]
    18ac:	e6ed      	b.n	168a <USBC_Handler+0x106>
		udd_ctrl_in_sent();
    18ae:	4b56      	ldr	r3, [pc, #344]	; (1a08 <USBC_Handler+0x484>)
    18b0:	4798      	blx	r3
    18b2:	e6ea      	b.n	168a <USBC_Handler+0x106>
		udd_ack_nak_out(0);
    18b4:	2208      	movs	r2, #8
    18b6:	4b4f      	ldr	r3, [pc, #316]	; (19f4 <USBC_Handler+0x470>)
    18b8:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0)) {
    18ba:	3b30      	subs	r3, #48	; 0x30
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	f013 0f01 	tst.w	r3, #1
    18c2:	f47f aee2 	bne.w	168a <USBC_Handler+0x106>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    18c6:	4b51      	ldr	r3, [pc, #324]	; (1a0c <USBC_Handler+0x488>)
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	2b03      	cmp	r3, #3
    18cc:	f47f aedd 	bne.w	168a <USBC_Handler+0x106>
		udd_enable_stall_handshake(0);
    18d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    18d4:	4b49      	ldr	r3, [pc, #292]	; (19fc <USBC_Handler+0x478>)
    18d6:	601a      	str	r2, [r3, #0]
    18d8:	e6d7      	b.n	168a <USBC_Handler+0x106>
		udd_ack_nak_in(0);
    18da:	2210      	movs	r2, #16
    18dc:	4b45      	ldr	r3, [pc, #276]	; (19f4 <USBC_Handler+0x470>)
    18de:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
    18e0:	3b30      	subs	r3, #48	; 0x30
    18e2:	681b      	ldr	r3, [r3, #0]
    18e4:	f013 0f02 	tst.w	r3, #2
    18e8:	f47f aecf 	bne.w	168a <USBC_Handler+0x106>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    18ec:	4b47      	ldr	r3, [pc, #284]	; (1a0c <USBC_Handler+0x488>)
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	2b01      	cmp	r3, #1
    18f2:	d007      	beq.n	1904 <USBC_Handler+0x380>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    18f4:	2b04      	cmp	r3, #4
    18f6:	f47f aec8 	bne.w	168a <USBC_Handler+0x106>
		udd_enable_stall_handshake(0);
    18fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    18fe:	4b3f      	ldr	r3, [pc, #252]	; (19fc <USBC_Handler+0x478>)
    1900:	601a      	str	r2, [r3, #0]
    1902:	e6c2      	b.n	168a <USBC_Handler+0x106>
		udd_ctrl_send_zlp_in();
    1904:	4b42      	ldr	r3, [pc, #264]	; (1a10 <USBC_Handler+0x48c>)
    1906:	4798      	blx	r3
    1908:	e6bf      	b.n	168a <USBC_Handler+0x106>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
    190a:	2002      	movs	r0, #2
    190c:	e000      	b.n	1910 <USBC_Handler+0x38c>
				|| !Is_udd_endpoint_interrupt(ep)) {
    190e:	2001      	movs	r0, #1
			continue;
		}
		ep_addr = Is_udd_endpoint_in(ep) ? (ep | USB_EP_DIR_IN) : ep;
    1910:	4b40      	ldr	r3, [pc, #256]	; (1a14 <USBC_Handler+0x490>)
    1912:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1916:	f413 7f80 	tst.w	r3, #256	; 0x100
    191a:	bf18      	it	ne
    191c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
		dbg_print("%x: ", ep_addr);
		udd_ep_trans_done(ep_addr);
    1920:	4b3d      	ldr	r3, [pc, #244]	; (1a18 <USBC_Handler+0x494>)
    1922:	4798      	blx	r3
    1924:	e6b1      	b.n	168a <USBC_Handler+0x106>
		udd_ack_reset();
    1926:	4c3d      	ldr	r4, [pc, #244]	; (1a1c <USBC_Handler+0x498>)
    1928:	2308      	movs	r3, #8
    192a:	60a3      	str	r3, [r4, #8]
				udd_ep_abort(i);
    192c:	2001      	movs	r0, #1
    192e:	4d3c      	ldr	r5, [pc, #240]	; (1a20 <USBC_Handler+0x49c>)
    1930:	47a8      	blx	r5
    1932:	2002      	movs	r0, #2
    1934:	47a8      	blx	r5
		udc_reset();
    1936:	4b3b      	ldr	r3, [pc, #236]	; (1a24 <USBC_Handler+0x4a0>)
    1938:	4798      	blx	r3
		udd_disable_endpoints();
    193a:	69e3      	ldr	r3, [r4, #28]
    193c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1940:	61e3      	str	r3, [r4, #28]
	udd_configure_address(0);
    1942:	6823      	ldr	r3, [r4, #0]
    1944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1948:	6023      	str	r3, [r4, #0]
	udd_enable_address();
    194a:	6823      	ldr	r3, [r4, #0]
    194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1950:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
    1952:	4a30      	ldr	r2, [pc, #192]	; (1a14 <USBC_Handler+0x490>)
    1954:	6813      	ldr	r3, [r2, #0]
    1956:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
    195a:	f023 0314 	bic.w	r3, r3, #20
    195e:	6013      	str	r3, [r2, #0]
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
    1960:	4b31      	ldr	r3, [pc, #196]	; (1a28 <USBC_Handler+0x4a4>)
    1962:	4a32      	ldr	r2, [pc, #200]	; (1a2c <USBC_Handler+0x4a8>)
    1964:	601a      	str	r2, [r3, #0]
	udd_udesc_rst_buf0_size(0);
    1966:	685a      	ldr	r2, [r3, #4]
    1968:	f36f 421e 	bfc	r2, #16, #15
    196c:	605a      	str	r2, [r3, #4]
	udd_enable_endpoint(0);
    196e:	69e3      	ldr	r3, [r4, #28]
    1970:	f043 0301 	orr.w	r3, r3, #1
    1974:	61e3      	str	r3, [r4, #28]
	udd_disable_busy_bank0(0);
    1976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    197a:	4b2d      	ldr	r3, [pc, #180]	; (1a30 <USBC_Handler+0x4ac>)
    197c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    197e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1982:	fab3 f383 	clz	r3, r3
    1986:	095b      	lsrs	r3, r3, #5
    1988:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    198a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    198c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1990:	2200      	movs	r2, #0
    1992:	4b19      	ldr	r3, [pc, #100]	; (19f8 <USBC_Handler+0x474>)
    1994:	701a      	strb	r2, [r3, #0]
	return flags;
    1996:	9a03      	ldr	r2, [sp, #12]
	udd_enable_setup_received_interrupt(0);
    1998:	4b18      	ldr	r3, [pc, #96]	; (19fc <USBC_Handler+0x478>)
    199a:	2104      	movs	r1, #4
    199c:	6019      	str	r1, [r3, #0]
	udd_enable_out_received_interrupt(0);
    199e:	2102      	movs	r1, #2
    19a0:	6019      	str	r1, [r3, #0]
	udd_enable_endpoint_interrupt(0);
    19a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    19a6:	61a3      	str	r3, [r4, #24]
	if (cpu_irq_is_enabled_flags(flags))
    19a8:	b12a      	cbz	r2, 19b6 <USBC_Handler+0x432>
		cpu_irq_enable();
    19aa:	2201      	movs	r2, #1
    19ac:	4b12      	ldr	r3, [pc, #72]	; (19f8 <USBC_Handler+0x474>)
    19ae:	701a      	strb	r2, [r3, #0]
    19b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    19b4:	b662      	cpsie	i
		udd_ctrl_init();
    19b6:	4b1f      	ldr	r3, [pc, #124]	; (1a34 <USBC_Handler+0x4b0>)
    19b8:	4798      	blx	r3
		goto udd_interrupt_end;
    19ba:	e666      	b.n	168a <USBC_Handler+0x106>
		udd_ack_suspend();
    19bc:	4b17      	ldr	r3, [pc, #92]	; (1a1c <USBC_Handler+0x498>)
    19be:	2101      	movs	r1, #1
    19c0:	6099      	str	r1, [r3, #8]
		otg_unfreeze_clock();
    19c2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    19c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    19ca:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
    19ce:	6159      	str	r1, [r3, #20]
		udd_ack_wake_up();
    19d0:	2210      	movs	r2, #16
    19d2:	609a      	str	r2, [r3, #8]
		udd_enable_wake_up_interrupt();
    19d4:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
    19d6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    19da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    19de:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
    19e2:	2000      	movs	r0, #0
    19e4:	4b14      	ldr	r3, [pc, #80]	; (1a38 <USBC_Handler+0x4b4>)
    19e6:	4798      	blx	r3
		goto udd_interrupt_end;
    19e8:	e64f      	b.n	168a <USBC_Handler+0x106>
    19ea:	bf00      	nop
    19ec:	20000d7c 	.word	0x20000d7c
    19f0:	20000b4c 	.word	0x20000b4c
    19f4:	400a5160 	.word	0x400a5160
    19f8:	20000104 	.word	0x20000104
    19fc:	400a51f0 	.word	0x400a51f0
    1a00:	00000ad1 	.word	0x00000ad1
    1a04:	20000b4a 	.word	0x20000b4a
    1a08:	00000b5d 	.word	0x00000b5d
    1a0c:	20000b4e 	.word	0x20000b4e
    1a10:	00000ae9 	.word	0x00000ae9
    1a14:	400a5100 	.word	0x400a5100
    1a18:	00000ce1 	.word	0x00000ce1
    1a1c:	400a5000 	.word	0x400a5000
    1a20:	000014dd 	.word	0x000014dd
    1a24:	00000529 	.word	0x00000529
    1a28:	20000b80 	.word	0x20000b80
    1a2c:	20000d94 	.word	0x20000d94
    1a30:	400a5220 	.word	0x400a5220
    1a34:	00000aa9 	.word	0x00000aa9
    1a38:	00000a05 	.word	0x00000a05

00001a3c <udd_ep_free>:
{
    1a3c:	b510      	push	{r4, lr}
    1a3e:	4604      	mov	r4, r0
	udd_ep_abort(ep);
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <udd_ep_free+0x1c>)
    1a42:	4798      	blx	r3
	udd_disable_endpoint(ep & 0x7F);
    1a44:	4a05      	ldr	r2, [pc, #20]	; (1a5c <udd_ep_free+0x20>)
    1a46:	69d0      	ldr	r0, [r2, #28]
    1a48:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1a4c:	2301      	movs	r3, #1
    1a4e:	40a3      	lsls	r3, r4
    1a50:	ea20 0003 	bic.w	r0, r0, r3
    1a54:	61d0      	str	r0, [r2, #28]
    1a56:	bd10      	pop	{r4, pc}
    1a58:	000014dd 	.word	0x000014dd
    1a5c:	400a5000 	.word	0x400a5000

00001a60 <udd_ep_set_halt>:
{
    1a60:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
    1a62:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
    1a66:	2b02      	cmp	r3, #2
    1a68:	d901      	bls.n	1a6e <udd_ep_set_halt+0xe>
		return false;
    1a6a:	2000      	movs	r0, #0
}
    1a6c:	bd08      	pop	{r3, pc}
	udd_enable_stall_handshake(ep_index);
    1a6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1a72:	4a03      	ldr	r2, [pc, #12]	; (1a80 <udd_ep_set_halt+0x20>)
    1a74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ep_abort(ep);
    1a78:	4b02      	ldr	r3, [pc, #8]	; (1a84 <udd_ep_set_halt+0x24>)
    1a7a:	4798      	blx	r3
	return true;
    1a7c:	2001      	movs	r0, #1
    1a7e:	bd08      	pop	{r3, pc}
    1a80:	400a51f0 	.word	0x400a51f0
    1a84:	000014dd 	.word	0x000014dd

00001a88 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1a88:	b538      	push	{r3, r4, r5, lr}
    1a8a:	4614      	mov	r4, r2
	if (Udd_setup_is_in()) {
    1a8c:	4a37      	ldr	r2, [pc, #220]	; (1b6c <udi_hid_setup+0xe4>)
    1a8e:	7812      	ldrb	r2, [r2, #0]
    1a90:	f012 0f80 	tst.w	r2, #128	; 0x80
    1a94:	d105      	bne.n	1aa2 <udi_hid_setup+0x1a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a96:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1a9a:	2a20      	cmp	r2, #32
    1a9c:	d049      	beq.n	1b32 <udi_hid_setup+0xaa>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1a9e:	2000      	movs	r0, #0
    1aa0:	bd38      	pop	{r3, r4, r5, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1aa2:	f012 0260 	ands.w	r2, r2, #96	; 0x60
    1aa6:	d103      	bne.n	1ab0 <udi_hid_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
    1aa8:	4d30      	ldr	r5, [pc, #192]	; (1b6c <udi_hid_setup+0xe4>)
    1aaa:	786d      	ldrb	r5, [r5, #1]
    1aac:	2d06      	cmp	r5, #6
    1aae:	d003      	beq.n	1ab8 <udi_hid_setup+0x30>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1ab0:	2a20      	cmp	r2, #32
    1ab2:	d028      	beq.n	1b06 <udi_hid_setup+0x7e>
	return false;	// Request not supported
    1ab4:	2000      	movs	r0, #0
    1ab6:	bd38      	pop	{r3, r4, r5, pc}
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1ab8:	4b2d      	ldr	r3, [pc, #180]	; (1b70 <udi_hid_setup+0xe8>)
    1aba:	4798      	blx	r3
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1abc:	7a83      	ldrb	r3, [r0, #10]
    1abe:	2b21      	cmp	r3, #33	; 0x21
    1ac0:	d001      	beq.n	1ac6 <udi_hid_setup+0x3e>
		return false;
    1ac2:	2000      	movs	r0, #0
    1ac4:	bd38      	pop	{r3, r4, r5, pc}

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1ac6:	4b29      	ldr	r3, [pc, #164]	; (1b6c <udi_hid_setup+0xe4>)
    1ac8:	885b      	ldrh	r3, [r3, #2]
    1aca:	0a1b      	lsrs	r3, r3, #8
    1acc:	2b21      	cmp	r3, #33	; 0x21
    1ace:	d004      	beq.n	1ada <udi_hid_setup+0x52>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1ad0:	7bc2      	ldrb	r2, [r0, #15]
    1ad2:	429a      	cmp	r2, r3
    1ad4:	d00d      	beq.n	1af2 <udi_hid_setup+0x6a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1ad6:	2000      	movs	r0, #0
    1ad8:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1ada:	4b24      	ldr	r3, [pc, #144]	; (1b6c <udi_hid_setup+0xe4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1adc:	f100 0209 	add.w	r2, r0, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1ae0:	609a      	str	r2, [r3, #8]
				min(udd_g_ctrlreq.req.wLength,
    1ae2:	7a42      	ldrb	r2, [r0, #9]
    1ae4:	88d9      	ldrh	r1, [r3, #6]
    1ae6:	428a      	cmp	r2, r1
    1ae8:	bf28      	it	cs
    1aea:	460a      	movcs	r2, r1
		udd_g_ctrlreq.payload_size =
    1aec:	819a      	strh	r2, [r3, #12]
		return true;
    1aee:	2001      	movs	r0, #1
    1af0:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = report_desc;
    1af2:	4b1e      	ldr	r3, [pc, #120]	; (1b6c <udi_hid_setup+0xe4>)
    1af4:	609c      	str	r4, [r3, #8]
		udd_g_ctrlreq.payload_size =
    1af6:	8a02      	ldrh	r2, [r0, #16]
    1af8:	88d9      	ldrh	r1, [r3, #6]
    1afa:	428a      	cmp	r2, r1
    1afc:	bf28      	it	cs
    1afe:	460a      	movcs	r2, r1
    1b00:	819a      	strh	r2, [r3, #12]
		return true;
    1b02:	2001      	movs	r0, #1
    1b04:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    1b06:	4a19      	ldr	r2, [pc, #100]	; (1b6c <udi_hid_setup+0xe4>)
    1b08:	7852      	ldrb	r2, [r2, #1]
    1b0a:	2a02      	cmp	r2, #2
    1b0c:	d007      	beq.n	1b1e <udi_hid_setup+0x96>
    1b0e:	2a03      	cmp	r2, #3
    1b10:	d00a      	beq.n	1b28 <udi_hid_setup+0xa0>
    1b12:	2a01      	cmp	r2, #1
    1b14:	d001      	beq.n	1b1a <udi_hid_setup+0x92>
	return false;	// Request not supported
    1b16:	2000      	movs	r0, #0
    1b18:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
    1b1a:	4798      	blx	r3
    1b1c:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = rate;
    1b1e:	4b13      	ldr	r3, [pc, #76]	; (1b6c <udi_hid_setup+0xe4>)
    1b20:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1b22:	2001      	movs	r0, #1
    1b24:	8198      	strh	r0, [r3, #12]
				return true;
    1b26:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = protocol;
    1b28:	4b10      	ldr	r3, [pc, #64]	; (1b6c <udi_hid_setup+0xe4>)
    1b2a:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1b2c:	2001      	movs	r0, #1
    1b2e:	8198      	strh	r0, [r3, #12]
				return true;
    1b30:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    1b32:	4a0e      	ldr	r2, [pc, #56]	; (1b6c <udi_hid_setup+0xe4>)
    1b34:	7852      	ldrb	r2, [r2, #1]
    1b36:	2a0a      	cmp	r2, #10
    1b38:	d007      	beq.n	1b4a <udi_hid_setup+0xc2>
    1b3a:	2a0b      	cmp	r2, #11
    1b3c:	d00b      	beq.n	1b56 <udi_hid_setup+0xce>
    1b3e:	2a09      	cmp	r2, #9
    1b40:	d001      	beq.n	1b46 <udi_hid_setup+0xbe>
	return false;	// Request not supported
    1b42:	2000      	movs	r0, #0
    1b44:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
    1b46:	4798      	blx	r3
    1b48:	bd38      	pop	{r3, r4, r5, pc}
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1b4a:	4b08      	ldr	r3, [pc, #32]	; (1b6c <udi_hid_setup+0xe4>)
    1b4c:	885b      	ldrh	r3, [r3, #2]
    1b4e:	0a1b      	lsrs	r3, r3, #8
    1b50:	7003      	strb	r3, [r0, #0]
				return true;
    1b52:	2001      	movs	r0, #1
    1b54:	bd38      	pop	{r3, r4, r5, pc}
				if (0 != udd_g_ctrlreq.req.wLength)
    1b56:	4b05      	ldr	r3, [pc, #20]	; (1b6c <udi_hid_setup+0xe4>)
    1b58:	88db      	ldrh	r3, [r3, #6]
    1b5a:	b923      	cbnz	r3, 1b66 <udi_hid_setup+0xde>
				*protocol = udd_g_ctrlreq.req.wValue;
    1b5c:	4b03      	ldr	r3, [pc, #12]	; (1b6c <udi_hid_setup+0xe4>)
    1b5e:	885b      	ldrh	r3, [r3, #2]
    1b60:	700b      	strb	r3, [r1, #0]
				return true;
    1b62:	2001      	movs	r0, #1
    1b64:	bd38      	pop	{r3, r4, r5, pc}
					return false;
    1b66:	2000      	movs	r0, #0
}
    1b68:	bd38      	pop	{r3, r4, r5, pc}
    1b6a:	bf00      	nop
    1b6c:	20000d7c 	.word	0x20000d7c
    1b70:	00000511 	.word	0x00000511

00001b74 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    1b74:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b76:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b7a:	fab3 f383 	clz	r3, r3
    1b7e:	095b      	lsrs	r3, r3, #5
    1b80:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b82:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1b84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b88:	2200      	movs	r2, #0
    1b8a:	4b08      	ldr	r3, [pc, #32]	; (1bac <osc_priv_enable_osc0+0x38>)
    1b8c:	701a      	strb	r2, [r3, #0]
	return flags;
    1b8e:	9a01      	ldr	r2, [sp, #4]
	irqflags_t flags;

	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    1b90:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <osc_priv_enable_osc0+0x3c>)
    1b92:	4908      	ldr	r1, [pc, #32]	; (1bb4 <osc_priv_enable_osc0+0x40>)
    1b94:	6199      	str	r1, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    1b96:	4908      	ldr	r1, [pc, #32]	; (1bb8 <osc_priv_enable_osc0+0x44>)
    1b98:	6219      	str	r1, [r3, #32]
	if (cpu_irq_is_enabled_flags(flags))
    1b9a:	b12a      	cbz	r2, 1ba8 <osc_priv_enable_osc0+0x34>
		cpu_irq_enable();
    1b9c:	2201      	movs	r2, #1
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <osc_priv_enable_osc0+0x38>)
    1ba0:	701a      	strb	r2, [r3, #0]
    1ba2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ba6:	b662      	cpsie	i
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
}
    1ba8:	b002      	add	sp, #8
    1baa:	4770      	bx	lr
    1bac:	20000104 	.word	0x20000104
    1bb0:	400e0800 	.word	0x400e0800
    1bb4:	aa000020 	.word	0xaa000020
    1bb8:	00010011 	.word	0x00010011

00001bbc <pll_enable>:
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, uint32_t pll_id)
{
    1bbc:	b410      	push	{r4}
    1bbe:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1bc0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1bc4:	fab3 f383 	clz	r3, r3
    1bc8:	095b      	lsrs	r3, r3, #5
    1bca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1bcc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1bce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1bd2:	2200      	movs	r2, #0
    1bd4:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <pll_enable+0x54>)
    1bd6:	701a      	strb	r2, [r3, #0]
	return flags;
    1bd8:	9c01      	ldr	r4, [sp, #4]
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	SCIF_UNLOCK_PLL_REG(pll_id);
    1bda:	f101 0309 	add.w	r3, r1, #9
    1bde:	009b      	lsls	r3, r3, #2
    1be0:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    1be4:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    1be8:	4a0a      	ldr	r2, [pc, #40]	; (1c14 <pll_enable+0x58>)
    1bea:	6193      	str	r3, [r2, #24]
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl | SCIF_PLL_PLLEN;
    1bec:	6803      	ldr	r3, [r0, #0]
    1bee:	f043 0301 	orr.w	r3, r3, #1
    1bf2:	3108      	adds	r1, #8
    1bf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1bf8:	6053      	str	r3, [r2, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1bfa:	b12c      	cbz	r4, 1c08 <pll_enable+0x4c>
		cpu_irq_enable();
    1bfc:	2201      	movs	r2, #1
    1bfe:	4b04      	ldr	r3, [pc, #16]	; (1c10 <pll_enable+0x54>)
    1c00:	701a      	strb	r2, [r3, #0]
    1c02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c06:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    1c08:	b003      	add	sp, #12
    1c0a:	bc10      	pop	{r4}
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop
    1c10:	20000104 	.word	0x20000104
    1c14:	400e0800 	.word	0x400e0800

00001c18 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1c18:	b470      	push	{r4, r5, r6}
    1c1a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c1c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1c20:	fab3 f383 	clz	r3, r3
    1c24:	095b      	lsrs	r3, r3, #5
    1c26:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c28:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1c2a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c2e:	2200      	movs	r2, #0
    1c30:	4b0e      	ldr	r3, [pc, #56]	; (1c6c <sysclk_priv_enable_module+0x54>)
    1c32:	701a      	strb	r2, [r3, #0]
	return flags;
    1c34:	9d01      	ldr	r5, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1c36:	0083      	lsls	r3, r0, #2
    1c38:	4c0d      	ldr	r4, [pc, #52]	; (1c70 <sysclk_priv_enable_module+0x58>)
    1c3a:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
	mask |= 1U << module_index;
    1c3e:	2201      	movs	r2, #1
    1c40:	fa02 f101 	lsl.w	r1, r2, r1
    1c44:	4331      	orrs	r1, r6
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1c46:	3320      	adds	r3, #32
    1c48:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1c4c:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    1c50:	4a08      	ldr	r2, [pc, #32]	; (1c74 <sysclk_priv_enable_module+0x5c>)
    1c52:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1c54:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
    1c58:	b12d      	cbz	r5, 1c66 <sysclk_priv_enable_module+0x4e>
		cpu_irq_enable();
    1c5a:	2201      	movs	r2, #1
    1c5c:	4b03      	ldr	r3, [pc, #12]	; (1c6c <sysclk_priv_enable_module+0x54>)
    1c5e:	701a      	strb	r2, [r3, #0]
    1c60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c64:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1c66:	b003      	add	sp, #12
    1c68:	bc70      	pop	{r4, r5, r6}
    1c6a:	4770      	bx	lr
    1c6c:	20000104 	.word	0x20000104
    1c70:	400e0020 	.word	0x400e0020
    1c74:	400e0000 	.word	0x400e0000

00001c78 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1c78:	b530      	push	{r4, r5, lr}
    1c7a:	b083      	sub	sp, #12
    1c7c:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c7e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1c82:	fab3 f383 	clz	r3, r3
    1c86:	095b      	lsrs	r3, r3, #5
    1c88:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c8a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1c8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1c90:	2200      	movs	r2, #0
    1c92:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <sysclk_enable_pba_module+0x4c>)
    1c94:	701a      	strb	r2, [r3, #0]
	return flags;
    1c96:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1c98:	4b0b      	ldr	r3, [pc, #44]	; (1cc8 <sysclk_enable_pba_module+0x50>)
    1c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c9c:	b163      	cbz	r3, 1cb8 <sysclk_enable_pba_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
    1c9e:	b12d      	cbz	r5, 1cac <sysclk_enable_pba_module+0x34>
		cpu_irq_enable();
    1ca0:	2201      	movs	r2, #1
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <sysclk_enable_pba_module+0x4c>)
    1ca4:	701a      	strb	r2, [r3, #0]
    1ca6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1caa:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1cac:	4621      	mov	r1, r4
    1cae:	2002      	movs	r0, #2
    1cb0:	4b06      	ldr	r3, [pc, #24]	; (1ccc <sysclk_enable_pba_module+0x54>)
    1cb2:	4798      	blx	r3
}
    1cb4:	b003      	add	sp, #12
    1cb6:	bd30      	pop	{r4, r5, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1cb8:	2105      	movs	r1, #5
    1cba:	2001      	movs	r0, #1
    1cbc:	4b03      	ldr	r3, [pc, #12]	; (1ccc <sysclk_enable_pba_module+0x54>)
    1cbe:	4798      	blx	r3
    1cc0:	e7ed      	b.n	1c9e <sysclk_enable_pba_module+0x26>
    1cc2:	bf00      	nop
    1cc4:	20000104 	.word	0x20000104
    1cc8:	400e0000 	.word	0x400e0000
    1ccc:	00001c19 	.word	0x00001c19

00001cd0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1cd0:	b530      	push	{r4, r5, lr}
    1cd2:	b083      	sub	sp, #12
    1cd4:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1cd6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1cda:	fab3 f383 	clz	r3, r3
    1cde:	095b      	lsrs	r3, r3, #5
    1ce0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1ce2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1ce4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ce8:	2200      	movs	r2, #0
    1cea:	4b0c      	ldr	r3, [pc, #48]	; (1d1c <sysclk_enable_pbb_module+0x4c>)
    1cec:	701a      	strb	r2, [r3, #0]
	return flags;
    1cee:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1cf0:	4b0b      	ldr	r3, [pc, #44]	; (1d20 <sysclk_enable_pbb_module+0x50>)
    1cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cf4:	b163      	cbz	r3, 1d10 <sysclk_enable_pbb_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
    1cf6:	b12d      	cbz	r5, 1d04 <sysclk_enable_pbb_module+0x34>
		cpu_irq_enable();
    1cf8:	2201      	movs	r2, #1
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <sysclk_enable_pbb_module+0x4c>)
    1cfc:	701a      	strb	r2, [r3, #0]
    1cfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d02:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1d04:	4621      	mov	r1, r4
    1d06:	2003      	movs	r0, #3
    1d08:	4b06      	ldr	r3, [pc, #24]	; (1d24 <sysclk_enable_pbb_module+0x54>)
    1d0a:	4798      	blx	r3
}
    1d0c:	b003      	add	sp, #12
    1d0e:	bd30      	pop	{r4, r5, pc}
    1d10:	2106      	movs	r1, #6
    1d12:	2001      	movs	r0, #1
    1d14:	4b03      	ldr	r3, [pc, #12]	; (1d24 <sysclk_enable_pbb_module+0x54>)
    1d16:	4798      	blx	r3
    1d18:	e7ed      	b.n	1cf6 <sysclk_enable_pbb_module+0x26>
    1d1a:	bf00      	nop
    1d1c:	20000104 	.word	0x20000104
    1d20:	400e0000 	.word	0x400e0000
    1d24:	00001c19 	.word	0x00001c19

00001d28 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1d28:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1d2a:	4ba8      	ldr	r3, [pc, #672]	; (1fcc <sysclk_enable_peripheral_clock+0x2a4>)
    1d2c:	4298      	cmp	r0, r3
    1d2e:	f000 8190 	beq.w	2052 <sysclk_enable_peripheral_clock+0x32a>
    1d32:	d920      	bls.n	1d76 <sysclk_enable_peripheral_clock+0x4e>
    1d34:	4ba6      	ldr	r3, [pc, #664]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1d36:	4298      	cmp	r0, r3
    1d38:	f000 81af 	beq.w	209a <sysclk_enable_peripheral_clock+0x372>
    1d3c:	f240 80ae 	bls.w	1e9c <sysclk_enable_peripheral_clock+0x174>
    1d40:	4ba4      	ldr	r3, [pc, #656]	; (1fd4 <sysclk_enable_peripheral_clock+0x2ac>)
    1d42:	4298      	cmp	r0, r3
    1d44:	f000 81b8 	beq.w	20b8 <sysclk_enable_peripheral_clock+0x390>
    1d48:	f240 80ed 	bls.w	1f26 <sysclk_enable_peripheral_clock+0x1fe>
    1d4c:	4ba2      	ldr	r3, [pc, #648]	; (1fd8 <sysclk_enable_peripheral_clock+0x2b0>)
    1d4e:	4298      	cmp	r0, r3
    1d50:	f000 81bc 	beq.w	20cc <sysclk_enable_peripheral_clock+0x3a4>
    1d54:	f200 8106 	bhi.w	1f64 <sysclk_enable_peripheral_clock+0x23c>
    1d58:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    1d5c:	4298      	cmp	r0, r3
    1d5e:	f000 81b0 	beq.w	20c2 <sysclk_enable_peripheral_clock+0x39a>
    1d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1d66:	4298      	cmp	r0, r3
    1d68:	f040 80fb 	bne.w	1f62 <sysclk_enable_peripheral_clock+0x23a>
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    1d6c:	2102      	movs	r1, #2
    1d6e:	2005      	movs	r0, #5
    1d70:	4b9a      	ldr	r3, [pc, #616]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1d72:	4798      	blx	r3
    1d74:	bd08      	pop	{r3, pc}
    1d76:	f5a3 2390 	sub.w	r3, r3, #294912	; 0x48000
    1d7a:	4298      	cmp	r0, r3
    1d7c:	f000 811b 	beq.w	1fb6 <sysclk_enable_peripheral_clock+0x28e>
    1d80:	d849      	bhi.n	1e16 <sysclk_enable_peripheral_clock+0xee>
    1d82:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1d86:	4298      	cmp	r0, r3
    1d88:	f000 8109 	beq.w	1f9e <sysclk_enable_peripheral_clock+0x276>
    1d8c:	d821      	bhi.n	1dd2 <sysclk_enable_peripheral_clock+0xaa>
    1d8e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1d92:	4298      	cmp	r0, r3
    1d94:	f000 80f4 	beq.w	1f80 <sysclk_enable_peripheral_clock+0x258>
    1d98:	d912      	bls.n	1dc0 <sysclk_enable_peripheral_clock+0x98>
    1d9a:	4b91      	ldr	r3, [pc, #580]	; (1fe0 <sysclk_enable_peripheral_clock+0x2b8>)
    1d9c:	4298      	cmp	r0, r3
    1d9e:	f000 80f3 	beq.w	1f88 <sysclk_enable_peripheral_clock+0x260>
    1da2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1da6:	4298      	cmp	r0, r3
    1da8:	d112      	bne.n	1dd0 <sysclk_enable_peripheral_clock+0xa8>
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    1daa:	2003      	movs	r0, #3
    1dac:	4b8d      	ldr	r3, [pc, #564]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1dae:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1db0:	4b87      	ldr	r3, [pc, #540]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1db4:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1db8:	498b      	ldr	r1, [pc, #556]	; (1fe8 <sysclk_enable_peripheral_clock+0x2c0>)
    1dba:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1dbc:	641a      	str	r2, [r3, #64]	; 0x40
    1dbe:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1dc0:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1dc4:	d103      	bne.n	1dce <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_pba_module(SYSCLK_IISC);
    1dc6:	2000      	movs	r0, #0
    1dc8:	4b86      	ldr	r3, [pc, #536]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1dca:	4798      	blx	r3
		break;
    1dcc:	bd08      	pop	{r3, pc}
    1dce:	bd08      	pop	{r3, pc}
    1dd0:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1dd2:	4b86      	ldr	r3, [pc, #536]	; (1fec <sysclk_enable_peripheral_clock+0x2c4>)
    1dd4:	4298      	cmp	r0, r3
    1dd6:	f000 80e6 	beq.w	1fa6 <sysclk_enable_peripheral_clock+0x27e>
    1dda:	d912      	bls.n	1e02 <sysclk_enable_peripheral_clock+0xda>
    1ddc:	4b84      	ldr	r3, [pc, #528]	; (1ff0 <sysclk_enable_peripheral_clock+0x2c8>)
    1dde:	4298      	cmp	r0, r3
    1de0:	f000 80e5 	beq.w	1fae <sysclk_enable_peripheral_clock+0x286>
    1de4:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    1de8:	4298      	cmp	r0, r3
    1dea:	d113      	bne.n	1e14 <sysclk_enable_peripheral_clock+0xec>
	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
		break;

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    1dec:	2008      	movs	r0, #8
    1dee:	4b7d      	ldr	r3, [pc, #500]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1df0:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    1df2:	4b77      	ldr	r3, [pc, #476]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1df6:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1dfa:	497b      	ldr	r1, [pc, #492]	; (1fe8 <sysclk_enable_peripheral_clock+0x2c0>)
    1dfc:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    1dfe:	641a      	str	r2, [r3, #64]	; 0x40
    1e00:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e02:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    1e06:	4298      	cmp	r0, r3
    1e08:	d103      	bne.n	1e12 <sysclk_enable_peripheral_clock+0xea>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    1e0a:	2005      	movs	r0, #5
    1e0c:	4b75      	ldr	r3, [pc, #468]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1e0e:	4798      	blx	r3
		break;
    1e10:	bd08      	pop	{r3, pc}
    1e12:	bd08      	pop	{r3, pc}
    1e14:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e16:	4b77      	ldr	r3, [pc, #476]	; (1ff4 <sysclk_enable_peripheral_clock+0x2cc>)
    1e18:	4298      	cmp	r0, r3
    1e1a:	f000 810e 	beq.w	203a <sysclk_enable_peripheral_clock+0x312>
    1e1e:	d822      	bhi.n	1e66 <sysclk_enable_peripheral_clock+0x13e>
    1e20:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1e24:	4298      	cmp	r0, r3
    1e26:	f000 80f9 	beq.w	201c <sysclk_enable_peripheral_clock+0x2f4>
    1e2a:	d90b      	bls.n	1e44 <sysclk_enable_peripheral_clock+0x11c>
    1e2c:	4b72      	ldr	r3, [pc, #456]	; (1ff8 <sysclk_enable_peripheral_clock+0x2d0>)
    1e2e:	4298      	cmp	r0, r3
    1e30:	f000 80ff 	beq.w	2032 <sysclk_enable_peripheral_clock+0x30a>
    1e34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1e38:	4298      	cmp	r0, r3
    1e3a:	d113      	bne.n	1e64 <sysclk_enable_peripheral_clock+0x13c>
	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
		break;

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    1e3c:	200d      	movs	r0, #13
    1e3e:	4b69      	ldr	r3, [pc, #420]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1e40:	4798      	blx	r3
		break;
    1e42:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e44:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1e48:	4298      	cmp	r0, r3
    1e4a:	d10a      	bne.n	1e62 <sysclk_enable_peripheral_clock+0x13a>
		sysclk_enable_pba_module(SYSCLK_USART2);
    1e4c:	200a      	movs	r0, #10
    1e4e:	4b65      	ldr	r3, [pc, #404]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1e50:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    1e52:	4b5f      	ldr	r3, [pc, #380]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1e56:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1e5a:	4963      	ldr	r1, [pc, #396]	; (1fe8 <sysclk_enable_peripheral_clock+0x2c0>)
    1e5c:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    1e5e:	641a      	str	r2, [r3, #64]	; 0x40
    1e60:	bd08      	pop	{r3, pc}
    1e62:	bd08      	pop	{r3, pc}
    1e64:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e66:	4b65      	ldr	r3, [pc, #404]	; (1ffc <sysclk_enable_peripheral_clock+0x2d4>)
    1e68:	4298      	cmp	r0, r3
    1e6a:	f000 80ea 	beq.w	2042 <sysclk_enable_peripheral_clock+0x31a>
    1e6e:	d90b      	bls.n	1e88 <sysclk_enable_peripheral_clock+0x160>
    1e70:	4b63      	ldr	r3, [pc, #396]	; (2000 <sysclk_enable_peripheral_clock+0x2d8>)
    1e72:	4298      	cmp	r0, r3
    1e74:	f000 80e9 	beq.w	204a <sysclk_enable_peripheral_clock+0x322>
    1e78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1e7c:	4298      	cmp	r0, r3
    1e7e:	d10c      	bne.n	1e9a <sysclk_enable_peripheral_clock+0x172>
	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
		break;

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    1e80:	2012      	movs	r0, #18
    1e82:	4b58      	ldr	r3, [pc, #352]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1e84:	4798      	blx	r3
		break;
    1e86:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e88:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1e8c:	4298      	cmp	r0, r3
    1e8e:	d103      	bne.n	1e98 <sysclk_enable_peripheral_clock+0x170>
		sysclk_enable_pba_module(SYSCLK_GLOC);
    1e90:	200f      	movs	r0, #15
    1e92:	4b54      	ldr	r3, [pc, #336]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1e94:	4798      	blx	r3
		break;
    1e96:	bd08      	pop	{r3, pc}
    1e98:	bd08      	pop	{r3, pc}
    1e9a:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1e9c:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
    1ea0:	4298      	cmp	r0, r3
    1ea2:	f000 80e6 	beq.w	2072 <sysclk_enable_peripheral_clock+0x34a>
    1ea6:	d81f      	bhi.n	1ee8 <sysclk_enable_peripheral_clock+0x1c0>
    1ea8:	f5a3 3314 	sub.w	r3, r3, #151552	; 0x25000
    1eac:	4298      	cmp	r0, r3
    1eae:	f000 80d4 	beq.w	205a <sysclk_enable_peripheral_clock+0x332>
    1eb2:	d90f      	bls.n	1ed4 <sysclk_enable_peripheral_clock+0x1ac>
    1eb4:	4b53      	ldr	r3, [pc, #332]	; (2004 <sysclk_enable_peripheral_clock+0x2dc>)
    1eb6:	4298      	cmp	r0, r3
    1eb8:	f000 80d3 	beq.w	2062 <sysclk_enable_peripheral_clock+0x33a>
    1ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1ec0:	4298      	cmp	r0, r3
    1ec2:	d110      	bne.n	1ee6 <sysclk_enable_peripheral_clock+0x1be>
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1ec4:	2102      	movs	r1, #2
    1ec6:	2001      	movs	r0, #1
    1ec8:	4b44      	ldr	r3, [pc, #272]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1eca:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
		break;

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    1ecc:	2001      	movs	r0, #1
    1ece:	4b4e      	ldr	r3, [pc, #312]	; (2008 <sysclk_enable_peripheral_clock+0x2e0>)
    1ed0:	4798      	blx	r3
		break;
    1ed2:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1ed4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1ed8:	4298      	cmp	r0, r3
    1eda:	d103      	bne.n	1ee4 <sysclk_enable_peripheral_clock+0x1bc>
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    1edc:	2015      	movs	r0, #21
    1ede:	4b41      	ldr	r3, [pc, #260]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1ee0:	4798      	blx	r3
		break;
    1ee2:	bd08      	pop	{r3, pc}
    1ee4:	bd08      	pop	{r3, pc}
    1ee6:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1ee8:	4b48      	ldr	r3, [pc, #288]	; (200c <sysclk_enable_peripheral_clock+0x2e4>)
    1eea:	4298      	cmp	r0, r3
    1eec:	f000 80c5 	beq.w	207a <sysclk_enable_peripheral_clock+0x352>
    1ef0:	d90b      	bls.n	1f0a <sysclk_enable_peripheral_clock+0x1e2>
    1ef2:	4b47      	ldr	r3, [pc, #284]	; (2010 <sysclk_enable_peripheral_clock+0x2e8>)
    1ef4:	4298      	cmp	r0, r3
    1ef6:	f000 80c8 	beq.w	208a <sysclk_enable_peripheral_clock+0x362>
    1efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1efe:	4298      	cmp	r0, r3
    1f00:	d110      	bne.n	1f24 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
		break;

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    1f02:	2006      	movs	r0, #6
    1f04:	4b40      	ldr	r3, [pc, #256]	; (2008 <sysclk_enable_peripheral_clock+0x2e0>)
    1f06:	4798      	blx	r3
		break;
    1f08:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1f0a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    1f0e:	4298      	cmp	r0, r3
    1f10:	d107      	bne.n	1f22 <sysclk_enable_peripheral_clock+0x1fa>
    1f12:	2100      	movs	r1, #0
    1f14:	2001      	movs	r0, #1
    1f16:	4b31      	ldr	r3, [pc, #196]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1f18:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    1f1a:	2003      	movs	r0, #3
    1f1c:	4b3a      	ldr	r3, [pc, #232]	; (2008 <sysclk_enable_peripheral_clock+0x2e0>)
    1f1e:	4798      	blx	r3
		break;
    1f20:	bd08      	pop	{r3, pc}
    1f22:	bd08      	pop	{r3, pc}
    1f24:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1f26:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    1f2a:	4298      	cmp	r0, r3
    1f2c:	f000 80ba 	beq.w	20a4 <sysclk_enable_peripheral_clock+0x37c>
    1f30:	d90c      	bls.n	1f4c <sysclk_enable_peripheral_clock+0x224>
    1f32:	4b38      	ldr	r3, [pc, #224]	; (2014 <sysclk_enable_peripheral_clock+0x2ec>)
    1f34:	4298      	cmp	r0, r3
    1f36:	f000 80ba 	beq.w	20ae <sysclk_enable_peripheral_clock+0x386>
    1f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1f3e:	4298      	cmp	r0, r3
    1f40:	d10e      	bne.n	1f60 <sysclk_enable_peripheral_clock+0x238>
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    1f42:	2104      	movs	r1, #4
    1f44:	4608      	mov	r0, r1
    1f46:	4b25      	ldr	r3, [pc, #148]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1f48:	4798      	blx	r3
    1f4a:	bd08      	pop	{r3, pc}
    1f4c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    1f50:	4298      	cmp	r0, r3
    1f52:	d104      	bne.n	1f5e <sysclk_enable_peripheral_clock+0x236>
    1f54:	2101      	movs	r1, #1
    1f56:	2004      	movs	r0, #4
    1f58:	4b20      	ldr	r3, [pc, #128]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1f5a:	4798      	blx	r3
    1f5c:	bd08      	pop	{r3, pc}
    1f5e:	bd08      	pop	{r3, pc}
    1f60:	bd08      	pop	{r3, pc}
    1f62:	bd08      	pop	{r3, pc}
    1f64:	4b2c      	ldr	r3, [pc, #176]	; (2018 <sysclk_enable_peripheral_clock+0x2f0>)
    1f66:	4298      	cmp	r0, r3
    1f68:	f000 80b5 	beq.w	20d6 <sysclk_enable_peripheral_clock+0x3ae>
    1f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1f70:	4298      	cmp	r0, r3
    1f72:	d104      	bne.n	1f7e <sysclk_enable_peripheral_clock+0x256>
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    1f74:	2105      	movs	r1, #5
    1f76:	4608      	mov	r0, r1
    1f78:	4b18      	ldr	r3, [pc, #96]	; (1fdc <sysclk_enable_peripheral_clock+0x2b4>)
    1f7a:	4798      	blx	r3
    1f7c:	bd08      	pop	{r3, pc}
    1f7e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_SPI);
    1f80:	2001      	movs	r0, #1
    1f82:	4b18      	ldr	r3, [pc, #96]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1f84:	4798      	blx	r3
		break;
    1f86:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TC0);
    1f88:	2002      	movs	r0, #2
    1f8a:	4b16      	ldr	r3, [pc, #88]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1f8c:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    1f8e:	4b10      	ldr	r3, [pc, #64]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1f92:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f96:	4914      	ldr	r1, [pc, #80]	; (1fe8 <sysclk_enable_peripheral_clock+0x2c0>)
    1f98:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    1f9a:	641a      	str	r2, [r3, #64]	; 0x40
    1f9c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    1f9e:	2004      	movs	r0, #4
    1fa0:	4b10      	ldr	r3, [pc, #64]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1fa2:	4798      	blx	r3
		break;
    1fa4:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    1fa6:	2006      	movs	r0, #6
    1fa8:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1faa:	4798      	blx	r3
		break;
    1fac:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    1fae:	2007      	movs	r0, #7
    1fb0:	4b0c      	ldr	r3, [pc, #48]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1fb2:	4798      	blx	r3
		break;
    1fb4:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_USART1);
    1fb6:	2009      	movs	r0, #9
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <sysclk_enable_peripheral_clock+0x2bc>)
    1fba:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <sysclk_enable_peripheral_clock+0x2a8>)
    1fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1fc0:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1fc4:	4908      	ldr	r1, [pc, #32]	; (1fe8 <sysclk_enable_peripheral_clock+0x2c0>)
    1fc6:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    1fc8:	641a      	str	r2, [r3, #64]	; 0x40
    1fca:	bd08      	pop	{r3, pc}
    1fcc:	40070000 	.word	0x40070000
    1fd0:	400e0000 	.word	0x400e0000
    1fd4:	400f0000 	.word	0x400f0000
    1fd8:	400f0c00 	.word	0x400f0c00
    1fdc:	00001c19 	.word	0x00001c19
    1fe0:	40010000 	.word	0x40010000
    1fe4:	00001c79 	.word	0x00001c79
    1fe8:	aa000040 	.word	0xaa000040
    1fec:	4001c000 	.word	0x4001c000
    1ff0:	4001c400 	.word	0x4001c400
    1ff4:	40040000 	.word	0x40040000
    1ff8:	40038000 	.word	0x40038000
    1ffc:	40064000 	.word	0x40064000
    2000:	40068000 	.word	0x40068000
    2004:	400a0000 	.word	0x400a0000
    2008:	00001cd1 	.word	0x00001cd1
    200c:	400a4000 	.word	0x400a4000
    2010:	400a5000 	.word	0x400a5000
    2014:	400e0c00 	.word	0x400e0c00
    2018:	400f1000 	.word	0x400f1000
		sysclk_enable_pba_module(SYSCLK_USART3);
    201c:	200b      	movs	r0, #11
    201e:	4b30      	ldr	r3, [pc, #192]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    2020:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    2022:	4b30      	ldr	r3, [pc, #192]	; (20e4 <sysclk_enable_peripheral_clock+0x3bc>)
    2024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    2026:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    202a:	492f      	ldr	r1, [pc, #188]	; (20e8 <sysclk_enable_peripheral_clock+0x3c0>)
    202c:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    202e:	641a      	str	r2, [r3, #64]	; 0x40
    2030:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    2032:	200c      	movs	r0, #12
    2034:	4b2a      	ldr	r3, [pc, #168]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    2036:	4798      	blx	r3
		break;
    2038:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    203a:	200e      	movs	r0, #14
    203c:	4b28      	ldr	r3, [pc, #160]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    203e:	4798      	blx	r3
		break;
    2040:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    2042:	2010      	movs	r0, #16
    2044:	4b26      	ldr	r3, [pc, #152]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    2046:	4798      	blx	r3
		break;
    2048:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TRNG);
    204a:	2011      	movs	r0, #17
    204c:	4b24      	ldr	r3, [pc, #144]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    204e:	4798      	blx	r3
		break;
    2050:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_CATB);
    2052:	2013      	movs	r0, #19
    2054:	4b22      	ldr	r3, [pc, #136]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    2056:	4798      	blx	r3
		break;
    2058:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    205a:	2016      	movs	r0, #22
    205c:	4b20      	ldr	r3, [pc, #128]	; (20e0 <sysclk_enable_peripheral_clock+0x3b8>)
    205e:	4798      	blx	r3
		break;
    2060:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2062:	2101      	movs	r1, #1
    2064:	4608      	mov	r0, r1
    2066:	4b21      	ldr	r3, [pc, #132]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    2068:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    206a:	2000      	movs	r0, #0
    206c:	4b20      	ldr	r3, [pc, #128]	; (20f0 <sysclk_enable_peripheral_clock+0x3c8>)
    206e:	4798      	blx	r3
		break;
    2070:	bd08      	pop	{r3, pc}
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    2072:	2002      	movs	r0, #2
    2074:	4b1e      	ldr	r3, [pc, #120]	; (20f0 <sysclk_enable_peripheral_clock+0x3c8>)
    2076:	4798      	blx	r3
		break;
    2078:	bd08      	pop	{r3, pc}
    207a:	2104      	movs	r1, #4
    207c:	2001      	movs	r0, #1
    207e:	4b1b      	ldr	r3, [pc, #108]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    2080:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    2082:	2004      	movs	r0, #4
    2084:	4b1a      	ldr	r3, [pc, #104]	; (20f0 <sysclk_enable_peripheral_clock+0x3c8>)
    2086:	4798      	blx	r3
		break;
    2088:	bd08      	pop	{r3, pc}
    208a:	2103      	movs	r1, #3
    208c:	2001      	movs	r0, #1
    208e:	4b17      	ldr	r3, [pc, #92]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    2090:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2092:	2005      	movs	r0, #5
    2094:	4b16      	ldr	r3, [pc, #88]	; (20f0 <sysclk_enable_peripheral_clock+0x3c8>)
    2096:	4798      	blx	r3
		break;
    2098:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    209a:	2100      	movs	r1, #0
    209c:	2004      	movs	r0, #4
    209e:	4b13      	ldr	r3, [pc, #76]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20a0:	4798      	blx	r3
    20a2:	bd08      	pop	{r3, pc}
    20a4:	2102      	movs	r1, #2
    20a6:	2004      	movs	r0, #4
    20a8:	4b10      	ldr	r3, [pc, #64]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20aa:	4798      	blx	r3
    20ac:	bd08      	pop	{r3, pc}
    20ae:	2103      	movs	r1, #3
    20b0:	2004      	movs	r0, #4
    20b2:	4b0e      	ldr	r3, [pc, #56]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20b4:	4798      	blx	r3
    20b6:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    20b8:	2100      	movs	r1, #0
    20ba:	2005      	movs	r0, #5
    20bc:	4b0b      	ldr	r3, [pc, #44]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20be:	4798      	blx	r3
    20c0:	bd08      	pop	{r3, pc}
    20c2:	2101      	movs	r1, #1
    20c4:	2005      	movs	r0, #5
    20c6:	4b09      	ldr	r3, [pc, #36]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20c8:	4798      	blx	r3
    20ca:	bd08      	pop	{r3, pc}
    20cc:	2103      	movs	r1, #3
    20ce:	2005      	movs	r0, #5
    20d0:	4b06      	ldr	r3, [pc, #24]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20d2:	4798      	blx	r3
    20d4:	bd08      	pop	{r3, pc}
    20d6:	2104      	movs	r1, #4
    20d8:	2005      	movs	r0, #5
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <sysclk_enable_peripheral_clock+0x3c4>)
    20dc:	4798      	blx	r3
    20de:	bd08      	pop	{r3, pc}
    20e0:	00001c79 	.word	0x00001c79
    20e4:	400e0000 	.word	0x400e0000
    20e8:	aa000040 	.word	0xaa000040
    20ec:	00001c19 	.word	0x00001c19
    20f0:	00001cd1 	.word	0x00001cd1

000020f4 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    20f4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    20f6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    20fa:	fab3 f383 	clz	r3, r3
    20fe:	095b      	lsrs	r3, r3, #5
    2100:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2102:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2104:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2108:	2200      	movs	r2, #0
    210a:	4b08      	ldr	r3, [pc, #32]	; (212c <sysclk_set_source+0x38>)
    210c:	701a      	strb	r2, [r3, #0]
	return flags;
    210e:	9a01      	ldr	r2, [sp, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2110:	4b07      	ldr	r3, [pc, #28]	; (2130 <sysclk_set_source+0x3c>)
    2112:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    2116:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    2118:	6018      	str	r0, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
    211a:	b12a      	cbz	r2, 2128 <sysclk_set_source+0x34>
		cpu_irq_enable();
    211c:	2201      	movs	r2, #1
    211e:	4b03      	ldr	r3, [pc, #12]	; (212c <sysclk_set_source+0x38>)
    2120:	701a      	strb	r2, [r3, #0]
    2122:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2126:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    2128:	b002      	add	sp, #8
    212a:	4770      	bx	lr
    212c:	20000104 	.word	0x20000104
    2130:	400e0000 	.word	0x400e0000

00002134 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
    2134:	b500      	push	{lr}
    2136:	b083      	sub	sp, #12
	// Note: the SYSCLK_PBB_BRIDGE clock is enabled by
	// sysclk_enable_pbb_module().
	sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2138:	2005      	movs	r0, #5
    213a:	4b16      	ldr	r3, [pc, #88]	; (2194 <sysclk_enable_usb+0x60>)
    213c:	4798      	blx	r3
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    213e:	2103      	movs	r1, #3
    2140:	2001      	movs	r0, #1
    2142:	4b15      	ldr	r3, [pc, #84]	; (2198 <sysclk_enable_usb+0x64>)
    2144:	4798      	blx	r3
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    2146:	4b15      	ldr	r3, [pc, #84]	; (219c <sysclk_enable_usb+0x68>)
    2148:	695b      	ldr	r3, [r3, #20]

static inline void pll_enable_config_defaults(uint32_t pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    214a:	f013 0f40 	tst.w	r3, #64	; 0x40
    214e:	d110      	bne.n	2172 <sysclk_enable_usb+0x3e>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    2150:	4b12      	ldr	r3, [pc, #72]	; (219c <sysclk_enable_usb+0x68>)
    2152:	695b      	ldr	r3, [r3, #20]
		if (!osc_is_ready(OSC_ID_OSC0)) {
    2154:	f013 0f01 	tst.w	r3, #1
    2158:	d013      	beq.n	2182 <sysclk_enable_usb+0x4e>
	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    215a:	a802      	add	r0, sp, #8
    215c:	4b10      	ldr	r3, [pc, #64]	; (21a0 <sysclk_enable_usb+0x6c>)
    215e:	f840 3d04 	str.w	r3, [r0, #-4]!
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
    2162:	2100      	movs	r1, #0
    2164:	4b0f      	ldr	r3, [pc, #60]	; (21a4 <sysclk_enable_usb+0x70>)
    2166:	4798      	blx	r3
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    2168:	4a0c      	ldr	r2, [pc, #48]	; (219c <sysclk_enable_usb+0x68>)
    216a:	6953      	ldr	r3, [r2, #20]
	while (!pll_is_locked(pll_id));
    216c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2170:	d0fb      	beq.n	216a <sysclk_enable_usb+0x36>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    2172:	f241 0201 	movw	r2, #4097	; 0x1001
    2176:	4b09      	ldr	r3, [pc, #36]	; (219c <sysclk_enable_usb+0x68>)
    2178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sysclk_enable_hsb_module(SYSCLK_USBC_DATA);

	genclk_enable_config(7, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
    217c:	b003      	add	sp, #12
    217e:	f85d fb04 	ldr.w	pc, [sp], #4
		osc_priv_enable_osc0();
    2182:	4b09      	ldr	r3, [pc, #36]	; (21a8 <sysclk_enable_usb+0x74>)
    2184:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    2186:	4a05      	ldr	r2, [pc, #20]	; (219c <sysclk_enable_usb+0x68>)
    2188:	6953      	ldr	r3, [r2, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    218a:	f013 0f01 	tst.w	r3, #1
    218e:	d0fb      	beq.n	2188 <sysclk_enable_usb+0x54>
    2190:	e7e3      	b.n	215a <sysclk_enable_usb+0x26>
    2192:	bf00      	nop
    2194:	00001cd1 	.word	0x00001cd1
    2198:	00001c19 	.word	0x00001c19
    219c:	400e0800 	.word	0x400e0800
    21a0:	3f050110 	.word	0x3f050110
    21a4:	00001bbd 	.word	0x00001bbd
    21a8:	00001b75 	.word	0x00001b75

000021ac <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    21ac:	b530      	push	{r4, r5, lr}
    21ae:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    21b0:	4c1d      	ldr	r4, [pc, #116]	; (2228 <sysclk_init+0x7c>)
    21b2:	4620      	mov	r0, r4
    21b4:	4b1d      	ldr	r3, [pc, #116]	; (222c <sysclk_init+0x80>)
    21b6:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    21b8:	2301      	movs	r3, #1
    21ba:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    21bc:	4622      	mov	r2, r4
    21be:	68d3      	ldr	r3, [r2, #12]
    21c0:	f013 0f01 	tst.w	r3, #1
    21c4:	d0fb      	beq.n	21be <sysclk_init+0x12>
		osc_priv_enable_osc0();
    21c6:	4b1a      	ldr	r3, [pc, #104]	; (2230 <sysclk_init+0x84>)
    21c8:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    21ca:	4a1a      	ldr	r2, [pc, #104]	; (2234 <sysclk_init+0x88>)
    21cc:	6953      	ldr	r3, [r2, #20]
    21ce:	f013 0f01 	tst.w	r3, #1
    21d2:	d0fb      	beq.n	21cc <sysclk_init+0x20>
#ifdef BOARD_OSC0_HZ
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_OSC0) {
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    21d4:	2200      	movs	r2, #0
    21d6:	4611      	mov	r1, r2
    21d8:	4817      	ldr	r0, [pc, #92]	; (2238 <sysclk_init+0x8c>)
    21da:	4b18      	ldr	r3, [pc, #96]	; (223c <sysclk_init+0x90>)
    21dc:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_OSC0);
    21de:	2001      	movs	r0, #1
    21e0:	4b17      	ldr	r3, [pc, #92]	; (2240 <sysclk_init+0x94>)
    21e2:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    21e4:	4a17      	ldr	r2, [pc, #92]	; (2244 <sysclk_init+0x98>)
    21e6:	2100      	movs	r1, #0
    21e8:	4817      	ldr	r0, [pc, #92]	; (2248 <sysclk_init+0x9c>)
    21ea:	4b18      	ldr	r3, [pc, #96]	; (224c <sysclk_init+0xa0>)
    21ec:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    21ee:	4d16      	ldr	r5, [pc, #88]	; (2248 <sysclk_init+0x9c>)
    21f0:	4c17      	ldr	r4, [pc, #92]	; (2250 <sysclk_init+0xa4>)
    21f2:	4628      	mov	r0, r5
    21f4:	47a0      	blx	r4
    21f6:	f010 0f01 	tst.w	r0, #1
    21fa:	d0fa      	beq.n	21f2 <sysclk_init+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    21fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2200:	fab3 f383 	clz	r3, r3
    2204:	095b      	lsrs	r3, r3, #5
    2206:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2208:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    220a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    220e:	2200      	movs	r2, #0
    2210:	4b10      	ldr	r3, [pc, #64]	; (2254 <sysclk_init+0xa8>)
    2212:	701a      	strb	r2, [r3, #0]
	return flags;
    2214:	9b01      	ldr	r3, [sp, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2216:	b12b      	cbz	r3, 2224 <sysclk_init+0x78>
		cpu_irq_enable();
    2218:	2201      	movs	r2, #1
    221a:	4b0e      	ldr	r3, [pc, #56]	; (2254 <sysclk_init+0xa8>)
    221c:	701a      	strb	r2, [r3, #0]
    221e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2222:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    2224:	b003      	add	sp, #12
    2226:	bd30      	pop	{r4, r5, pc}
    2228:	400a0400 	.word	0x400a0400
    222c:	00001d29 	.word	0x00001d29
    2230:	00001b75 	.word	0x00001b75
    2234:	400e0800 	.word	0x400e0800
    2238:	00f42400 	.word	0x00f42400
    223c:	0000241d 	.word	0x0000241d
    2240:	000020f5 	.word	0x000020f5
    2244:	0003a980 	.word	0x0003a980
    2248:	400f0000 	.word	0x400f0000
    224c:	00002259 	.word	0x00002259
    2250:	000022e5 	.word	0x000022e5
    2254:	20000104 	.word	0x20000104

00002258 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    2258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    225c:	b083      	sub	sp, #12
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    225e:	69c3      	ldr	r3, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    2260:	f023 0e03 	bic.w	lr, r3, #3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2264:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2268:	fab3 f383 	clz	r3, r3
    226c:	095b      	lsrs	r3, r3, #5
    226e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2270:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2272:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2276:	2500      	movs	r5, #0
    2278:	4b11      	ldr	r3, [pc, #68]	; (22c0 <bpm_power_scaling_cpu_failsafe+0x68>)
    227a:	701d      	strb	r5, [r3, #0]
	return flags;
    227c:	9e01      	ldr	r6, [sp, #4]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    227e:	4c11      	ldr	r4, [pc, #68]	; (22c4 <bpm_power_scaling_cpu_failsafe+0x6c>)
    2280:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    2284:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    2286:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    228a:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    228c:	2305      	movs	r3, #5
    228e:	6023      	str	r3, [r4, #0]
	pmcon |= BPM_PMCON_PS(ps_value);
    2290:	f001 0103 	and.w	r1, r1, #3
	pmcon |= BPM_PMCON_PSCREQ;
    2294:	f041 010c 	orr.w	r1, r1, #12

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    2298:	ea41 010e 	orr.w	r1, r1, lr
    229c:	4b0a      	ldr	r3, [pc, #40]	; (22c8 <bpm_power_scaling_cpu_failsafe+0x70>)
    229e:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    22a0:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    22a2:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    22a6:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    22aa:	6027      	str	r7, [r4, #0]
	if (cpu_irq_is_enabled_flags(flags))
    22ac:	b12e      	cbz	r6, 22ba <bpm_power_scaling_cpu_failsafe+0x62>
		cpu_irq_enable();
    22ae:	2201      	movs	r2, #1
    22b0:	4b03      	ldr	r3, [pc, #12]	; (22c0 <bpm_power_scaling_cpu_failsafe+0x68>)
    22b2:	701a      	strb	r2, [r3, #0]
    22b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    22b8:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    22ba:	b003      	add	sp, #12
    22bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22c0:	20000104 	.word	0x20000104
    22c4:	e000e010 	.word	0xe000e010
    22c8:	20000001 	.word	0x20000001

000022cc <bpm_enable_fast_wakeup>:
	bpm->BPM_PMCON = pmcon;
}

void bpm_enable_fast_wakeup(Bpm *bpm)
{
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    22cc:	69c3      	ldr	r3, [r0, #28]
    22ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	BPM_UNLOCK(PMCON);
    22d2:	4902      	ldr	r1, [pc, #8]	; (22dc <bpm_enable_fast_wakeup+0x10>)
    22d4:	4a02      	ldr	r2, [pc, #8]	; (22e0 <bpm_enable_fast_wakeup+0x14>)
    22d6:	6191      	str	r1, [r2, #24]
	bpm->BPM_PMCON = pmcon;
    22d8:	61c3      	str	r3, [r0, #28]
    22da:	4770      	bx	lr
    22dc:	aa00001c 	.word	0xaa00001c
    22e0:	400f0000 	.word	0x400f0000

000022e4 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    22e4:	6940      	ldr	r0, [r0, #20]
}
    22e6:	4770      	bx	lr

000022e8 <eic_line_interrupt>:
 * eic_line_set_callback() function.
 *
 * \param [in]  line_number EIC line number to handle interrupt for
 */
static void eic_line_interrupt(uint8_t line_number)
{
    22e8:	b508      	push	{r3, lr}
	if (eic_callback_pointer[line_number]) {
    22ea:	4b03      	ldr	r3, [pc, #12]	; (22f8 <eic_line_interrupt+0x10>)
    22ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22f0:	b103      	cbz	r3, 22f4 <eic_line_interrupt+0xc>
		eic_callback_pointer[line_number]();
    22f2:	4798      	blx	r3
    22f4:	bd08      	pop	{r3, pc}
    22f6:	bf00      	nop
    22f8:	20000d9c 	.word	0x20000d9c

000022fc <NMI_Handler>:

/**
 * \brief Interrupt handler for EIC NMI.
 */
void NMI_Handler(void)
{
    22fc:	b508      	push	{r3, lr}
	eic_line_interrupt(0);
    22fe:	2000      	movs	r0, #0
    2300:	4b01      	ldr	r3, [pc, #4]	; (2308 <NMI_Handler+0xc>)
    2302:	4798      	blx	r3
    2304:	bd08      	pop	{r3, pc}
    2306:	bf00      	nop
    2308:	000022e9 	.word	0x000022e9

0000230c <EIC_1_Handler>:

/**
 * \brief Interrupt handler for EIC line 1.
 */
void EIC_1_Handler(void)
{
    230c:	b508      	push	{r3, lr}
	eic_line_interrupt(1);
    230e:	2001      	movs	r0, #1
    2310:	4b01      	ldr	r3, [pc, #4]	; (2318 <EIC_1_Handler+0xc>)
    2312:	4798      	blx	r3
    2314:	bd08      	pop	{r3, pc}
    2316:	bf00      	nop
    2318:	000022e9 	.word	0x000022e9

0000231c <EIC_2_Handler>:

/**
 * \brief Interrupt handler for EIC line 2.
 */
void EIC_2_Handler(void)
{
    231c:	b508      	push	{r3, lr}
	eic_line_interrupt(2);
    231e:	2002      	movs	r0, #2
    2320:	4b01      	ldr	r3, [pc, #4]	; (2328 <EIC_2_Handler+0xc>)
    2322:	4798      	blx	r3
    2324:	bd08      	pop	{r3, pc}
    2326:	bf00      	nop
    2328:	000022e9 	.word	0x000022e9

0000232c <EIC_3_Handler>:

/**
 * \brief Interrupt handler for EIC line 3.
 */
void EIC_3_Handler(void)
{
    232c:	b508      	push	{r3, lr}
	eic_line_interrupt(3);
    232e:	2003      	movs	r0, #3
    2330:	4b01      	ldr	r3, [pc, #4]	; (2338 <EIC_3_Handler+0xc>)
    2332:	4798      	blx	r3
    2334:	bd08      	pop	{r3, pc}
    2336:	bf00      	nop
    2338:	000022e9 	.word	0x000022e9

0000233c <EIC_4_Handler>:

/**
 * \brief Interrupt handler for EIC line 4.
 */
void EIC_4_Handler(void)
{
    233c:	b508      	push	{r3, lr}
	eic_line_interrupt(4);
    233e:	2004      	movs	r0, #4
    2340:	4b01      	ldr	r3, [pc, #4]	; (2348 <EIC_4_Handler+0xc>)
    2342:	4798      	blx	r3
    2344:	bd08      	pop	{r3, pc}
    2346:	bf00      	nop
    2348:	000022e9 	.word	0x000022e9

0000234c <EIC_5_Handler>:

/**
 * \brief Interrupt handler for EIC line 5.
 */
void EIC_5_Handler(void)
{
    234c:	b508      	push	{r3, lr}
	eic_line_interrupt(5);
    234e:	2005      	movs	r0, #5
    2350:	4b01      	ldr	r3, [pc, #4]	; (2358 <EIC_5_Handler+0xc>)
    2352:	4798      	blx	r3
    2354:	bd08      	pop	{r3, pc}
    2356:	bf00      	nop
    2358:	000022e9 	.word	0x000022e9

0000235c <EIC_6_Handler>:

/**
 * \brief Interrupt handler for EIC line 6.
 */
void EIC_6_Handler(void)
{
    235c:	b508      	push	{r3, lr}
	eic_line_interrupt(6);
    235e:	2006      	movs	r0, #6
    2360:	4b01      	ldr	r3, [pc, #4]	; (2368 <EIC_6_Handler+0xc>)
    2362:	4798      	blx	r3
    2364:	bd08      	pop	{r3, pc}
    2366:	bf00      	nop
    2368:	000022e9 	.word	0x000022e9

0000236c <EIC_7_Handler>:

/**
 * \brief Interrupt handler for EIC line 7.
 */
void EIC_7_Handler(void)
{
    236c:	b508      	push	{r3, lr}
	eic_line_interrupt(7);
    236e:	2007      	movs	r0, #7
    2370:	4b01      	ldr	r3, [pc, #4]	; (2378 <EIC_7_Handler+0xc>)
    2372:	4798      	blx	r3
    2374:	bd08      	pop	{r3, pc}
    2376:	bf00      	nop
    2378:	000022e9 	.word	0x000022e9

0000237c <EIC_8_Handler>:

/**
 * \brief Interrupt handler for EIC line 8.
 */
void EIC_8_Handler(void)
{
    237c:	b508      	push	{r3, lr}
	eic_line_interrupt(8);
    237e:	2008      	movs	r0, #8
    2380:	4b01      	ldr	r3, [pc, #4]	; (2388 <EIC_8_Handler+0xc>)
    2382:	4798      	blx	r3
    2384:	bd08      	pop	{r3, pc}
    2386:	bf00      	nop
    2388:	000022e9 	.word	0x000022e9

0000238c <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    238c:	4b05      	ldr	r3, [pc, #20]	; (23a4 <flashcalw_set_wait_state+0x18>)
    238e:	681a      	ldr	r2, [r3, #0]
    2390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    2394:	2800      	cmp	r0, #0
    2396:	bf14      	ite	ne
    2398:	2340      	movne	r3, #64	; 0x40
    239a:	2300      	moveq	r3, #0
    239c:	4313      	orrs	r3, r2
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    239e:	4a01      	ldr	r2, [pc, #4]	; (23a4 <flashcalw_set_wait_state+0x18>)
    23a0:	6013      	str	r3, [r2, #0]
    23a2:	4770      	bx	lr
    23a4:	400a0000 	.word	0x400a0000

000023a8 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    23a8:	4b02      	ldr	r3, [pc, #8]	; (23b4 <flashcalw_is_ready+0xc>)
    23aa:	6898      	ldr	r0, [r3, #8]
}
    23ac:	f000 0001 	and.w	r0, r0, #1
    23b0:	4770      	bx	lr
    23b2:	bf00      	nop
    23b4:	400a0000 	.word	0x400a0000

000023b8 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    23b8:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    23ba:	4c02      	ldr	r4, [pc, #8]	; (23c4 <flashcalw_default_wait_until_ready+0xc>)
    23bc:	47a0      	blx	r4
    23be:	2800      	cmp	r0, #0
    23c0:	d0fc      	beq.n	23bc <flashcalw_default_wait_until_ready+0x4>
	}
}
    23c2:	bd10      	pop	{r4, pc}
    23c4:	000023a9 	.word	0x000023a9

000023c8 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    23c8:	b538      	push	{r3, r4, r5, lr}
    23ca:	4605      	mov	r5, r0
    23cc:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    23ce:	4b10      	ldr	r3, [pc, #64]	; (2410 <flashcalw_issue_command+0x48>)
    23d0:	681b      	ldr	r3, [r3, #0]
    23d2:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    23d4:	4b0f      	ldr	r3, [pc, #60]	; (2414 <flashcalw_issue_command+0x4c>)
    23d6:	685b      	ldr	r3, [r3, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    23d8:	2c00      	cmp	r4, #0
    23da:	db12      	blt.n	2402 <flashcalw_issue_command+0x3a>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    23dc:	0224      	lsls	r4, r4, #8
    23de:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    23e2:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
		tempo = (FLASHCALW_FCMD_KEY_KEY
    23e6:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    23ea:	432c      	orrs	r4, r5
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    23ec:	4b09      	ldr	r3, [pc, #36]	; (2414 <flashcalw_issue_command+0x4c>)
    23ee:	605c      	str	r4, [r3, #4]
	return HFLASHC->FLASHCALW_FSR &
    23f0:	689b      	ldr	r3, [r3, #8]
    23f2:	f003 030c 	and.w	r3, r3, #12
	flashcalw_error_status = flashcalw_get_error_status();
    23f6:	4a08      	ldr	r2, [pc, #32]	; (2418 <flashcalw_issue_command+0x50>)
    23f8:	6013      	str	r3, [r2, #0]
	flashcalw_wait_until_ready();
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <flashcalw_issue_command+0x48>)
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	4798      	blx	r3
    2400:	bd38      	pop	{r3, r4, r5, pc}
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    2402:	f023 043f 	bic.w	r4, r3, #63	; 0x3f
    2406:	f044 4425 	orr.w	r4, r4, #2768240640	; 0xa5000000
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    240a:	432c      	orrs	r4, r5
    240c:	e7ee      	b.n	23ec <flashcalw_issue_command+0x24>
    240e:	bf00      	nop
    2410:	20000100 	.word	0x20000100
    2414:	400a0000 	.word	0x400a0000
    2418:	20000be0 	.word	0x20000be0

0000241c <flashcalw_set_flash_waitstate_and_readmode>:
{
    241c:	b508      	push	{r3, lr}
	if (ps_value == 0) {
    241e:	2900      	cmp	r1, #0
    2420:	d12d      	bne.n	247e <flashcalw_set_flash_waitstate_and_readmode+0x62>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    2422:	4b1d      	ldr	r3, [pc, #116]	; (2498 <flashcalw_set_flash_waitstate_and_readmode+0x7c>)
    2424:	4298      	cmp	r0, r3
    2426:	d914      	bls.n	2452 <flashcalw_set_flash_waitstate_and_readmode+0x36>
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    2428:	4b1c      	ldr	r3, [pc, #112]	; (249c <flashcalw_set_flash_waitstate_and_readmode+0x80>)
    242a:	4298      	cmp	r0, r3
    242c:	d808      	bhi.n	2440 <flashcalw_set_flash_waitstate_and_readmode+0x24>
				flashcalw_set_wait_state(1);
    242e:	2001      	movs	r0, #1
    2430:	4b1b      	ldr	r3, [pc, #108]	; (24a0 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2432:	4798      	blx	r3
				flashcalw_issue_command(
    2434:	f04f 31ff 	mov.w	r1, #4294967295
    2438:	2011      	movs	r0, #17
    243a:	4b1a      	ldr	r3, [pc, #104]	; (24a4 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    243c:	4798      	blx	r3
    243e:	bd08      	pop	{r3, pc}
				flashcalw_set_wait_state(1);
    2440:	2001      	movs	r0, #1
    2442:	4b17      	ldr	r3, [pc, #92]	; (24a0 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2444:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    2446:	f04f 31ff 	mov.w	r1, #4294967295
    244a:	2010      	movs	r0, #16
    244c:	4b15      	ldr	r3, [pc, #84]	; (24a4 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    244e:	4798      	blx	r3
    2450:	bd08      	pop	{r3, pc}
			if((is_fwu_enabled == true) &&
    2452:	b112      	cbz	r2, 245a <flashcalw_set_flash_waitstate_and_readmode+0x3e>
    2454:	4b14      	ldr	r3, [pc, #80]	; (24a8 <flashcalw_set_flash_waitstate_and_readmode+0x8c>)
    2456:	4298      	cmp	r0, r3
    2458:	d908      	bls.n	246c <flashcalw_set_flash_waitstate_and_readmode+0x50>
				flashcalw_set_wait_state(0);
    245a:	2000      	movs	r0, #0
    245c:	4b10      	ldr	r3, [pc, #64]	; (24a0 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    245e:	4798      	blx	r3
				flashcalw_issue_command(
    2460:	f04f 31ff 	mov.w	r1, #4294967295
    2464:	2011      	movs	r0, #17
    2466:	4b0f      	ldr	r3, [pc, #60]	; (24a4 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    2468:	4798      	blx	r3
    246a:	bd08      	pop	{r3, pc}
				flashcalw_set_wait_state(1);
    246c:	2001      	movs	r0, #1
    246e:	4b0c      	ldr	r3, [pc, #48]	; (24a0 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2470:	4798      	blx	r3
				flashcalw_issue_command(
    2472:	f04f 31ff 	mov.w	r1, #4294967295
    2476:	2011      	movs	r0, #17
    2478:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    247a:	4798      	blx	r3
    247c:	bd08      	pop	{r3, pc}
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    247e:	4b0b      	ldr	r3, [pc, #44]	; (24ac <flashcalw_set_flash_waitstate_and_readmode+0x90>)
    2480:	4298      	cmp	r0, r3
			flashcalw_set_wait_state(1);
    2482:	bf8c      	ite	hi
    2484:	2001      	movhi	r0, #1
			flashcalw_set_wait_state(0);
    2486:	2000      	movls	r0, #0
    2488:	4b05      	ldr	r3, [pc, #20]	; (24a0 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    248a:	4798      	blx	r3
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    248c:	f04f 31ff 	mov.w	r1, #4294967295
    2490:	2011      	movs	r0, #17
    2492:	4b04      	ldr	r3, [pc, #16]	; (24a4 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    2494:	4798      	blx	r3
    2496:	bd08      	pop	{r3, pc}
    2498:	0112a880 	.word	0x0112a880
    249c:	02255100 	.word	0x02255100
    24a0:	0000238d 	.word	0x0000238d
    24a4:	000023c9 	.word	0x000023c9
    24a8:	00b71b00 	.word	0x00b71b00
    24ac:	007a1200 	.word	0x007a1200

000024b0 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    24b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24b4:	b083      	sub	sp, #12
    24b6:	9101      	str	r1, [sp, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    24b8:	0247      	lsls	r7, r0, #9
    24ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    24be:	f507 2761 	add.w	r7, r7, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    24c2:	f8d7 a0d0 	ldr.w	sl, [r7, #208]	; 0xd0

	for (i = 0; i < gpio_nb_sources; i++) {
    24c6:	4b15      	ldr	r3, [pc, #84]	; (251c <gpio_common_handler+0x6c>)
    24c8:	681b      	ldr	r3, [r3, #0]
    24ca:	b1fb      	cbz	r3, 250c <gpio_common_handler+0x5c>
    24cc:	4606      	mov	r6, r0
    24ce:	4d14      	ldr	r5, [pc, #80]	; (2520 <gpio_common_handler+0x70>)
    24d0:	2400      	movs	r4, #0
		pin = gpio_int_sources[i].pin;
    24d2:	46a9      	mov	r9, r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    24d4:	f04f 0b01 	mov.w	fp, #1
	for (i = 0; i < gpio_nb_sources; i++) {
    24d8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 251c <gpio_common_handler+0x6c>
    24dc:	e005      	b.n	24ea <gpio_common_handler+0x3a>
    24de:	3401      	adds	r4, #1
    24e0:	3508      	adds	r5, #8
    24e2:	f8d8 3000 	ldr.w	r3, [r8]
    24e6:	42a3      	cmp	r3, r4
    24e8:	d910      	bls.n	250c <gpio_common_handler+0x5c>
		pin = gpio_int_sources[i].pin;
    24ea:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    24ee:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
    24f2:	d1f4      	bne.n	24de <gpio_common_handler+0x2e>
    24f4:	f003 031f 	and.w	r3, r3, #31
    24f8:	fa0b f303 	lsl.w	r3, fp, r3
    24fc:	ea13 0f0a 	tst.w	r3, sl
    2500:	d0ed      	beq.n	24de <gpio_common_handler+0x2e>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    2502:	686b      	ldr	r3, [r5, #4]
    2504:	2b00      	cmp	r3, #0
    2506:	d0ea      	beq.n	24de <gpio_common_handler+0x2e>
				gpio_int_sources[i].callback();
    2508:	4798      	blx	r3
    250a:	e7e8      	b.n	24de <gpio_common_handler+0x2e>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	ea0a 0303 	and.w	r3, sl, r3
    2512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
}
    2516:	b003      	add	sp, #12
    2518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    251c:	20000c14 	.word	0x20000c14
    2520:	20000be4 	.word	0x20000be4

00002524 <gpio_set_pin_callback>:
{
    2524:	b470      	push	{r4, r5, r6}
	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    2526:	4b26      	ldr	r3, [pc, #152]	; (25c0 <gpio_set_pin_callback+0x9c>)
    2528:	681c      	ldr	r4, [r3, #0]
    252a:	2c05      	cmp	r4, #5
    252c:	d83f      	bhi.n	25ae <gpio_set_pin_callback+0x8a>
    252e:	f000 051f 	and.w	r5, r0, #31
    2532:	2301      	movs	r3, #1
    2534:	40ab      	lsls	r3, r5
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    2536:	f013 0fff 	tst.w	r3, #255	; 0xff
    253a:	d136      	bne.n	25aa <gpio_set_pin_callback+0x86>
    253c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2540:	d12f      	bne.n	25a2 <gpio_set_pin_callback+0x7e>
    2542:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    2546:	d12e      	bne.n	25a6 <gpio_set_pin_callback+0x82>
    2548:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
	for (i = 0; i < 4; i++) {
    254c:	2b00      	cmp	r3, #0
    254e:	bf0c      	ite	eq
    2550:	2304      	moveq	r3, #4
    2552:	2303      	movne	r3, #3
	return pin >> 5;
    2554:	0945      	lsrs	r5, r0, #5
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    2556:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    255a:	3319      	adds	r3, #25
    255c:	b2db      	uxtb	r3, r3
    255e:	b25e      	sxtb	r6, r3
	gpio_int_sources[gpio_nb_sources].pin = pin;
    2560:	4d18      	ldr	r5, [pc, #96]	; (25c4 <gpio_set_pin_callback+0xa0>)
    2562:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    2566:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    256a:	6061      	str	r1, [r4, #4]
  if ((int32_t)(IRQn) >= 0)
    256c:	2e00      	cmp	r6, #0
    256e:	db20      	blt.n	25b2 <gpio_set_pin_callback+0x8e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2570:	0970      	lsrs	r0, r6, #5
    2572:	f003 031f 	and.w	r3, r3, #31
    2576:	2101      	movs	r1, #1
    2578:	fa01 f303 	lsl.w	r3, r1, r3
    257c:	4912      	ldr	r1, [pc, #72]	; (25c8 <gpio_set_pin_callback+0xa4>)
    257e:	f100 0460 	add.w	r4, r0, #96	; 0x60
    2582:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2586:	0112      	lsls	r2, r2, #4
    2588:	b2d2      	uxtb	r2, r2
    258a:	440e      	add	r6, r1
    258c:	f886 2300 	strb.w	r2, [r6, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2590:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	gpio_nb_sources++;
    2594:	4a0a      	ldr	r2, [pc, #40]	; (25c0 <gpio_set_pin_callback+0x9c>)
    2596:	6813      	ldr	r3, [r2, #0]
    2598:	3301      	adds	r3, #1
    259a:	6013      	str	r3, [r2, #0]
	return true;
    259c:	2001      	movs	r0, #1
}
    259e:	bc70      	pop	{r4, r5, r6}
    25a0:	4770      	bx	lr
	for (i = 0; i < 4; i++) {
    25a2:	2301      	movs	r3, #1
    25a4:	e7d6      	b.n	2554 <gpio_set_pin_callback+0x30>
    25a6:	2302      	movs	r3, #2
    25a8:	e7d4      	b.n	2554 <gpio_set_pin_callback+0x30>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    25aa:	2300      	movs	r3, #0
    25ac:	e7d2      	b.n	2554 <gpio_set_pin_callback+0x30>
		return false;
    25ae:	2000      	movs	r0, #0
    25b0:	e7f5      	b.n	259e <gpio_set_pin_callback+0x7a>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25b2:	f003 030f 	and.w	r3, r3, #15
    25b6:	0112      	lsls	r2, r2, #4
    25b8:	b2d2      	uxtb	r2, r2
    25ba:	4904      	ldr	r1, [pc, #16]	; (25cc <gpio_set_pin_callback+0xa8>)
    25bc:	54ca      	strb	r2, [r1, r3]
    25be:	e7e9      	b.n	2594 <gpio_set_pin_callback+0x70>
    25c0:	20000c14 	.word	0x20000c14
    25c4:	20000be4 	.word	0x20000be4
    25c8:	e000e100 	.word	0xe000e100
    25cc:	e000ed14 	.word	0xe000ed14

000025d0 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    25d0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    25d2:	21ff      	movs	r1, #255	; 0xff
    25d4:	2000      	movs	r0, #0
    25d6:	4b01      	ldr	r3, [pc, #4]	; (25dc <GPIO_0_Handler+0xc>)
    25d8:	4798      	blx	r3
    25da:	bd08      	pop	{r3, pc}
    25dc:	000024b1 	.word	0x000024b1

000025e0 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    25e0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    25e2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    25e6:	2000      	movs	r0, #0
    25e8:	4b01      	ldr	r3, [pc, #4]	; (25f0 <GPIO_1_Handler+0x10>)
    25ea:	4798      	blx	r3
    25ec:	bd08      	pop	{r3, pc}
    25ee:	bf00      	nop
    25f0:	000024b1 	.word	0x000024b1

000025f4 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    25f4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    25f6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    25fa:	2000      	movs	r0, #0
    25fc:	4b01      	ldr	r3, [pc, #4]	; (2604 <GPIO_2_Handler+0x10>)
    25fe:	4798      	blx	r3
    2600:	bd08      	pop	{r3, pc}
    2602:	bf00      	nop
    2604:	000024b1 	.word	0x000024b1

00002608 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    2608:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    260a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    260e:	2000      	movs	r0, #0
    2610:	4b01      	ldr	r3, [pc, #4]	; (2618 <GPIO_3_Handler+0x10>)
    2612:	4798      	blx	r3
    2614:	bd08      	pop	{r3, pc}
    2616:	bf00      	nop
    2618:	000024b1 	.word	0x000024b1

0000261c <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    261c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    261e:	21ff      	movs	r1, #255	; 0xff
    2620:	2001      	movs	r0, #1
    2622:	4b01      	ldr	r3, [pc, #4]	; (2628 <GPIO_4_Handler+0xc>)
    2624:	4798      	blx	r3
    2626:	bd08      	pop	{r3, pc}
    2628:	000024b1 	.word	0x000024b1

0000262c <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    262c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    262e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2632:	2001      	movs	r0, #1
    2634:	4b01      	ldr	r3, [pc, #4]	; (263c <GPIO_5_Handler+0x10>)
    2636:	4798      	blx	r3
    2638:	bd08      	pop	{r3, pc}
    263a:	bf00      	nop
    263c:	000024b1 	.word	0x000024b1

00002640 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    2640:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    2642:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2646:	2001      	movs	r0, #1
    2648:	4b01      	ldr	r3, [pc, #4]	; (2650 <GPIO_6_Handler+0x10>)
    264a:	4798      	blx	r3
    264c:	bd08      	pop	{r3, pc}
    264e:	bf00      	nop
    2650:	000024b1 	.word	0x000024b1

00002654 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    2654:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    2656:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    265a:	2001      	movs	r0, #1
    265c:	4b01      	ldr	r3, [pc, #4]	; (2664 <GPIO_7_Handler+0x10>)
    265e:	4798      	blx	r3
    2660:	bd08      	pop	{r3, pc}
    2662:	bf00      	nop
    2664:	000024b1 	.word	0x000024b1

00002668 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    2668:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    266a:	21ff      	movs	r1, #255	; 0xff
    266c:	2002      	movs	r0, #2
    266e:	4b01      	ldr	r3, [pc, #4]	; (2674 <GPIO_8_Handler+0xc>)
    2670:	4798      	blx	r3
    2672:	bd08      	pop	{r3, pc}
    2674:	000024b1 	.word	0x000024b1

00002678 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    2678:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    267a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    267e:	2002      	movs	r0, #2
    2680:	4b01      	ldr	r3, [pc, #4]	; (2688 <GPIO_9_Handler+0x10>)
    2682:	4798      	blx	r3
    2684:	bd08      	pop	{r3, pc}
    2686:	bf00      	nop
    2688:	000024b1 	.word	0x000024b1

0000268c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    268c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    268e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2692:	2002      	movs	r0, #2
    2694:	4b01      	ldr	r3, [pc, #4]	; (269c <GPIO_10_Handler+0x10>)
    2696:	4798      	blx	r3
    2698:	bd08      	pop	{r3, pc}
    269a:	bf00      	nop
    269c:	000024b1 	.word	0x000024b1

000026a0 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    26a0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    26a2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    26a6:	2002      	movs	r0, #2
    26a8:	4b01      	ldr	r3, [pc, #4]	; (26b0 <GPIO_11_Handler+0x10>)
    26aa:	4798      	blx	r3
    26ac:	bd08      	pop	{r3, pc}
    26ae:	bf00      	nop
    26b0:	000024b1 	.word	0x000024b1

000026b4 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
    26b4:	2810      	cmp	r0, #16
    26b6:	bf28      	it	cs
    26b8:	2000      	movcs	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    26ba:	0180      	lsls	r0, r0, #6
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
    26bc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    26c0:	f500 2022 	add.w	r0, r0, #663552	; 0xa2000
    26c4:	4770      	bx	lr
	...

000026c8 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    26c8:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    26ca:	4b0d      	ldr	r3, [pc, #52]	; (2700 <pdca_get_channel_status+0x38>)
    26cc:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    26ce:	69c2      	ldr	r2, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    26d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    26d2:	f012 0f01 	tst.w	r2, #1
    26d6:	d010      	beq.n	26fa <pdca_get_channel_status+0x32>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    26d8:	f013 0f04 	tst.w	r3, #4
    26dc:	d001      	beq.n	26e2 <pdca_get_channel_status+0x1a>
			return PDCA_CH_TRANSFER_ERROR;
    26de:	2004      	movs	r0, #4
    26e0:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    26e2:	f013 0f02 	tst.w	r3, #2
    26e6:	d001      	beq.n	26ec <pdca_get_channel_status+0x24>
			return PDCA_CH_TRANSFER_COMPLETED;
    26e8:	2003      	movs	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
    26ea:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    26ec:	f003 0301 	and.w	r3, r3, #1
		return PDCA_CH_BUSY;
    26f0:	2b00      	cmp	r3, #0
    26f2:	bf14      	ite	ne
    26f4:	2002      	movne	r0, #2
    26f6:	2001      	moveq	r0, #1
    26f8:	bd08      	pop	{r3, pc}
		return PDCA_CH_FREE;
    26fa:	2000      	movs	r0, #0
    26fc:	bd08      	pop	{r3, pc}
    26fe:	bf00      	nop
    2700:	000026b5 	.word	0x000026b5

00002704 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    2704:	b510      	push	{r4, lr}
    2706:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    2708:	4b03      	ldr	r3, [pc, #12]	; (2718 <pdca_channel_interrupt+0x14>)
    270a:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
    270c:	4b03      	ldr	r3, [pc, #12]	; (271c <pdca_channel_interrupt+0x18>)
    270e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    2712:	b103      	cbz	r3, 2716 <pdca_channel_interrupt+0x12>
		pdca_callback_pointer[pdca_ch_number] (status);
    2714:	4798      	blx	r3
    2716:	bd10      	pop	{r4, pc}
    2718:	000026c9 	.word	0x000026c9
    271c:	20000dc0 	.word	0x20000dc0

00002720 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    2720:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
    2722:	2000      	movs	r0, #0
    2724:	4b01      	ldr	r3, [pc, #4]	; (272c <PDCA_0_Handler+0xc>)
    2726:	4798      	blx	r3
    2728:	bd08      	pop	{r3, pc}
    272a:	bf00      	nop
    272c:	00002705 	.word	0x00002705

00002730 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    2730:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
    2732:	2001      	movs	r0, #1
    2734:	4b01      	ldr	r3, [pc, #4]	; (273c <PDCA_1_Handler+0xc>)
    2736:	4798      	blx	r3
    2738:	bd08      	pop	{r3, pc}
    273a:	bf00      	nop
    273c:	00002705 	.word	0x00002705

00002740 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    2740:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
    2742:	2002      	movs	r0, #2
    2744:	4b01      	ldr	r3, [pc, #4]	; (274c <PDCA_2_Handler+0xc>)
    2746:	4798      	blx	r3
    2748:	bd08      	pop	{r3, pc}
    274a:	bf00      	nop
    274c:	00002705 	.word	0x00002705

00002750 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    2750:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
    2752:	2003      	movs	r0, #3
    2754:	4b01      	ldr	r3, [pc, #4]	; (275c <PDCA_3_Handler+0xc>)
    2756:	4798      	blx	r3
    2758:	bd08      	pop	{r3, pc}
    275a:	bf00      	nop
    275c:	00002705 	.word	0x00002705

00002760 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    2760:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
    2762:	2004      	movs	r0, #4
    2764:	4b01      	ldr	r3, [pc, #4]	; (276c <PDCA_4_Handler+0xc>)
    2766:	4798      	blx	r3
    2768:	bd08      	pop	{r3, pc}
    276a:	bf00      	nop
    276c:	00002705 	.word	0x00002705

00002770 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    2770:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
    2772:	2005      	movs	r0, #5
    2774:	4b01      	ldr	r3, [pc, #4]	; (277c <PDCA_5_Handler+0xc>)
    2776:	4798      	blx	r3
    2778:	bd08      	pop	{r3, pc}
    277a:	bf00      	nop
    277c:	00002705 	.word	0x00002705

00002780 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    2780:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
    2782:	2006      	movs	r0, #6
    2784:	4b01      	ldr	r3, [pc, #4]	; (278c <PDCA_6_Handler+0xc>)
    2786:	4798      	blx	r3
    2788:	bd08      	pop	{r3, pc}
    278a:	bf00      	nop
    278c:	00002705 	.word	0x00002705

00002790 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    2790:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
    2792:	2007      	movs	r0, #7
    2794:	4b01      	ldr	r3, [pc, #4]	; (279c <PDCA_7_Handler+0xc>)
    2796:	4798      	blx	r3
    2798:	bd08      	pop	{r3, pc}
    279a:	bf00      	nop
    279c:	00002705 	.word	0x00002705

000027a0 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    27a0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
    27a2:	2008      	movs	r0, #8
    27a4:	4b01      	ldr	r3, [pc, #4]	; (27ac <PDCA_8_Handler+0xc>)
    27a6:	4798      	blx	r3
    27a8:	bd08      	pop	{r3, pc}
    27aa:	bf00      	nop
    27ac:	00002705 	.word	0x00002705

000027b0 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    27b0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
    27b2:	2009      	movs	r0, #9
    27b4:	4b01      	ldr	r3, [pc, #4]	; (27bc <PDCA_9_Handler+0xc>)
    27b6:	4798      	blx	r3
    27b8:	bd08      	pop	{r3, pc}
    27ba:	bf00      	nop
    27bc:	00002705 	.word	0x00002705

000027c0 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    27c0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
    27c2:	200a      	movs	r0, #10
    27c4:	4b01      	ldr	r3, [pc, #4]	; (27cc <PDCA_10_Handler+0xc>)
    27c6:	4798      	blx	r3
    27c8:	bd08      	pop	{r3, pc}
    27ca:	bf00      	nop
    27cc:	00002705 	.word	0x00002705

000027d0 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    27d0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
    27d2:	200b      	movs	r0, #11
    27d4:	4b01      	ldr	r3, [pc, #4]	; (27dc <PDCA_11_Handler+0xc>)
    27d6:	4798      	blx	r3
    27d8:	bd08      	pop	{r3, pc}
    27da:	bf00      	nop
    27dc:	00002705 	.word	0x00002705

000027e0 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    27e0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
    27e2:	200c      	movs	r0, #12
    27e4:	4b01      	ldr	r3, [pc, #4]	; (27ec <PDCA_12_Handler+0xc>)
    27e6:	4798      	blx	r3
    27e8:	bd08      	pop	{r3, pc}
    27ea:	bf00      	nop
    27ec:	00002705 	.word	0x00002705

000027f0 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    27f0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
    27f2:	200d      	movs	r0, #13
    27f4:	4b01      	ldr	r3, [pc, #4]	; (27fc <PDCA_13_Handler+0xc>)
    27f6:	4798      	blx	r3
    27f8:	bd08      	pop	{r3, pc}
    27fa:	bf00      	nop
    27fc:	00002705 	.word	0x00002705

00002800 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    2800:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
    2802:	200e      	movs	r0, #14
    2804:	4b01      	ldr	r3, [pc, #4]	; (280c <PDCA_14_Handler+0xc>)
    2806:	4798      	blx	r3
    2808:	bd08      	pop	{r3, pc}
    280a:	bf00      	nop
    280c:	00002705 	.word	0x00002705

00002810 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    2810:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
    2812:	200f      	movs	r0, #15
    2814:	4b01      	ldr	r3, [pc, #4]	; (281c <PDCA_15_Handler+0xc>)
    2816:	4798      	blx	r3
    2818:	bd08      	pop	{r3, pc}
    281a:	bf00      	nop
    281c:	00002705 	.word	0x00002705

00002820 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    2820:	4b08      	ldr	r3, [pc, #32]	; (2844 <find_twim_channel_num+0x24>)
    2822:	4298      	cmp	r0, r3
    2824:	d00a      	beq.n	283c <find_twim_channel_num+0x1c>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    2826:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    282a:	4298      	cmp	r0, r3
    282c:	d008      	beq.n	2840 <find_twim_channel_num+0x20>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    282e:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    2832:	4298      	cmp	r0, r3
    2834:	bf14      	ite	ne
    2836:	2000      	movne	r0, #0
    2838:	2001      	moveq	r0, #1
    283a:	4770      	bx	lr
		return 3;
    283c:	2003      	movs	r0, #3
    283e:	4770      	bx	lr
		return 2;
    2840:	2002      	movs	r0, #2
		return 0;
	}
#endif

	return 0;
}
    2842:	4770      	bx	lr
    2844:	4007c000 	.word	0x4007c000

00002848 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
    2848:	b510      	push	{r4, lr}
    284a:	b082      	sub	sp, #8
    284c:	4604      	mov	r4, r0
#define NCMDR_FREE_WAIT    2000
	volatile uint32_t ncmdr_wait = NCMDR_FREE_WAIT;
    284e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2852:	9301      	str	r3, [sp, #4]

	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
    2854:	4bb2      	ldr	r3, [pc, #712]	; (2b20 <twim_default_callback+0x2d8>)
    2856:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
    2858:	69e3      	ldr	r3, [r4, #28]
	status &= twim_it_mask[twim_ch];
    285a:	4ab2      	ldr	r2, [pc, #712]	; (2b24 <twim_default_callback+0x2dc>)
    285c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2860:	4013      	ands	r3, r2
	uint32_t cmdr_reg;

	/* This is a NACK */
	if (status & TWIM_SR_STD_MASK) {
    2862:	f413 6fa0 	tst.w	r3, #1280	; 0x500
    2866:	d01a      	beq.n	289e <twim_default_callback+0x56>
		/*
		 * If we get a NACK, clear the valid bit in CMDR,
		 * otherwise the command will be re-sent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
    2868:	f403 7380 	and.w	r3, r3, #256	; 0x100
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
    286c:	2b00      	cmp	r3, #0
    286e:	bf14      	ite	ne
    2870:	f06f 0203 	mvnne.w	r2, #3
    2874:	f06f 0201 	mvneq.w	r2, #1
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
    2878:	4bab      	ldr	r3, [pc, #684]	; (2b28 <twim_default_callback+0x2e0>)
    287a:	541a      	strb	r2, [r3, r0]
		twim->TWIM_NCMDR &= ~TWIM_NCMDR_VALID;
    287c:	6923      	ldr	r3, [r4, #16]
    287e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2882:	6123      	str	r3, [r4, #16]
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
    2884:	68e3      	ldr	r3, [r4, #12]
    2886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    288a:	60e3      	str	r3, [r4, #12]
		twim->TWIM_SCR = ~0UL;
    288c:	f04f 33ff 	mov.w	r3, #4294967295
    2890:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
    2892:	6263      	str	r3, [r4, #36]	; 0x24
		twim_next_cmd_xfer_valid[twim_ch] = false;
    2894:	2200      	movs	r2, #0
    2896:	4ba5      	ldr	r3, [pc, #660]	; (2b2c <twim_default_callback+0x2e4>)
    2898:	541a      	strb	r2, [r3, r0]
	else if (status & TWIM_SR_CCOMP) {
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
	}
#endif
}
    289a:	b002      	add	sp, #8
    289c:	bd10      	pop	{r4, pc}
	else if (status & TWIM_SR_RXRDY) {
    289e:	f013 0f01 	tst.w	r3, #1
    28a2:	d07b      	beq.n	299c <twim_default_callback+0x154>
		*p_twim_rx_data[twim_ch] = twim->TWIM_RHR;
    28a4:	49a2      	ldr	r1, [pc, #648]	; (2b30 <twim_default_callback+0x2e8>)
    28a6:	6962      	ldr	r2, [r4, #20]
    28a8:	b2d2      	uxtb	r2, r2
    28aa:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    28ae:	f803 2b01 	strb.w	r2, [r3], #1
		p_twim_rx_data[twim_ch]++;
    28b2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		twim_rx_nb_bytes[twim_ch]--;
    28b6:	4b9f      	ldr	r3, [pc, #636]	; (2b34 <twim_default_callback+0x2ec>)
    28b8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    28bc:	3a01      	subs	r2, #1
    28be:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (twim_rx_nb_bytes[twim_ch] == 0) {
    28c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d1e7      	bne.n	289a <twim_default_callback+0x52>
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    28ca:	4b98      	ldr	r3, [pc, #608]	; (2b2c <twim_default_callback+0x2e4>)
    28cc:	5c1b      	ldrb	r3, [r3, r0]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d054      	beq.n	297c <twim_default_callback+0x134>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    28d2:	4b99      	ldr	r3, [pc, #612]	; (2b38 <twim_default_callback+0x2f0>)
    28d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    28d8:	2b00      	cmp	r3, #0
    28da:	d04f      	beq.n	297c <twim_default_callback+0x134>
				p_twim_rx_data[twim_ch] = p_twim_next_rx_data[twim_ch];
    28dc:	4b97      	ldr	r3, [pc, #604]	; (2b3c <twim_default_callback+0x2f4>)
    28de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    28e2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    28e6:	4a94      	ldr	r2, [pc, #592]	; (2b38 <twim_default_callback+0x2f0>)
    28e8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    28ec:	2aff      	cmp	r2, #255	; 0xff
    28ee:	d92d      	bls.n	294c <twim_default_callback+0x104>
					twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    28f0:	21ff      	movs	r1, #255	; 0xff
    28f2:	4a90      	ldr	r2, [pc, #576]	; (2b34 <twim_default_callback+0x2ec>)
    28f4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					p_twim_next_rx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    28f8:	440b      	add	r3, r1
    28fa:	4a90      	ldr	r2, [pc, #576]	; (2b3c <twim_default_callback+0x2f4>)
    28fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    2900:	4a8d      	ldr	r2, [pc, #564]	; (2b38 <twim_default_callback+0x2f0>)
    2902:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2906:	3bff      	subs	r3, #255	; 0xff
    2908:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
    290c:	4b8a      	ldr	r3, [pc, #552]	; (2b38 <twim_default_callback+0x2f0>)
    290e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2912:	b37b      	cbz	r3, 2974 <twim_default_callback+0x12c>
					ncmdr_wait = NCMDR_FREE_WAIT;
    2914:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2918:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    291a:	6923      	ldr	r3, [r4, #16]
    291c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2920:	d004      	beq.n	292c <twim_default_callback+0xe4>
    2922:	9b01      	ldr	r3, [sp, #4]
    2924:	1e5a      	subs	r2, r3, #1
    2926:	9201      	str	r2, [sp, #4]
    2928:	2b00      	cmp	r3, #0
    292a:	d1f6      	bne.n	291a <twim_default_callback+0xd2>
					cmdr_reg = twim->TWIM_CMDR;
    292c:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    292e:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    2932:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2936:	4a80      	ldr	r2, [pc, #512]	; (2b38 <twim_default_callback+0x2f0>)
    2938:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    293c:	2aff      	cmp	r2, #255	; 0xff
    293e:	d90f      	bls.n	2960 <twim_default_callback+0x118>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    2940:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    2944:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
					twim->TWIM_NCMDR = cmdr_reg;
    2948:	6123      	str	r3, [r4, #16]
    294a:	e7a6      	b.n	289a <twim_default_callback+0x52>
					twim_rx_nb_bytes[twim_ch] = twim_next_rx_nb_bytes[twim_ch];
    294c:	4b7a      	ldr	r3, [pc, #488]	; (2b38 <twim_default_callback+0x2f0>)
    294e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    2952:	4a78      	ldr	r2, [pc, #480]	; (2b34 <twim_default_callback+0x2ec>)
    2954:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] = 0;
    2958:	2200      	movs	r2, #0
    295a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    295e:	e7d5      	b.n	290c <twim_default_callback+0xc4>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    2960:	4a75      	ldr	r2, [pc, #468]	; (2b38 <twim_default_callback+0x2f0>)
    2962:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    296a:	0412      	lsls	r2, r2, #16
    296c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2970:	4313      	orrs	r3, r2
    2972:	e7e9      	b.n	2948 <twim_default_callback+0x100>
					twim_next_cmd_xfer_valid[twim_ch] = false;
    2974:	2200      	movs	r2, #0
    2976:	4b6d      	ldr	r3, [pc, #436]	; (2b2c <twim_default_callback+0x2e4>)
    2978:	541a      	strb	r2, [r3, r0]
    297a:	e78e      	b.n	289a <twim_default_callback+0x52>
				twim->TWIM_IDR = TWIM_IDR_RXRDY;
    297c:	2301      	movs	r3, #1
    297e:	6263      	str	r3, [r4, #36]	; 0x24
				twim_next_cmd_xfer_valid[twim_ch] = false;
    2980:	2200      	movs	r2, #0
    2982:	4b6a      	ldr	r3, [pc, #424]	; (2b2c <twim_default_callback+0x2e4>)
    2984:	541a      	strb	r2, [r3, r0]
				twim->TWIM_SCR = TWIM_SCR_CCOMP;
    2986:	2308      	movs	r3, #8
    2988:	62e3      	str	r3, [r4, #44]	; 0x2c
				twim->TWIM_IER = TWIM_IER_CCOMP;
    298a:	6223      	str	r3, [r4, #32]
				twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    298c:	4a65      	ldr	r2, [pc, #404]	; (2b24 <twim_default_callback+0x2dc>)
    298e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2992:	f043 0308 	orr.w	r3, r3, #8
    2996:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    299a:	e77e      	b.n	289a <twim_default_callback+0x52>
	else if (status & TWIM_SR_TXRDY) {
    299c:	f013 0f02 	tst.w	r3, #2
    29a0:	f000 80b5 	beq.w	2b0e <twim_default_callback+0x2c6>
		if (twim_tx_nb_bytes[twim_ch] == 0) {
    29a4:	4b66      	ldr	r3, [pc, #408]	; (2b40 <twim_default_callback+0x2f8>)
    29a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    29aa:	b99b      	cbnz	r3, 29d4 <twim_default_callback+0x18c>
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
    29ac:	2302      	movs	r3, #2
    29ae:	6263      	str	r3, [r4, #36]	; 0x24
			if (twim_next_rx_nb_bytes[twim_ch] == 0) {
    29b0:	4b61      	ldr	r3, [pc, #388]	; (2b38 <twim_default_callback+0x2f0>)
    29b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    29b6:	b913      	cbnz	r3, 29be <twim_default_callback+0x176>
				twim_next_cmd_xfer_valid[twim_ch] = false;
    29b8:	2200      	movs	r2, #0
    29ba:	4b5c      	ldr	r3, [pc, #368]	; (2b2c <twim_default_callback+0x2e4>)
    29bc:	541a      	strb	r2, [r3, r0]
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
    29be:	2308      	movs	r3, #8
    29c0:	62e3      	str	r3, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
    29c2:	6223      	str	r3, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    29c4:	4a57      	ldr	r2, [pc, #348]	; (2b24 <twim_default_callback+0x2dc>)
    29c6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    29ca:	f043 0308 	orr.w	r3, r3, #8
    29ce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    29d2:	e762      	b.n	289a <twim_default_callback+0x52>
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
    29d4:	4a5b      	ldr	r2, [pc, #364]	; (2b44 <twim_default_callback+0x2fc>)
    29d6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    29da:	1c59      	adds	r1, r3, #1
    29dc:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	b2db      	uxtb	r3, r3
    29e4:	61a3      	str	r3, [r4, #24]
			twim_tx_nb_bytes[twim_ch]--;
    29e6:	4b56      	ldr	r3, [pc, #344]	; (2b40 <twim_default_callback+0x2f8>)
    29e8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    29ec:	3a01      	subs	r2, #1
    29ee:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
    29f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    29f6:	2b00      	cmp	r3, #0
    29f8:	f47f af4f 	bne.w	289a <twim_default_callback+0x52>
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    29fc:	4b4b      	ldr	r3, [pc, #300]	; (2b2c <twim_default_callback+0x2e4>)
    29fe:	5c1b      	ldrb	r3, [r3, r0]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d053      	beq.n	2aac <twim_default_callback+0x264>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
    2a04:	4b50      	ldr	r3, [pc, #320]	; (2b48 <twim_default_callback+0x300>)
    2a06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d04e      	beq.n	2aac <twim_default_callback+0x264>
					p_twim_tx_data[twim_ch] = p_twim_next_tx_data[twim_ch];
    2a0e:	4b4f      	ldr	r3, [pc, #316]	; (2b4c <twim_default_callback+0x304>)
    2a10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2a14:	4a4b      	ldr	r2, [pc, #300]	; (2b44 <twim_default_callback+0x2fc>)
    2a16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2a1a:	4a4b      	ldr	r2, [pc, #300]	; (2b48 <twim_default_callback+0x300>)
    2a1c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2a20:	2aff      	cmp	r2, #255	; 0xff
    2a22:	d92b      	bls.n	2a7c <twim_default_callback+0x234>
						twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    2a24:	21ff      	movs	r1, #255	; 0xff
    2a26:	4a46      	ldr	r2, [pc, #280]	; (2b40 <twim_default_callback+0x2f8>)
    2a28:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						p_twim_next_tx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    2a2c:	440b      	add	r3, r1
    2a2e:	4a47      	ldr	r2, [pc, #284]	; (2b4c <twim_default_callback+0x304>)
    2a30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    2a34:	4a44      	ldr	r2, [pc, #272]	; (2b48 <twim_default_callback+0x300>)
    2a36:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2a3a:	3bff      	subs	r3, #255	; 0xff
    2a3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
    2a40:	4b41      	ldr	r3, [pc, #260]	; (2b48 <twim_default_callback+0x300>)
    2a42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2a46:	b36b      	cbz	r3, 2aa4 <twim_default_callback+0x25c>
						ncmdr_wait = NCMDR_FREE_WAIT;
    2a48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2a4c:	9301      	str	r3, [sp, #4]
						while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    2a4e:	6923      	ldr	r3, [r4, #16]
    2a50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2a54:	d004      	beq.n	2a60 <twim_default_callback+0x218>
    2a56:	9b01      	ldr	r3, [sp, #4]
    2a58:	1e5a      	subs	r2, r3, #1
    2a5a:	9201      	str	r2, [sp, #4]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d1f6      	bne.n	2a4e <twim_default_callback+0x206>
						cmdr_reg = twim->TWIM_CMDR;
    2a60:	68e3      	ldr	r3, [r4, #12]
						cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
    2a62:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    2a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
						if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2a6a:	4a37      	ldr	r2, [pc, #220]	; (2b48 <twim_default_callback+0x300>)
    2a6c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2a70:	2aff      	cmp	r2, #255	; 0xff
    2a72:	d90d      	bls.n	2a90 <twim_default_callback+0x248>
							cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
    2a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
						twim->TWIM_NCMDR = cmdr_reg;
    2a78:	6123      	str	r3, [r4, #16]
    2a7a:	e70e      	b.n	289a <twim_default_callback+0x52>
						twim_tx_nb_bytes[twim_ch] = twim_next_tx_nb_bytes[twim_ch];
    2a7c:	4b32      	ldr	r3, [pc, #200]	; (2b48 <twim_default_callback+0x300>)
    2a7e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    2a82:	4a2f      	ldr	r2, [pc, #188]	; (2b40 <twim_default_callback+0x2f8>)
    2a84:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] = 0;
    2a88:	2200      	movs	r2, #0
    2a8a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    2a8e:	e7d7      	b.n	2a40 <twim_default_callback+0x1f8>
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
    2a90:	4a2d      	ldr	r2, [pc, #180]	; (2b48 <twim_default_callback+0x300>)
    2a92:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2a9a:	0412      	lsls	r2, r2, #16
    2a9c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2aa0:	4313      	orrs	r3, r2
    2aa2:	e7e9      	b.n	2a78 <twim_default_callback+0x230>
						twim_next_cmd_xfer_valid[twim_ch] = false;
    2aa4:	2200      	movs	r2, #0
    2aa6:	4b21      	ldr	r3, [pc, #132]	; (2b2c <twim_default_callback+0x2e4>)
    2aa8:	541a      	strb	r2, [r3, r0]
    2aaa:	e6f6      	b.n	289a <twim_default_callback+0x52>
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2aac:	4b1f      	ldr	r3, [pc, #124]	; (2b2c <twim_default_callback+0x2e4>)
    2aae:	5c1b      	ldrb	r3, [r3, r0]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	f43f aef2 	beq.w	289a <twim_default_callback+0x52>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    2ab6:	4b20      	ldr	r3, [pc, #128]	; (2b38 <twim_default_callback+0x2f0>)
    2ab8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2abc:	2b00      	cmp	r3, #0
    2abe:	f43f aeec 	beq.w	289a <twim_default_callback+0x52>
					ncmdr_wait = NCMDR_FREE_WAIT;
    2ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2ac6:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    2ac8:	6923      	ldr	r3, [r4, #16]
    2aca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2ace:	d004      	beq.n	2ada <twim_default_callback+0x292>
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	1e5a      	subs	r2, r3, #1
    2ad4:	9201      	str	r2, [sp, #4]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d1f6      	bne.n	2ac8 <twim_default_callback+0x280>
					cmdr_reg = twim->TWIM_CMDR;
    2ada:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    2adc:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    2ae0:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2ae4:	4a14      	ldr	r2, [pc, #80]	; (2b38 <twim_default_callback+0x2f0>)
    2ae6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2aea:	2aff      	cmp	r2, #255	; 0xff
    2aec:	d905      	bls.n	2afa <twim_default_callback+0x2b2>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    2aee:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    2af2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
					twim->TWIM_NCMDR = cmdr_reg;
    2af6:	6123      	str	r3, [r4, #16]
    2af8:	e6cf      	b.n	289a <twim_default_callback+0x52>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    2afa:	4a0f      	ldr	r2, [pc, #60]	; (2b38 <twim_default_callback+0x2f0>)
    2afc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2b04:	0412      	lsls	r2, r2, #16
    2b06:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2b0a:	4313      	orrs	r3, r2
    2b0c:	e7f3      	b.n	2af6 <twim_default_callback+0x2ae>
	else if (status & TWIM_SR_CCOMP) {
    2b0e:	f013 0f08 	tst.w	r3, #8
    2b12:	f43f aec2 	beq.w	289a <twim_default_callback+0x52>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
    2b16:	2308      	movs	r3, #8
    2b18:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
    2b1a:	6263      	str	r3, [r4, #36]	; 0x24
}
    2b1c:	e6bd      	b.n	289a <twim_default_callback+0x52>
    2b1e:	bf00      	nop
    2b20:	00002821 	.word	0x00002821
    2b24:	20000c5c 	.word	0x20000c5c
    2b28:	20000c58 	.word	0x20000c58
    2b2c:	20000c6c 	.word	0x20000c6c
    2b30:	20000c38 	.word	0x20000c38
    2b34:	20000c90 	.word	0x20000c90
    2b38:	20000c70 	.word	0x20000c70
    2b3c:	20000c18 	.word	0x20000c18
    2b40:	20000ca0 	.word	0x20000ca0
    2b44:	20000c48 	.word	0x20000c48
    2b48:	20000c80 	.word	0x20000c80
    2b4c:	20000c28 	.word	0x20000c28

00002b50 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    2b50:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    2b52:	fbb2 f2f1 	udiv	r2, r2, r1
    2b56:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2b58:	2aff      	cmp	r2, #255	; 0xff
    2b5a:	d922      	bls.n	2ba2 <twim_set_speed+0x52>
    2b5c:	2400      	movs	r4, #0
		/* increase clock divider */
		cwgr_exp++;
    2b5e:	3401      	adds	r4, #1
    2b60:	b2e4      	uxtb	r4, r4
		/* divide f_prescaled value */
		f_prescaled /= 2;
    2b62:	0852      	lsrs	r2, r2, #1
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2b64:	2aff      	cmp	r2, #255	; 0xff
    2b66:	d904      	bls.n	2b72 <twim_set_speed+0x22>
    2b68:	2c08      	cmp	r4, #8
    2b6a:	d1f8      	bne.n	2b5e <twim_set_speed+0xe>
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    2b6c:	f06f 0007 	mvn.w	r0, #7
    2b70:	e015      	b.n	2b9e <twim_set_speed+0x4e>
	if (cwgr_exp > 0x7) {
    2b72:	2c07      	cmp	r4, #7
    2b74:	d817      	bhi.n	2ba6 <twim_set_speed+0x56>
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2b76:	0855      	lsrs	r5, r2, #1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    2b78:	0411      	lsls	r1, r2, #16
    2b7a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2b7e:	b2ee      	uxtb	r6, r5
			| TWIM_CWGR_STASTO(f_prescaled);
    2b80:	4331      	orrs	r1, r6
			| TWIM_CWGR_DATA(cycles)
    2b82:	061b      	lsls	r3, r3, #24
    2b84:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			| TWIM_CWGR_STASTO(f_prescaled);
    2b88:	430b      	orrs	r3, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    2b8a:	1b52      	subs	r2, r2, r5
    2b8c:	0212      	lsls	r2, r2, #8
    2b8e:	b292      	uxth	r2, r2
			| TWIM_CWGR_STASTO(f_prescaled);
    2b90:	431a      	orrs	r2, r3
			| TWIM_CWGR_EXP(cwgr_exp)
    2b92:	0724      	lsls	r4, r4, #28
    2b94:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
			| TWIM_CWGR_STASTO(f_prescaled);
    2b98:	4314      	orrs	r4, r2
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2b9a:	6044      	str	r4, [r0, #4]

	return STATUS_OK;
    2b9c:	2000      	movs	r0, #0
}
    2b9e:	bc70      	pop	{r4, r5, r6}
    2ba0:	4770      	bx	lr
	uint8_t cwgr_exp = 0;
    2ba2:	2400      	movs	r4, #0
    2ba4:	e7e7      	b.n	2b76 <twim_set_speed+0x26>
		return ERR_INVALID_ARG;
    2ba6:	f06f 0007 	mvn.w	r0, #7
    2baa:	e7f8      	b.n	2b9e <twim_set_speed+0x4e>

00002bac <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    2bac:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    2bae:	fbb2 f2f1 	udiv	r2, r2, r1
    2bb2:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2bb4:	2aff      	cmp	r2, #255	; 0xff
    2bb6:	d922      	bls.n	2bfe <twim_set_hsmode_speed+0x52>
    2bb8:	2400      	movs	r4, #0
		/* increase clock divider */
		cwgr_exp++;
    2bba:	3401      	adds	r4, #1
    2bbc:	b2e4      	uxtb	r4, r4
		/* divide f_prescaled value */
		f_prescaled /= 2;
    2bbe:	0852      	lsrs	r2, r2, #1
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2bc0:	2aff      	cmp	r2, #255	; 0xff
    2bc2:	d904      	bls.n	2bce <twim_set_hsmode_speed+0x22>
    2bc4:	2c08      	cmp	r4, #8
    2bc6:	d1f8      	bne.n	2bba <twim_set_hsmode_speed+0xe>
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    2bc8:	f06f 0007 	mvn.w	r0, #7
    2bcc:	e015      	b.n	2bfa <twim_set_hsmode_speed+0x4e>
	if (cwgr_exp > 0x7) {
    2bce:	2c07      	cmp	r4, #7
    2bd0:	d817      	bhi.n	2c02 <twim_set_hsmode_speed+0x56>
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2bd2:	0855      	lsrs	r5, r2, #1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2bd4:	0411      	lsls	r1, r2, #16
    2bd6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2bda:	b2ee      	uxtb	r6, r5
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2bdc:	4331      	orrs	r1, r6
			| TWIM_HSCWGR_DATA(cycles)
    2bde:	061b      	lsls	r3, r3, #24
    2be0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2be4:	430b      	orrs	r3, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    2be6:	1b52      	subs	r2, r2, r5
    2be8:	0212      	lsls	r2, r2, #8
    2bea:	b292      	uxth	r2, r2
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2bec:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_EXP(cwgr_exp)
    2bee:	0724      	lsls	r4, r4, #28
    2bf0:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2bf4:	4314      	orrs	r4, r2
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2bf6:	6384      	str	r4, [r0, #56]	; 0x38

	return STATUS_OK;
    2bf8:	2000      	movs	r0, #0
}
    2bfa:	bc70      	pop	{r4, r5, r6}
    2bfc:	4770      	bx	lr
	uint8_t cwgr_exp = 0;
    2bfe:	2400      	movs	r4, #0
    2c00:	e7e7      	b.n	2bd2 <twim_set_hsmode_speed+0x26>
		return ERR_INVALID_ARG;
    2c02:	f06f 0007 	mvn.w	r0, #7
    2c06:	e7f8      	b.n	2bfa <twim_set_hsmode_speed+0x4e>

00002c08 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
    2c08:	b570      	push	{r4, r5, r6, lr}
    2c0a:	4605      	mov	r5, r0
    2c0c:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
    2c0e:	4b37      	ldr	r3, [pc, #220]	; (2cec <twim_set_config+0xe4>)
    2c10:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    2c12:	2301      	movs	r3, #1
    2c14:	602b      	str	r3, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
    2c16:	2380      	movs	r3, #128	; 0x80
    2c18:	602b      	str	r3, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
    2c1a:	f04f 33ff 	mov.w	r3, #4294967295
    2c1e:	62eb      	str	r3, [r5, #44]	; 0x2c

	if (config->smbus) {
    2c20:	7ba3      	ldrb	r3, [r4, #14]
    2c22:	b123      	cbz	r3, 2c2e <twim_set_config+0x26>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    2c24:	2310      	movs	r3, #16
    2c26:	602b      	str	r3, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    2c28:	f04f 33ff 	mov.w	r3, #4294967295
    2c2c:	60ab      	str	r3, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    2c2e:	6861      	ldr	r1, [r4, #4]
    2c30:	b921      	cbnz	r1, 2c3c <twim_set_config+0x34>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    2c32:	68a1      	ldr	r1, [r4, #8]
    2c34:	b959      	cbnz	r1, 2c4e <twim_set_config+0x46>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    2c36:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2c3a:	e017      	b.n	2c6c <twim_set_config+0x64>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    2c3c:	7b23      	ldrb	r3, [r4, #12]
    2c3e:	6822      	ldr	r2, [r4, #0]
    2c40:	4628      	mov	r0, r5
    2c42:	4e2b      	ldr	r6, [pc, #172]	; (2cf0 <twim_set_config+0xe8>)
    2c44:	47b0      	blx	r6
    2c46:	2800      	cmp	r0, #0
    2c48:	d14a      	bne.n	2ce0 <twim_set_config+0xd8>
	if (config->hsmode_speed) {
    2c4a:	68a1      	ldr	r1, [r4, #8]
    2c4c:	b131      	cbz	r1, 2c5c <twim_set_config+0x54>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    2c4e:	7b63      	ldrb	r3, [r4, #13]
    2c50:	6822      	ldr	r2, [r4, #0]
    2c52:	4628      	mov	r0, r5
    2c54:	4e27      	ldr	r6, [pc, #156]	; (2cf4 <twim_set_config+0xec>)
    2c56:	47b0      	blx	r6
    2c58:	2800      	cmp	r0, #0
    2c5a:	d144      	bne.n	2ce6 <twim_set_config+0xde>
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    2c5c:	6861      	ldr	r1, [r4, #4]
    2c5e:	4b26      	ldr	r3, [pc, #152]	; (2cf8 <twim_set_config+0xf0>)
    2c60:	4299      	cmp	r1, r3
    2c62:	bf94      	ite	ls
    2c64:	f04f 5100 	movls.w	r1, #536870912	; 0x20000000
    2c68:	f04f 5140 	movhi.w	r1, #805306368	; 0x30000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    2c6c:	7be3      	ldrb	r3, [r4, #15]
    2c6e:	061b      	lsls	r3, r3, #24
    2c70:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    2c74:	7c22      	ldrb	r2, [r4, #16]
    2c76:	0412      	lsls	r2, r2, #16
    2c78:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    2c7c:	4313      	orrs	r3, r2
    2c7e:	7ca2      	ldrb	r2, [r4, #18]
    2c80:	f002 0207 	and.w	r2, r2, #7
    2c84:	4313      	orrs	r3, r2
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    2c86:	7c62      	ldrb	r2, [r4, #17]
    2c88:	0212      	lsls	r2, r2, #8
    2c8a:	f402 7240 	and.w	r2, r2, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    2c8e:	4313      	orrs	r3, r2
    2c90:	430b      	orrs	r3, r1
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    2c92:	63eb      	str	r3, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2c94:	7de3      	ldrb	r3, [r4, #23]
    2c96:	f003 0307 	and.w	r3, r3, #7
    2c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    2c9e:	7ce2      	ldrb	r2, [r4, #19]
    2ca0:	0612      	lsls	r2, r2, #24
    2ca2:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2ca6:	4313      	orrs	r3, r2
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    2ca8:	7d62      	ldrb	r2, [r4, #21]
    2caa:	0412      	lsls	r2, r2, #16
    2cac:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2cb0:	4313      	orrs	r3, r2
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    2cb2:	7d22      	ldrb	r2, [r4, #20]
    2cb4:	0512      	lsls	r2, r2, #20
    2cb6:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2cba:	4313      	orrs	r3, r2
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    2cbc:	7da2      	ldrb	r2, [r4, #22]
    2cbe:	0212      	lsls	r2, r2, #8
    2cc0:	f402 7240 	and.w	r2, r2, #768	; 0x300
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2cc4:	4313      	orrs	r3, r2
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    2cc6:	642b      	str	r3, [r5, #64]	; 0x40
    2cc8:	4b0c      	ldr	r3, [pc, #48]	; (2cfc <twim_set_config+0xf4>)
    2cca:	1dd9      	adds	r1, r3, #7
		sleepmgr_locks[i] = 0;
    2ccc:	2200      	movs	r2, #0
    2cce:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2cd2:	428b      	cmp	r3, r1
    2cd4:	d1fb      	bne.n	2cce <twim_set_config+0xc6>
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2cd6:	2201      	movs	r2, #1
    2cd8:	4b09      	ldr	r3, [pc, #36]	; (2d00 <twim_set_config+0xf8>)
    2cda:	71da      	strb	r2, [r3, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    2cdc:	2000      	movs	r0, #0
    2cde:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    2ce0:	f06f 0007 	mvn.w	r0, #7
    2ce4:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    2ce6:	f06f 0007 	mvn.w	r0, #7
    2cea:	bd70      	pop	{r4, r5, r6, pc}
    2cec:	00001d29 	.word	0x00001d29
    2cf0:	00002b51 	.word	0x00002b51
    2cf4:	00002bad 	.word	0x00002bad
    2cf8:	000f423f 	.word	0x000f423f
    2cfc:	20000ceb 	.word	0x20000ceb
    2d00:	20000cec 	.word	0x20000cec

00002d04 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    2d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d06:	4604      	mov	r4, r0
    2d08:	460e      	mov	r6, r1
    2d0a:	4617      	mov	r7, r2
    2d0c:	461d      	mov	r5, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    2d0e:	4b1c      	ldr	r3, [pc, #112]	; (2d80 <twim_set_callback+0x7c>)
    2d10:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    2d12:	4b1c      	ldr	r3, [pc, #112]	; (2d84 <twim_set_callback+0x80>)
    2d14:	429c      	cmp	r4, r3
    2d16:	d023      	beq.n	2d60 <twim_set_callback+0x5c>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    2d18:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2d1c:	429c      	cmp	r4, r3
    2d1e:	d021      	beq.n	2d64 <twim_set_callback+0x60>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    2d20:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    2d24:	429c      	cmp	r4, r3
    2d26:	d025      	beq.n	2d74 <twim_set_callback+0x70>
	uint32_t irq_line = 0;
    2d28:	2200      	movs	r2, #0
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    2d2a:	4b17      	ldr	r3, [pc, #92]	; (2d88 <twim_set_callback+0x84>)
    2d2c:	429c      	cmp	r4, r3
    2d2e:	d01b      	beq.n	2d68 <twim_set_callback+0x64>
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    2d30:	4b16      	ldr	r3, [pc, #88]	; (2d8c <twim_set_callback+0x88>)
    2d32:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2d36:	b253      	sxtb	r3, r2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d38:	0958      	lsrs	r0, r3, #5
    2d3a:	f002 021f 	and.w	r2, r2, #31
    2d3e:	2101      	movs	r1, #1
    2d40:	fa01 f202 	lsl.w	r2, r1, r2
    2d44:	4912      	ldr	r1, [pc, #72]	; (2d90 <twim_set_callback+0x8c>)
    2d46:	f100 0760 	add.w	r7, r0, #96	; 0x60
    2d4a:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d4e:	012d      	lsls	r5, r5, #4
    2d50:	b2ed      	uxtb	r5, r5
    2d52:	440b      	add	r3, r1
    2d54:	f883 5300 	strb.w	r5, [r3, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d58:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	twim->TWIM_IER = interrupt_source;
    2d5c:	6226      	str	r6, [r4, #32]
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
}
    2d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		irq_line = TWIM3_IRQn;
    2d60:	224e      	movs	r2, #78	; 0x4e
    2d62:	e7e2      	b.n	2d2a <twim_set_callback+0x26>
		irq_line = TWIM2_IRQn;
    2d64:	224d      	movs	r2, #77	; 0x4d
    2d66:	e7e3      	b.n	2d30 <twim_set_callback+0x2c>
	twim_callback_pointer[twim_ch] = callback;
    2d68:	4b08      	ldr	r3, [pc, #32]	; (2d8c <twim_set_callback+0x88>)
    2d6a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2d6e:	233d      	movs	r3, #61	; 0x3d
		irq_line = TWIM0_IRQn;
    2d70:	461a      	mov	r2, r3
    2d72:	e7e1      	b.n	2d38 <twim_set_callback+0x34>
	twim_callback_pointer[twim_ch] = callback;
    2d74:	4b05      	ldr	r3, [pc, #20]	; (2d8c <twim_set_callback+0x88>)
    2d76:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2d7a:	233f      	movs	r3, #63	; 0x3f
		irq_line = TWIM1_IRQn;
    2d7c:	461a      	mov	r2, r3
    2d7e:	e7db      	b.n	2d38 <twim_set_callback+0x34>
    2d80:	00002821 	.word	0x00002821
    2d84:	4007c000 	.word	0x4007c000
    2d88:	40018000 	.word	0x40018000
    2d8c:	20000e00 	.word	0x20000e00
    2d90:	e000e100 	.word	0xe000e100

00002d94 <TWIM0_Handler>:

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    2d94:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    2d96:	4b02      	ldr	r3, [pc, #8]	; (2da0 <TWIM0_Handler+0xc>)
    2d98:	681b      	ldr	r3, [r3, #0]
    2d9a:	4802      	ldr	r0, [pc, #8]	; (2da4 <TWIM0_Handler+0x10>)
    2d9c:	4798      	blx	r3
    2d9e:	bd08      	pop	{r3, pc}
    2da0:	20000e00 	.word	0x20000e00
    2da4:	40018000 	.word	0x40018000

00002da8 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    2da8:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    2daa:	4b02      	ldr	r3, [pc, #8]	; (2db4 <TWIM1_Handler+0xc>)
    2dac:	685b      	ldr	r3, [r3, #4]
    2dae:	4802      	ldr	r0, [pc, #8]	; (2db8 <TWIM1_Handler+0x10>)
    2db0:	4798      	blx	r3
    2db2:	bd08      	pop	{r3, pc}
    2db4:	20000e00 	.word	0x20000e00
    2db8:	4001c000 	.word	0x4001c000

00002dbc <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    2dbc:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    2dbe:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <TWIM2_Handler+0xc>)
    2dc0:	689b      	ldr	r3, [r3, #8]
    2dc2:	4802      	ldr	r0, [pc, #8]	; (2dcc <TWIM2_Handler+0x10>)
    2dc4:	4798      	blx	r3
    2dc6:	bd08      	pop	{r3, pc}
    2dc8:	20000e00 	.word	0x20000e00
    2dcc:	40078000 	.word	0x40078000

00002dd0 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    2dd0:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    2dd2:	4b02      	ldr	r3, [pc, #8]	; (2ddc <TWIM3_Handler+0xc>)
    2dd4:	68db      	ldr	r3, [r3, #12]
    2dd6:	4802      	ldr	r0, [pc, #8]	; (2de0 <TWIM3_Handler+0x10>)
    2dd8:	4798      	blx	r3
    2dda:	bd08      	pop	{r3, pc}
    2ddc:	20000e00 	.word	0x20000e00
    2de0:	4007c000 	.word	0x4007c000

00002de4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2de4:	e7fe      	b.n	2de4 <Dummy_Handler>
	...

00002de8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2de8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    2dea:	4b17      	ldr	r3, [pc, #92]	; (2e48 <Reset_Handler+0x60>)
    2dec:	4a17      	ldr	r2, [pc, #92]	; (2e4c <Reset_Handler+0x64>)
    2dee:	429a      	cmp	r2, r3
    2df0:	d010      	beq.n	2e14 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
    2df2:	4b17      	ldr	r3, [pc, #92]	; (2e50 <Reset_Handler+0x68>)
    2df4:	4a14      	ldr	r2, [pc, #80]	; (2e48 <Reset_Handler+0x60>)
    2df6:	429a      	cmp	r2, r3
    2df8:	d20c      	bcs.n	2e14 <Reset_Handler+0x2c>
    2dfa:	3b01      	subs	r3, #1
    2dfc:	1a9b      	subs	r3, r3, r2
    2dfe:	f023 0303 	bic.w	r3, r3, #3
    2e02:	3304      	adds	r3, #4
    2e04:	4413      	add	r3, r2
    2e06:	4911      	ldr	r1, [pc, #68]	; (2e4c <Reset_Handler+0x64>)
			*pDest++ = *pSrc++;
    2e08:	f851 0b04 	ldr.w	r0, [r1], #4
    2e0c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
    2e10:	429a      	cmp	r2, r3
    2e12:	d1f9      	bne.n	2e08 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    2e14:	4b0f      	ldr	r3, [pc, #60]	; (2e54 <Reset_Handler+0x6c>)
    2e16:	4a10      	ldr	r2, [pc, #64]	; (2e58 <Reset_Handler+0x70>)
    2e18:	429a      	cmp	r2, r3
    2e1a:	d20a      	bcs.n	2e32 <Reset_Handler+0x4a>
    2e1c:	3b01      	subs	r3, #1
    2e1e:	1a9b      	subs	r3, r3, r2
    2e20:	f023 0303 	bic.w	r3, r3, #3
    2e24:	3304      	adds	r3, #4
    2e26:	4413      	add	r3, r2
		*pDest++ = 0;
    2e28:	2100      	movs	r1, #0
    2e2a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
    2e2e:	4293      	cmp	r3, r2
    2e30:	d1fb      	bne.n	2e2a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e32:	4a0a      	ldr	r2, [pc, #40]	; (2e5c <Reset_Handler+0x74>)
    2e34:	4b0a      	ldr	r3, [pc, #40]	; (2e60 <Reset_Handler+0x78>)
    2e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2e3a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    2e3c:	4b09      	ldr	r3, [pc, #36]	; (2e64 <Reset_Handler+0x7c>)
    2e3e:	4798      	blx	r3

	/* Branch to main function */
	main();
    2e40:	4b09      	ldr	r3, [pc, #36]	; (2e68 <Reset_Handler+0x80>)
    2e42:	4798      	blx	r3
    2e44:	e7fe      	b.n	2e44 <Reset_Handler+0x5c>
    2e46:	bf00      	nop
    2e48:	20000000 	.word	0x20000000
    2e4c:	000060d8 	.word	0x000060d8
    2e50:	20000ab8 	.word	0x20000ab8
    2e54:	20000e38 	.word	0x20000e38
    2e58:	20000ac0 	.word	0x20000ac0
    2e5c:	e000ed00 	.word	0xe000ed00
    2e60:	00000000 	.word	0x00000000
    2e64:	00003131 	.word	0x00003131
    2e68:	000030e5 	.word	0x000030e5

00002e6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    2e6c:	4b0a      	ldr	r3, [pc, #40]	; (2e98 <_sbrk+0x2c>)
    2e6e:	681b      	ldr	r3, [r3, #0]
    2e70:	b153      	cbz	r3, 2e88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2e72:	4b09      	ldr	r3, [pc, #36]	; (2e98 <_sbrk+0x2c>)
    2e74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    2e76:	181a      	adds	r2, r3, r0
    2e78:	4908      	ldr	r1, [pc, #32]	; (2e9c <_sbrk+0x30>)
    2e7a:	4291      	cmp	r1, r2
    2e7c:	db08      	blt.n	2e90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
    2e7e:	4610      	mov	r0, r2
    2e80:	4a05      	ldr	r2, [pc, #20]	; (2e98 <_sbrk+0x2c>)
    2e82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    2e84:	4618      	mov	r0, r3
    2e86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2e88:	4a05      	ldr	r2, [pc, #20]	; (2ea0 <_sbrk+0x34>)
    2e8a:	4b03      	ldr	r3, [pc, #12]	; (2e98 <_sbrk+0x2c>)
    2e8c:	601a      	str	r2, [r3, #0]
    2e8e:	e7f0      	b.n	2e72 <_sbrk+0x6>
		return (caddr_t) -1;	
    2e90:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e94:	4770      	bx	lr
    2e96:	bf00      	nop
    2e98:	20000cb0 	.word	0x20000cb0
    2e9c:	20007ffc 	.word	0x20007ffc
    2ea0:	20001e38 	.word	0x20001e38

00002ea4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2ea4:	f04f 30ff 	mov.w	r0, #4294967295
    2ea8:	4770      	bx	lr

00002eaa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2eae:	604b      	str	r3, [r1, #4]

	return 0;
}
    2eb0:	2000      	movs	r0, #0
    2eb2:	4770      	bx	lr

00002eb4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2eb4:	2001      	movs	r0, #1
    2eb6:	4770      	bx	lr

00002eb8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2eb8:	2000      	movs	r0, #0
    2eba:	4770      	bx	lr

00002ebc <coder_detect>:
void set_feature(uint8_t * report) {
	uint8_t t = 0;
	t = 3;
}

void coder_detect() {
    2ebc:	b430      	push	{r4, r5}
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
    2ebe:	4b18      	ldr	r3, [pc, #96]	; (2f20 <coder_detect+0x64>)
    2ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    2ec2:	f002 0230 	and.w	r2, r2, #48	; 0x30
	uint16_t A = 0;
	uint16_t B = 0;
	
	uint32_t pins = ioport_get_port_level(IOPORT_PIOA, GPIO_PA04 | GPIO_PA05);
	
	A = (pins >> PIN_PA04) & 1;
    2ec6:	f3c2 1400 	ubfx	r4, r2, #4, #1
	B = (pins >> PIN_PA05) & 1;
    2eca:	0952      	lsrs	r2, r2, #5

	int valid = (A << 2) | (prev_A << 3) | B | (prev_B << 1);
    2ecc:	4815      	ldr	r0, [pc, #84]	; (2f24 <coder_detect+0x68>)
    2ece:	f990 5000 	ldrsb.w	r5, [r0]
    2ed2:	4915      	ldr	r1, [pc, #84]	; (2f28 <coder_detect+0x6c>)
    2ed4:	f991 3000 	ldrsb.w	r3, [r1]
    2ed8:	005b      	lsls	r3, r3, #1
    2eda:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    2ede:	4313      	orrs	r3, r2
    2ee0:	ea43 0384 	orr.w	r3, r3, r4, lsl #2

	prev_A = A;
    2ee4:	7004      	strb	r4, [r0, #0]
	prev_B = B;
    2ee6:	700a      	strb	r2, [r1, #0]

	if(valid == 0b0111 | valid == 0b1000 | valid == 0b0001 | valid == 0b1110) {
    2ee8:	2b0e      	cmp	r3, #14
    2eea:	d80b      	bhi.n	2f04 <coder_detect+0x48>
    2eec:	f244 1282 	movw	r2, #16770	; 0x4182
    2ef0:	40da      	lsrs	r2, r3
    2ef2:	f012 0f01 	tst.w	r2, #1
    2ef6:	d005      	beq.n	2f04 <coder_detect+0x48>
		smooth_cnt++;
    2ef8:	4a0c      	ldr	r2, [pc, #48]	; (2f2c <coder_detect+0x70>)
    2efa:	8813      	ldrh	r3, [r2, #0]
    2efc:	3301      	adds	r3, #1
    2efe:	8013      	strh	r3, [r2, #0]
		} else if (valid == 0b0100 | valid == 0b1011 | valid == 0b1101 | valid == 0b0010) {
		smooth_cnt--;
	}
}
    2f00:	bc30      	pop	{r4, r5}
    2f02:	4770      	bx	lr
		} else if (valid == 0b0100 | valid == 0b1011 | valid == 0b1101 | valid == 0b0010) {
    2f04:	2b0d      	cmp	r3, #13
    2f06:	d8fb      	bhi.n	2f00 <coder_detect+0x44>
    2f08:	f642 0214 	movw	r2, #10260	; 0x2814
    2f0c:	fa22 f303 	lsr.w	r3, r2, r3
    2f10:	f013 0f01 	tst.w	r3, #1
    2f14:	d0f4      	beq.n	2f00 <coder_detect+0x44>
		smooth_cnt--;
    2f16:	4a05      	ldr	r2, [pc, #20]	; (2f2c <coder_detect+0x70>)
    2f18:	8813      	ldrh	r3, [r2, #0]
    2f1a:	3b01      	subs	r3, #1
    2f1c:	8013      	strh	r3, [r2, #0]
}
    2f1e:	e7ef      	b.n	2f00 <coder_detect+0x44>
    2f20:	400e1000 	.word	0x400e1000
    2f24:	20000cb4 	.word	0x20000cb4
    2f28:	20000cb5 	.word	0x20000cb5
    2f2c:	20000cb6 	.word	0x20000cb6

00002f30 <init_dial>:
void init_dial(void) {
    2f30:	b530      	push	{r4, r5, lr}
    2f32:	b087      	sub	sp, #28
	sysclk_enable_peripheral_clock(GPIO);
    2f34:	4c5d      	ldr	r4, [pc, #372]	; (30ac <init_dial+0x17c>)
    2f36:	4620      	mov	r0, r4
    2f38:	4b5d      	ldr	r3, [pc, #372]	; (30b0 <init_dial+0x180>)
    2f3a:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2f40:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f42:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2f46:	65a3      	str	r3, [r4, #88]	; 0x58
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    2f4c:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f4e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f52:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f58:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f5a:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2f5e:	65a3      	str	r3, [r4, #88]	; 0x58
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    2f64:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f66:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f6a:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2f70:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f72:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f76:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2f7c:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f7e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f82:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f84:	2304      	movs	r3, #4
    2f86:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f88:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f8c:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2f8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2f92:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2f94:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2f98:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2f9a:	2220      	movs	r2, #32
    2f9c:	64a2      	str	r2, [r4, #72]	; 0x48
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2f9e:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2fa2:	2310      	movs	r3, #16
    2fa4:	64a3      	str	r3, [r4, #72]	; 0x48
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2fa6:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
		base->GPIO_PUERS = mask;
    2faa:	6762      	str	r2, [r4, #116]	; 0x74
		base->GPIO_PDERC = mask;
    2fac:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
		base->GPIO_GFERS = mask;
    2fb0:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
		base->GPIO_ODCR0C = mask;
    2fb4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    2fb8:	61a2      	str	r2, [r4, #24]
		base->GPIO_PMR1C = mask;
    2fba:	62a2      	str	r2, [r4, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    2fbc:	63a2      	str	r2, [r4, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    2fbe:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    2fc2:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
		base->GPIO_PUERS = mask;
    2fc6:	6763      	str	r3, [r4, #116]	; 0x74
		base->GPIO_PDERC = mask;
    2fc8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		base->GPIO_GFERS = mask;
    2fcc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		base->GPIO_ODCR0C = mask;
    2fd0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    2fd4:	61a3      	str	r3, [r4, #24]
		base->GPIO_PMR1C = mask;
    2fd6:	62a3      	str	r3, [r4, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    2fd8:	63a3      	str	r3, [r4, #56]	; 0x38
		base->GPIO_IMR0C = mask;
    2fda:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		base->GPIO_IMR1C = mask;
    2fde:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	if (!gpio_set_pin_callback(SM_COD_N, coder_detect, 1) || !gpio_set_pin_callback(SM_COD_P, coder_detect, 1)) {
    2fe2:	2201      	movs	r2, #1
    2fe4:	4933      	ldr	r1, [pc, #204]	; (30b4 <init_dial+0x184>)
    2fe6:	2005      	movs	r0, #5
    2fe8:	4b33      	ldr	r3, [pc, #204]	; (30b8 <init_dial+0x188>)
    2fea:	4798      	blx	r3
    2fec:	b128      	cbz	r0, 2ffa <init_dial+0xca>
    2fee:	2201      	movs	r2, #1
    2ff0:	4930      	ldr	r1, [pc, #192]	; (30b4 <init_dial+0x184>)
    2ff2:	2004      	movs	r0, #4
    2ff4:	4b30      	ldr	r3, [pc, #192]	; (30b8 <init_dial+0x188>)
    2ff6:	4798      	blx	r3
    2ff8:	b918      	cbnz	r0, 3002 <init_dial+0xd2>
		printf("Set pin callback failure!\r\n");
    2ffa:	4830      	ldr	r0, [pc, #192]	; (30bc <init_dial+0x18c>)
    2ffc:	4b30      	ldr	r3, [pc, #192]	; (30c0 <init_dial+0x190>)
    2ffe:	4798      	blx	r3
    3000:	e7fe      	b.n	3000 <init_dial+0xd0>
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    3002:	4b2a      	ldr	r3, [pc, #168]	; (30ac <init_dial+0x17c>)
    3004:	2220      	movs	r2, #32
    3006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    300a:	2210      	movs	r2, #16
    300c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->GPIO_PUERC = mask;
    3010:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3014:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    3016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    301a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    301e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3022:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    3024:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2S = mask;
    3026:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3028:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    302a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    302e:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    3030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    3034:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    3038:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    303c:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    303e:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2S = mask;
    3040:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3042:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    3044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    3048:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    304a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    304e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    3052:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3056:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    3058:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    305a:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    305c:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    305e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    3062:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    3064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    3068:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    306c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3070:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    3072:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    3074:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3076:	609a      	str	r2, [r3, #8]
	twimconf.twim_clk = sysclk_get_cpu_hz();
    3078:	4b12      	ldr	r3, [pc, #72]	; (30c4 <init_dial+0x194>)
    307a:	9300      	str	r3, [sp, #0]
	twimconf.speed = TWI_FAST_MODE_SPEED;
    307c:	4b12      	ldr	r3, [pc, #72]	; (30c8 <init_dial+0x198>)
    307e:	9301      	str	r3, [sp, #4]
	twimconf.smbus = false;
    3080:	2400      	movs	r4, #0
    3082:	f88d 400e 	strb.w	r4, [sp, #14]
	twimconf.hsmode_speed = 0;
    3086:	9402      	str	r4, [sp, #8]
	twimconf.data_setup_cycles = 0;
    3088:	f88d 400c 	strb.w	r4, [sp, #12]
	twimconf.hsmode_data_setup_cycles = 0;
    308c:	f88d 400d 	strb.w	r4, [sp, #13]
	twim_set_config(TWIM2, &twimconf);
    3090:	4d0e      	ldr	r5, [pc, #56]	; (30cc <init_dial+0x19c>)
    3092:	4669      	mov	r1, sp
    3094:	4628      	mov	r0, r5
    3096:	4b0e      	ldr	r3, [pc, #56]	; (30d0 <init_dial+0x1a0>)
    3098:	4798      	blx	r3
	twim_set_callback(TWIM2, 0, twim_default_callback, 1);
    309a:	2301      	movs	r3, #1
    309c:	4a0d      	ldr	r2, [pc, #52]	; (30d4 <init_dial+0x1a4>)
    309e:	4621      	mov	r1, r4
    30a0:	4628      	mov	r0, r5
    30a2:	4c0d      	ldr	r4, [pc, #52]	; (30d8 <init_dial+0x1a8>)
    30a4:	47a0      	blx	r4
}
    30a6:	b007      	add	sp, #28
    30a8:	bd30      	pop	{r4, r5, pc}
    30aa:	bf00      	nop
    30ac:	400e1000 	.word	0x400e1000
    30b0:	00001d29 	.word	0x00001d29
    30b4:	00002ebd 	.word	0x00002ebd
    30b8:	00002525 	.word	0x00002525
    30bc:	00005f28 	.word	0x00005f28
    30c0:	00003181 	.word	0x00003181
    30c4:	00f42400 	.word	0x00f42400
    30c8:	00061a80 	.word	0x00061a80
    30cc:	40078000 	.word	0x40078000
    30d0:	00002c09 	.word	0x00002c09
    30d4:	00002849 	.word	0x00002849
    30d8:	00002d05 	.word	0x00002d05

000030dc <user_callback_sof_action>:
void user_callback_sof_action() {
    30dc:	4770      	bx	lr

000030de <process_report>:
void process_report(uint8_t * report) {
    30de:	4770      	bx	lr

000030e0 <set_feature>:
void set_feature(uint8_t * report) {
    30e0:	4770      	bx	lr
	...

000030e4 <main>:

int main (void)
{
    30e4:	b538      	push	{r3, r4, r5, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
    30e6:	4b0b      	ldr	r3, [pc, #44]	; (3114 <main+0x30>)
    30e8:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
    30ea:	2201      	movs	r2, #1
    30ec:	4b0a      	ldr	r3, [pc, #40]	; (3118 <main+0x34>)
    30ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    30f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30f4:	b662      	cpsie	i
	
	init_dial();
    30f6:	4b09      	ldr	r3, [pc, #36]	; (311c <main+0x38>)
    30f8:	4798      	blx	r3
	
	/* Init USB */
	
	udc_start();
    30fa:	4b09      	ldr	r3, [pc, #36]	; (3120 <main+0x3c>)
    30fc:	4798      	blx	r3
	while(1) {
		//sleepmgr_enter_sleep();
		cnt++;
		if(cnt == 48000000) {
			cnt = 0;
			_vfo_report.buttons++;
    30fe:	4c09      	ldr	r4, [pc, #36]	; (3124 <main+0x40>)
			udi_hid_generic_send_report_in((uint8_t *)&_vfo_report);
    3100:	4d09      	ldr	r5, [pc, #36]	; (3128 <main+0x44>)
{
    3102:	4b0a      	ldr	r3, [pc, #40]	; (312c <main+0x48>)
		if(cnt == 48000000) {
    3104:	3b01      	subs	r3, #1
    3106:	d1fd      	bne.n	3104 <main+0x20>
			_vfo_report.buttons++;
    3108:	8823      	ldrh	r3, [r4, #0]
    310a:	3301      	adds	r3, #1
    310c:	8023      	strh	r3, [r4, #0]
			udi_hid_generic_send_report_in((uint8_t *)&_vfo_report);
    310e:	4620      	mov	r0, r4
    3110:	47a8      	blx	r5
    3112:	e7f6      	b.n	3102 <main+0x1e>
    3114:	000021ad 	.word	0x000021ad
    3118:	20000104 	.word	0x20000104
    311c:	00002f31 	.word	0x00002f31
    3120:	0000051d 	.word	0x0000051d
    3124:	20000cf4 	.word	0x20000cf4
    3128:	000002f9 	.word	0x000002f9
    312c:	02dc6c00 	.word	0x02dc6c00

00003130 <__libc_init_array>:
    3130:	b570      	push	{r4, r5, r6, lr}
    3132:	4e0f      	ldr	r6, [pc, #60]	; (3170 <__libc_init_array+0x40>)
    3134:	4d0f      	ldr	r5, [pc, #60]	; (3174 <__libc_init_array+0x44>)
    3136:	1b76      	subs	r6, r6, r5
    3138:	10b6      	asrs	r6, r6, #2
    313a:	bf18      	it	ne
    313c:	2400      	movne	r4, #0
    313e:	d005      	beq.n	314c <__libc_init_array+0x1c>
    3140:	3401      	adds	r4, #1
    3142:	f855 3b04 	ldr.w	r3, [r5], #4
    3146:	4798      	blx	r3
    3148:	42a6      	cmp	r6, r4
    314a:	d1f9      	bne.n	3140 <__libc_init_array+0x10>
    314c:	4e0a      	ldr	r6, [pc, #40]	; (3178 <__libc_init_array+0x48>)
    314e:	4d0b      	ldr	r5, [pc, #44]	; (317c <__libc_init_array+0x4c>)
    3150:	1b76      	subs	r6, r6, r5
    3152:	f002 ffab 	bl	60ac <_init>
    3156:	10b6      	asrs	r6, r6, #2
    3158:	bf18      	it	ne
    315a:	2400      	movne	r4, #0
    315c:	d006      	beq.n	316c <__libc_init_array+0x3c>
    315e:	3401      	adds	r4, #1
    3160:	f855 3b04 	ldr.w	r3, [r5], #4
    3164:	4798      	blx	r3
    3166:	42a6      	cmp	r6, r4
    3168:	d1f9      	bne.n	315e <__libc_init_array+0x2e>
    316a:	bd70      	pop	{r4, r5, r6, pc}
    316c:	bd70      	pop	{r4, r5, r6, pc}
    316e:	bf00      	nop
    3170:	000060b8 	.word	0x000060b8
    3174:	000060b8 	.word	0x000060b8
    3178:	000060c0 	.word	0x000060c0
    317c:	000060b8 	.word	0x000060b8

00003180 <iprintf>:
    3180:	b40f      	push	{r0, r1, r2, r3}
    3182:	b500      	push	{lr}
    3184:	4907      	ldr	r1, [pc, #28]	; (31a4 <iprintf+0x24>)
    3186:	b083      	sub	sp, #12
    3188:	ab04      	add	r3, sp, #16
    318a:	6808      	ldr	r0, [r1, #0]
    318c:	f853 2b04 	ldr.w	r2, [r3], #4
    3190:	6881      	ldr	r1, [r0, #8]
    3192:	9301      	str	r3, [sp, #4]
    3194:	f000 f930 	bl	33f8 <_vfiprintf_r>
    3198:	b003      	add	sp, #12
    319a:	f85d eb04 	ldr.w	lr, [sp], #4
    319e:	b004      	add	sp, #16
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	20000108 	.word	0x20000108

000031a8 <memcpy>:
    31a8:	4684      	mov	ip, r0
    31aa:	ea41 0300 	orr.w	r3, r1, r0
    31ae:	f013 0303 	ands.w	r3, r3, #3
    31b2:	d16d      	bne.n	3290 <memcpy+0xe8>
    31b4:	3a40      	subs	r2, #64	; 0x40
    31b6:	d341      	bcc.n	323c <memcpy+0x94>
    31b8:	f851 3b04 	ldr.w	r3, [r1], #4
    31bc:	f840 3b04 	str.w	r3, [r0], #4
    31c0:	f851 3b04 	ldr.w	r3, [r1], #4
    31c4:	f840 3b04 	str.w	r3, [r0], #4
    31c8:	f851 3b04 	ldr.w	r3, [r1], #4
    31cc:	f840 3b04 	str.w	r3, [r0], #4
    31d0:	f851 3b04 	ldr.w	r3, [r1], #4
    31d4:	f840 3b04 	str.w	r3, [r0], #4
    31d8:	f851 3b04 	ldr.w	r3, [r1], #4
    31dc:	f840 3b04 	str.w	r3, [r0], #4
    31e0:	f851 3b04 	ldr.w	r3, [r1], #4
    31e4:	f840 3b04 	str.w	r3, [r0], #4
    31e8:	f851 3b04 	ldr.w	r3, [r1], #4
    31ec:	f840 3b04 	str.w	r3, [r0], #4
    31f0:	f851 3b04 	ldr.w	r3, [r1], #4
    31f4:	f840 3b04 	str.w	r3, [r0], #4
    31f8:	f851 3b04 	ldr.w	r3, [r1], #4
    31fc:	f840 3b04 	str.w	r3, [r0], #4
    3200:	f851 3b04 	ldr.w	r3, [r1], #4
    3204:	f840 3b04 	str.w	r3, [r0], #4
    3208:	f851 3b04 	ldr.w	r3, [r1], #4
    320c:	f840 3b04 	str.w	r3, [r0], #4
    3210:	f851 3b04 	ldr.w	r3, [r1], #4
    3214:	f840 3b04 	str.w	r3, [r0], #4
    3218:	f851 3b04 	ldr.w	r3, [r1], #4
    321c:	f840 3b04 	str.w	r3, [r0], #4
    3220:	f851 3b04 	ldr.w	r3, [r1], #4
    3224:	f840 3b04 	str.w	r3, [r0], #4
    3228:	f851 3b04 	ldr.w	r3, [r1], #4
    322c:	f840 3b04 	str.w	r3, [r0], #4
    3230:	f851 3b04 	ldr.w	r3, [r1], #4
    3234:	f840 3b04 	str.w	r3, [r0], #4
    3238:	3a40      	subs	r2, #64	; 0x40
    323a:	d2bd      	bcs.n	31b8 <memcpy+0x10>
    323c:	3230      	adds	r2, #48	; 0x30
    323e:	d311      	bcc.n	3264 <memcpy+0xbc>
    3240:	f851 3b04 	ldr.w	r3, [r1], #4
    3244:	f840 3b04 	str.w	r3, [r0], #4
    3248:	f851 3b04 	ldr.w	r3, [r1], #4
    324c:	f840 3b04 	str.w	r3, [r0], #4
    3250:	f851 3b04 	ldr.w	r3, [r1], #4
    3254:	f840 3b04 	str.w	r3, [r0], #4
    3258:	f851 3b04 	ldr.w	r3, [r1], #4
    325c:	f840 3b04 	str.w	r3, [r0], #4
    3260:	3a10      	subs	r2, #16
    3262:	d2ed      	bcs.n	3240 <memcpy+0x98>
    3264:	320c      	adds	r2, #12
    3266:	d305      	bcc.n	3274 <memcpy+0xcc>
    3268:	f851 3b04 	ldr.w	r3, [r1], #4
    326c:	f840 3b04 	str.w	r3, [r0], #4
    3270:	3a04      	subs	r2, #4
    3272:	d2f9      	bcs.n	3268 <memcpy+0xc0>
    3274:	3204      	adds	r2, #4
    3276:	d008      	beq.n	328a <memcpy+0xe2>
    3278:	07d2      	lsls	r2, r2, #31
    327a:	bf1c      	itt	ne
    327c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3280:	f800 3b01 	strbne.w	r3, [r0], #1
    3284:	d301      	bcc.n	328a <memcpy+0xe2>
    3286:	880b      	ldrh	r3, [r1, #0]
    3288:	8003      	strh	r3, [r0, #0]
    328a:	4660      	mov	r0, ip
    328c:	4770      	bx	lr
    328e:	bf00      	nop
    3290:	2a08      	cmp	r2, #8
    3292:	d313      	bcc.n	32bc <memcpy+0x114>
    3294:	078b      	lsls	r3, r1, #30
    3296:	d08d      	beq.n	31b4 <memcpy+0xc>
    3298:	f010 0303 	ands.w	r3, r0, #3
    329c:	d08a      	beq.n	31b4 <memcpy+0xc>
    329e:	f1c3 0304 	rsb	r3, r3, #4
    32a2:	1ad2      	subs	r2, r2, r3
    32a4:	07db      	lsls	r3, r3, #31
    32a6:	bf1c      	itt	ne
    32a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    32ac:	f800 3b01 	strbne.w	r3, [r0], #1
    32b0:	d380      	bcc.n	31b4 <memcpy+0xc>
    32b2:	f831 3b02 	ldrh.w	r3, [r1], #2
    32b6:	f820 3b02 	strh.w	r3, [r0], #2
    32ba:	e77b      	b.n	31b4 <memcpy+0xc>
    32bc:	3a04      	subs	r2, #4
    32be:	d3d9      	bcc.n	3274 <memcpy+0xcc>
    32c0:	3a01      	subs	r2, #1
    32c2:	f811 3b01 	ldrb.w	r3, [r1], #1
    32c6:	f800 3b01 	strb.w	r3, [r0], #1
    32ca:	d2f9      	bcs.n	32c0 <memcpy+0x118>
    32cc:	780b      	ldrb	r3, [r1, #0]
    32ce:	7003      	strb	r3, [r0, #0]
    32d0:	784b      	ldrb	r3, [r1, #1]
    32d2:	7043      	strb	r3, [r0, #1]
    32d4:	788b      	ldrb	r3, [r1, #2]
    32d6:	7083      	strb	r3, [r0, #2]
    32d8:	4660      	mov	r0, ip
    32da:	4770      	bx	lr

000032dc <memset>:
    32dc:	b470      	push	{r4, r5, r6}
    32de:	0786      	lsls	r6, r0, #30
    32e0:	d046      	beq.n	3370 <memset+0x94>
    32e2:	1e54      	subs	r4, r2, #1
    32e4:	2a00      	cmp	r2, #0
    32e6:	d041      	beq.n	336c <memset+0x90>
    32e8:	b2ca      	uxtb	r2, r1
    32ea:	4603      	mov	r3, r0
    32ec:	e002      	b.n	32f4 <memset+0x18>
    32ee:	f114 34ff 	adds.w	r4, r4, #4294967295
    32f2:	d33b      	bcc.n	336c <memset+0x90>
    32f4:	f803 2b01 	strb.w	r2, [r3], #1
    32f8:	079d      	lsls	r5, r3, #30
    32fa:	d1f8      	bne.n	32ee <memset+0x12>
    32fc:	2c03      	cmp	r4, #3
    32fe:	d92e      	bls.n	335e <memset+0x82>
    3300:	b2cd      	uxtb	r5, r1
    3302:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3306:	2c0f      	cmp	r4, #15
    3308:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    330c:	d919      	bls.n	3342 <memset+0x66>
    330e:	f103 0210 	add.w	r2, r3, #16
    3312:	4626      	mov	r6, r4
    3314:	3e10      	subs	r6, #16
    3316:	2e0f      	cmp	r6, #15
    3318:	f842 5c10 	str.w	r5, [r2, #-16]
    331c:	f842 5c0c 	str.w	r5, [r2, #-12]
    3320:	f842 5c08 	str.w	r5, [r2, #-8]
    3324:	f842 5c04 	str.w	r5, [r2, #-4]
    3328:	f102 0210 	add.w	r2, r2, #16
    332c:	d8f2      	bhi.n	3314 <memset+0x38>
    332e:	f1a4 0210 	sub.w	r2, r4, #16
    3332:	f022 020f 	bic.w	r2, r2, #15
    3336:	f004 040f 	and.w	r4, r4, #15
    333a:	3210      	adds	r2, #16
    333c:	2c03      	cmp	r4, #3
    333e:	4413      	add	r3, r2
    3340:	d90d      	bls.n	335e <memset+0x82>
    3342:	461e      	mov	r6, r3
    3344:	4622      	mov	r2, r4
    3346:	3a04      	subs	r2, #4
    3348:	2a03      	cmp	r2, #3
    334a:	f846 5b04 	str.w	r5, [r6], #4
    334e:	d8fa      	bhi.n	3346 <memset+0x6a>
    3350:	1f22      	subs	r2, r4, #4
    3352:	f022 0203 	bic.w	r2, r2, #3
    3356:	3204      	adds	r2, #4
    3358:	4413      	add	r3, r2
    335a:	f004 0403 	and.w	r4, r4, #3
    335e:	b12c      	cbz	r4, 336c <memset+0x90>
    3360:	b2c9      	uxtb	r1, r1
    3362:	441c      	add	r4, r3
    3364:	f803 1b01 	strb.w	r1, [r3], #1
    3368:	429c      	cmp	r4, r3
    336a:	d1fb      	bne.n	3364 <memset+0x88>
    336c:	bc70      	pop	{r4, r5, r6}
    336e:	4770      	bx	lr
    3370:	4614      	mov	r4, r2
    3372:	4603      	mov	r3, r0
    3374:	e7c2      	b.n	32fc <memset+0x20>
    3376:	bf00      	nop

00003378 <__sprint_r.part.0>:
    3378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    337c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    337e:	049c      	lsls	r4, r3, #18
    3380:	4693      	mov	fp, r2
    3382:	d52f      	bpl.n	33e4 <__sprint_r.part.0+0x6c>
    3384:	6893      	ldr	r3, [r2, #8]
    3386:	6812      	ldr	r2, [r2, #0]
    3388:	b353      	cbz	r3, 33e0 <__sprint_r.part.0+0x68>
    338a:	460e      	mov	r6, r1
    338c:	4607      	mov	r7, r0
    338e:	f102 0908 	add.w	r9, r2, #8
    3392:	e919 0420 	ldmdb	r9, {r5, sl}
    3396:	ea5f 089a 	movs.w	r8, sl, lsr #2
    339a:	d017      	beq.n	33cc <__sprint_r.part.0+0x54>
    339c:	3d04      	subs	r5, #4
    339e:	2400      	movs	r4, #0
    33a0:	e001      	b.n	33a6 <__sprint_r.part.0+0x2e>
    33a2:	45a0      	cmp	r8, r4
    33a4:	d010      	beq.n	33c8 <__sprint_r.part.0+0x50>
    33a6:	4632      	mov	r2, r6
    33a8:	f855 1f04 	ldr.w	r1, [r5, #4]!
    33ac:	4638      	mov	r0, r7
    33ae:	f001 f8bb 	bl	4528 <_fputwc_r>
    33b2:	1c43      	adds	r3, r0, #1
    33b4:	f104 0401 	add.w	r4, r4, #1
    33b8:	d1f3      	bne.n	33a2 <__sprint_r.part.0+0x2a>
    33ba:	2300      	movs	r3, #0
    33bc:	f8cb 3008 	str.w	r3, [fp, #8]
    33c0:	f8cb 3004 	str.w	r3, [fp, #4]
    33c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33c8:	f8db 3008 	ldr.w	r3, [fp, #8]
    33cc:	f02a 0a03 	bic.w	sl, sl, #3
    33d0:	eba3 030a 	sub.w	r3, r3, sl
    33d4:	f8cb 3008 	str.w	r3, [fp, #8]
    33d8:	f109 0908 	add.w	r9, r9, #8
    33dc:	2b00      	cmp	r3, #0
    33de:	d1d8      	bne.n	3392 <__sprint_r.part.0+0x1a>
    33e0:	2000      	movs	r0, #0
    33e2:	e7ea      	b.n	33ba <__sprint_r.part.0+0x42>
    33e4:	f001 fa0a 	bl	47fc <__sfvwrite_r>
    33e8:	2300      	movs	r3, #0
    33ea:	f8cb 3008 	str.w	r3, [fp, #8]
    33ee:	f8cb 3004 	str.w	r3, [fp, #4]
    33f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33f6:	bf00      	nop

000033f8 <_vfiprintf_r>:
    33f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33fc:	b0ad      	sub	sp, #180	; 0xb4
    33fe:	461d      	mov	r5, r3
    3400:	468b      	mov	fp, r1
    3402:	4690      	mov	r8, r2
    3404:	9307      	str	r3, [sp, #28]
    3406:	9006      	str	r0, [sp, #24]
    3408:	b118      	cbz	r0, 3412 <_vfiprintf_r+0x1a>
    340a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    340c:	2b00      	cmp	r3, #0
    340e:	f000 80f3 	beq.w	35f8 <_vfiprintf_r+0x200>
    3412:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    3416:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    341a:	07df      	lsls	r7, r3, #31
    341c:	b281      	uxth	r1, r0
    341e:	d402      	bmi.n	3426 <_vfiprintf_r+0x2e>
    3420:	058e      	lsls	r6, r1, #22
    3422:	f140 80fc 	bpl.w	361e <_vfiprintf_r+0x226>
    3426:	048c      	lsls	r4, r1, #18
    3428:	d40a      	bmi.n	3440 <_vfiprintf_r+0x48>
    342a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    342e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
    3432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3436:	f8ab 100c 	strh.w	r1, [fp, #12]
    343a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    343e:	b289      	uxth	r1, r1
    3440:	0708      	lsls	r0, r1, #28
    3442:	f140 80b3 	bpl.w	35ac <_vfiprintf_r+0x1b4>
    3446:	f8db 3010 	ldr.w	r3, [fp, #16]
    344a:	2b00      	cmp	r3, #0
    344c:	f000 80ae 	beq.w	35ac <_vfiprintf_r+0x1b4>
    3450:	f001 031a 	and.w	r3, r1, #26
    3454:	2b0a      	cmp	r3, #10
    3456:	f000 80b5 	beq.w	35c4 <_vfiprintf_r+0x1cc>
    345a:	2300      	movs	r3, #0
    345c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    3460:	930b      	str	r3, [sp, #44]	; 0x2c
    3462:	9311      	str	r3, [sp, #68]	; 0x44
    3464:	9310      	str	r3, [sp, #64]	; 0x40
    3466:	9303      	str	r3, [sp, #12]
    3468:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    346c:	46ca      	mov	sl, r9
    346e:	f8cd b010 	str.w	fp, [sp, #16]
    3472:	f898 3000 	ldrb.w	r3, [r8]
    3476:	4644      	mov	r4, r8
    3478:	b1fb      	cbz	r3, 34ba <_vfiprintf_r+0xc2>
    347a:	2b25      	cmp	r3, #37	; 0x25
    347c:	d102      	bne.n	3484 <_vfiprintf_r+0x8c>
    347e:	e01c      	b.n	34ba <_vfiprintf_r+0xc2>
    3480:	2b25      	cmp	r3, #37	; 0x25
    3482:	d003      	beq.n	348c <_vfiprintf_r+0x94>
    3484:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    3488:	2b00      	cmp	r3, #0
    348a:	d1f9      	bne.n	3480 <_vfiprintf_r+0x88>
    348c:	eba4 0508 	sub.w	r5, r4, r8
    3490:	b19d      	cbz	r5, 34ba <_vfiprintf_r+0xc2>
    3492:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3494:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3496:	f8ca 8000 	str.w	r8, [sl]
    349a:	3301      	adds	r3, #1
    349c:	442a      	add	r2, r5
    349e:	2b07      	cmp	r3, #7
    34a0:	f8ca 5004 	str.w	r5, [sl, #4]
    34a4:	9211      	str	r2, [sp, #68]	; 0x44
    34a6:	9310      	str	r3, [sp, #64]	; 0x40
    34a8:	dd7a      	ble.n	35a0 <_vfiprintf_r+0x1a8>
    34aa:	2a00      	cmp	r2, #0
    34ac:	f040 84b0 	bne.w	3e10 <_vfiprintf_r+0xa18>
    34b0:	9b03      	ldr	r3, [sp, #12]
    34b2:	9210      	str	r2, [sp, #64]	; 0x40
    34b4:	442b      	add	r3, r5
    34b6:	46ca      	mov	sl, r9
    34b8:	9303      	str	r3, [sp, #12]
    34ba:	7823      	ldrb	r3, [r4, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	f000 83e0 	beq.w	3c82 <_vfiprintf_r+0x88a>
    34c2:	2000      	movs	r0, #0
    34c4:	f04f 0300 	mov.w	r3, #0
    34c8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    34cc:	f104 0801 	add.w	r8, r4, #1
    34d0:	7862      	ldrb	r2, [r4, #1]
    34d2:	4605      	mov	r5, r0
    34d4:	4606      	mov	r6, r0
    34d6:	4603      	mov	r3, r0
    34d8:	f04f 34ff 	mov.w	r4, #4294967295
    34dc:	f108 0801 	add.w	r8, r8, #1
    34e0:	f1a2 0120 	sub.w	r1, r2, #32
    34e4:	2958      	cmp	r1, #88	; 0x58
    34e6:	f200 82de 	bhi.w	3aa6 <_vfiprintf_r+0x6ae>
    34ea:	e8df f011 	tbh	[pc, r1, lsl #1]
    34ee:	0221      	.short	0x0221
    34f0:	02dc02dc 	.word	0x02dc02dc
    34f4:	02dc0229 	.word	0x02dc0229
    34f8:	02dc02dc 	.word	0x02dc02dc
    34fc:	02dc02dc 	.word	0x02dc02dc
    3500:	028902dc 	.word	0x028902dc
    3504:	02dc0295 	.word	0x02dc0295
    3508:	02bd00a2 	.word	0x02bd00a2
    350c:	019f02dc 	.word	0x019f02dc
    3510:	01a401a4 	.word	0x01a401a4
    3514:	01a401a4 	.word	0x01a401a4
    3518:	01a401a4 	.word	0x01a401a4
    351c:	01a401a4 	.word	0x01a401a4
    3520:	02dc01a4 	.word	0x02dc01a4
    3524:	02dc02dc 	.word	0x02dc02dc
    3528:	02dc02dc 	.word	0x02dc02dc
    352c:	02dc02dc 	.word	0x02dc02dc
    3530:	02dc02dc 	.word	0x02dc02dc
    3534:	01b202dc 	.word	0x01b202dc
    3538:	02dc02dc 	.word	0x02dc02dc
    353c:	02dc02dc 	.word	0x02dc02dc
    3540:	02dc02dc 	.word	0x02dc02dc
    3544:	02dc02dc 	.word	0x02dc02dc
    3548:	02dc02dc 	.word	0x02dc02dc
    354c:	02dc0197 	.word	0x02dc0197
    3550:	02dc02dc 	.word	0x02dc02dc
    3554:	02dc02dc 	.word	0x02dc02dc
    3558:	02dc019b 	.word	0x02dc019b
    355c:	025302dc 	.word	0x025302dc
    3560:	02dc02dc 	.word	0x02dc02dc
    3564:	02dc02dc 	.word	0x02dc02dc
    3568:	02dc02dc 	.word	0x02dc02dc
    356c:	02dc02dc 	.word	0x02dc02dc
    3570:	02dc02dc 	.word	0x02dc02dc
    3574:	021b025a 	.word	0x021b025a
    3578:	02dc02dc 	.word	0x02dc02dc
    357c:	026e02dc 	.word	0x026e02dc
    3580:	02dc021b 	.word	0x02dc021b
    3584:	027302dc 	.word	0x027302dc
    3588:	01f502dc 	.word	0x01f502dc
    358c:	02090182 	.word	0x02090182
    3590:	02dc02d7 	.word	0x02dc02d7
    3594:	02dc029a 	.word	0x02dc029a
    3598:	02dc00a7 	.word	0x02dc00a7
    359c:	022e02dc 	.word	0x022e02dc
    35a0:	f10a 0a08 	add.w	sl, sl, #8
    35a4:	9b03      	ldr	r3, [sp, #12]
    35a6:	442b      	add	r3, r5
    35a8:	9303      	str	r3, [sp, #12]
    35aa:	e786      	b.n	34ba <_vfiprintf_r+0xc2>
    35ac:	4659      	mov	r1, fp
    35ae:	9806      	ldr	r0, [sp, #24]
    35b0:	f000 fdac 	bl	410c <__swsetup_r>
    35b4:	bb18      	cbnz	r0, 35fe <_vfiprintf_r+0x206>
    35b6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
    35ba:	f001 031a 	and.w	r3, r1, #26
    35be:	2b0a      	cmp	r3, #10
    35c0:	f47f af4b 	bne.w	345a <_vfiprintf_r+0x62>
    35c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
    35c8:	2b00      	cmp	r3, #0
    35ca:	f6ff af46 	blt.w	345a <_vfiprintf_r+0x62>
    35ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    35d2:	07db      	lsls	r3, r3, #31
    35d4:	d405      	bmi.n	35e2 <_vfiprintf_r+0x1ea>
    35d6:	058f      	lsls	r7, r1, #22
    35d8:	d403      	bmi.n	35e2 <_vfiprintf_r+0x1ea>
    35da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    35de:	f001 fac3 	bl	4b68 <__retarget_lock_release_recursive>
    35e2:	462b      	mov	r3, r5
    35e4:	4642      	mov	r2, r8
    35e6:	4659      	mov	r1, fp
    35e8:	9806      	ldr	r0, [sp, #24]
    35ea:	f000 fd4d 	bl	4088 <__sbprintf>
    35ee:	9003      	str	r0, [sp, #12]
    35f0:	9803      	ldr	r0, [sp, #12]
    35f2:	b02d      	add	sp, #180	; 0xb4
    35f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35f8:	f000 fef4 	bl	43e4 <__sinit>
    35fc:	e709      	b.n	3412 <_vfiprintf_r+0x1a>
    35fe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    3602:	07d9      	lsls	r1, r3, #31
    3604:	d404      	bmi.n	3610 <_vfiprintf_r+0x218>
    3606:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    360a:	059a      	lsls	r2, r3, #22
    360c:	f140 84aa 	bpl.w	3f64 <_vfiprintf_r+0xb6c>
    3610:	f04f 33ff 	mov.w	r3, #4294967295
    3614:	9303      	str	r3, [sp, #12]
    3616:	9803      	ldr	r0, [sp, #12]
    3618:	b02d      	add	sp, #180	; 0xb4
    361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    361e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    3622:	f001 fa9f 	bl	4b64 <__retarget_lock_acquire_recursive>
    3626:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    362a:	b281      	uxth	r1, r0
    362c:	e6fb      	b.n	3426 <_vfiprintf_r+0x2e>
    362e:	4276      	negs	r6, r6
    3630:	9207      	str	r2, [sp, #28]
    3632:	f043 0304 	orr.w	r3, r3, #4
    3636:	f898 2000 	ldrb.w	r2, [r8]
    363a:	e74f      	b.n	34dc <_vfiprintf_r+0xe4>
    363c:	9608      	str	r6, [sp, #32]
    363e:	069e      	lsls	r6, r3, #26
    3640:	f100 8450 	bmi.w	3ee4 <_vfiprintf_r+0xaec>
    3644:	9907      	ldr	r1, [sp, #28]
    3646:	06dd      	lsls	r5, r3, #27
    3648:	460a      	mov	r2, r1
    364a:	f100 83ef 	bmi.w	3e2c <_vfiprintf_r+0xa34>
    364e:	0658      	lsls	r0, r3, #25
    3650:	f140 83ec 	bpl.w	3e2c <_vfiprintf_r+0xa34>
    3654:	880e      	ldrh	r6, [r1, #0]
    3656:	3104      	adds	r1, #4
    3658:	2700      	movs	r7, #0
    365a:	2201      	movs	r2, #1
    365c:	9107      	str	r1, [sp, #28]
    365e:	f04f 0100 	mov.w	r1, #0
    3662:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    3666:	2500      	movs	r5, #0
    3668:	1c61      	adds	r1, r4, #1
    366a:	f000 8116 	beq.w	389a <_vfiprintf_r+0x4a2>
    366e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    3672:	9102      	str	r1, [sp, #8]
    3674:	ea56 0107 	orrs.w	r1, r6, r7
    3678:	f040 8114 	bne.w	38a4 <_vfiprintf_r+0x4ac>
    367c:	2c00      	cmp	r4, #0
    367e:	f040 835c 	bne.w	3d3a <_vfiprintf_r+0x942>
    3682:	2a00      	cmp	r2, #0
    3684:	f040 83b7 	bne.w	3df6 <_vfiprintf_r+0x9fe>
    3688:	f013 0301 	ands.w	r3, r3, #1
    368c:	9305      	str	r3, [sp, #20]
    368e:	f000 8457 	beq.w	3f40 <_vfiprintf_r+0xb48>
    3692:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    3696:	2330      	movs	r3, #48	; 0x30
    3698:	f80b 3d41 	strb.w	r3, [fp, #-65]!
    369c:	9b05      	ldr	r3, [sp, #20]
    369e:	42a3      	cmp	r3, r4
    36a0:	bfb8      	it	lt
    36a2:	4623      	movlt	r3, r4
    36a4:	9301      	str	r3, [sp, #4]
    36a6:	b10d      	cbz	r5, 36ac <_vfiprintf_r+0x2b4>
    36a8:	3301      	adds	r3, #1
    36aa:	9301      	str	r3, [sp, #4]
    36ac:	9b02      	ldr	r3, [sp, #8]
    36ae:	f013 0302 	ands.w	r3, r3, #2
    36b2:	9309      	str	r3, [sp, #36]	; 0x24
    36b4:	d002      	beq.n	36bc <_vfiprintf_r+0x2c4>
    36b6:	9b01      	ldr	r3, [sp, #4]
    36b8:	3302      	adds	r3, #2
    36ba:	9301      	str	r3, [sp, #4]
    36bc:	9b02      	ldr	r3, [sp, #8]
    36be:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    36c2:	930a      	str	r3, [sp, #40]	; 0x28
    36c4:	f040 8217 	bne.w	3af6 <_vfiprintf_r+0x6fe>
    36c8:	9b08      	ldr	r3, [sp, #32]
    36ca:	9a01      	ldr	r2, [sp, #4]
    36cc:	1a9d      	subs	r5, r3, r2
    36ce:	2d00      	cmp	r5, #0
    36d0:	f340 8211 	ble.w	3af6 <_vfiprintf_r+0x6fe>
    36d4:	2d10      	cmp	r5, #16
    36d6:	f340 8490 	ble.w	3ffa <_vfiprintf_r+0xc02>
    36da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    36dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    36de:	4ec4      	ldr	r6, [pc, #784]	; (39f0 <_vfiprintf_r+0x5f8>)
    36e0:	46d6      	mov	lr, sl
    36e2:	2710      	movs	r7, #16
    36e4:	46a2      	mov	sl, r4
    36e6:	4619      	mov	r1, r3
    36e8:	9c06      	ldr	r4, [sp, #24]
    36ea:	e007      	b.n	36fc <_vfiprintf_r+0x304>
    36ec:	f101 0c02 	add.w	ip, r1, #2
    36f0:	f10e 0e08 	add.w	lr, lr, #8
    36f4:	4601      	mov	r1, r0
    36f6:	3d10      	subs	r5, #16
    36f8:	2d10      	cmp	r5, #16
    36fa:	dd11      	ble.n	3720 <_vfiprintf_r+0x328>
    36fc:	1c48      	adds	r0, r1, #1
    36fe:	3210      	adds	r2, #16
    3700:	2807      	cmp	r0, #7
    3702:	9211      	str	r2, [sp, #68]	; 0x44
    3704:	e88e 00c0 	stmia.w	lr, {r6, r7}
    3708:	9010      	str	r0, [sp, #64]	; 0x40
    370a:	ddef      	ble.n	36ec <_vfiprintf_r+0x2f4>
    370c:	2a00      	cmp	r2, #0
    370e:	f040 81e4 	bne.w	3ada <_vfiprintf_r+0x6e2>
    3712:	3d10      	subs	r5, #16
    3714:	2d10      	cmp	r5, #16
    3716:	4611      	mov	r1, r2
    3718:	f04f 0c01 	mov.w	ip, #1
    371c:	46ce      	mov	lr, r9
    371e:	dced      	bgt.n	36fc <_vfiprintf_r+0x304>
    3720:	4654      	mov	r4, sl
    3722:	4661      	mov	r1, ip
    3724:	46f2      	mov	sl, lr
    3726:	442a      	add	r2, r5
    3728:	2907      	cmp	r1, #7
    372a:	9211      	str	r2, [sp, #68]	; 0x44
    372c:	f8ca 6000 	str.w	r6, [sl]
    3730:	f8ca 5004 	str.w	r5, [sl, #4]
    3734:	9110      	str	r1, [sp, #64]	; 0x40
    3736:	f300 82ec 	bgt.w	3d12 <_vfiprintf_r+0x91a>
    373a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    373e:	f10a 0a08 	add.w	sl, sl, #8
    3742:	1c48      	adds	r0, r1, #1
    3744:	2d00      	cmp	r5, #0
    3746:	f040 81de 	bne.w	3b06 <_vfiprintf_r+0x70e>
    374a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    374c:	2b00      	cmp	r3, #0
    374e:	f000 81f8 	beq.w	3b42 <_vfiprintf_r+0x74a>
    3752:	3202      	adds	r2, #2
    3754:	a90e      	add	r1, sp, #56	; 0x38
    3756:	2302      	movs	r3, #2
    3758:	2807      	cmp	r0, #7
    375a:	9211      	str	r2, [sp, #68]	; 0x44
    375c:	9010      	str	r0, [sp, #64]	; 0x40
    375e:	e88a 000a 	stmia.w	sl, {r1, r3}
    3762:	f340 81ea 	ble.w	3b3a <_vfiprintf_r+0x742>
    3766:	2a00      	cmp	r2, #0
    3768:	f040 838c 	bne.w	3e84 <_vfiprintf_r+0xa8c>
    376c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    376e:	2b80      	cmp	r3, #128	; 0x80
    3770:	f04f 0001 	mov.w	r0, #1
    3774:	4611      	mov	r1, r2
    3776:	46ca      	mov	sl, r9
    3778:	f040 81e7 	bne.w	3b4a <_vfiprintf_r+0x752>
    377c:	9b08      	ldr	r3, [sp, #32]
    377e:	9d01      	ldr	r5, [sp, #4]
    3780:	1b5e      	subs	r6, r3, r5
    3782:	2e00      	cmp	r6, #0
    3784:	f340 81e1 	ble.w	3b4a <_vfiprintf_r+0x752>
    3788:	2e10      	cmp	r6, #16
    378a:	4d9a      	ldr	r5, [pc, #616]	; (39f4 <_vfiprintf_r+0x5fc>)
    378c:	f340 8450 	ble.w	4030 <_vfiprintf_r+0xc38>
    3790:	46d4      	mov	ip, sl
    3792:	2710      	movs	r7, #16
    3794:	46a2      	mov	sl, r4
    3796:	9c06      	ldr	r4, [sp, #24]
    3798:	e007      	b.n	37aa <_vfiprintf_r+0x3b2>
    379a:	f101 0e02 	add.w	lr, r1, #2
    379e:	f10c 0c08 	add.w	ip, ip, #8
    37a2:	4601      	mov	r1, r0
    37a4:	3e10      	subs	r6, #16
    37a6:	2e10      	cmp	r6, #16
    37a8:	dd11      	ble.n	37ce <_vfiprintf_r+0x3d6>
    37aa:	1c48      	adds	r0, r1, #1
    37ac:	3210      	adds	r2, #16
    37ae:	2807      	cmp	r0, #7
    37b0:	9211      	str	r2, [sp, #68]	; 0x44
    37b2:	e88c 00a0 	stmia.w	ip, {r5, r7}
    37b6:	9010      	str	r0, [sp, #64]	; 0x40
    37b8:	ddef      	ble.n	379a <_vfiprintf_r+0x3a2>
    37ba:	2a00      	cmp	r2, #0
    37bc:	f040 829d 	bne.w	3cfa <_vfiprintf_r+0x902>
    37c0:	3e10      	subs	r6, #16
    37c2:	2e10      	cmp	r6, #16
    37c4:	f04f 0e01 	mov.w	lr, #1
    37c8:	4611      	mov	r1, r2
    37ca:	46cc      	mov	ip, r9
    37cc:	dced      	bgt.n	37aa <_vfiprintf_r+0x3b2>
    37ce:	4654      	mov	r4, sl
    37d0:	46e2      	mov	sl, ip
    37d2:	4432      	add	r2, r6
    37d4:	f1be 0f07 	cmp.w	lr, #7
    37d8:	9211      	str	r2, [sp, #68]	; 0x44
    37da:	e88a 0060 	stmia.w	sl, {r5, r6}
    37de:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    37e2:	f300 8369 	bgt.w	3eb8 <_vfiprintf_r+0xac0>
    37e6:	f10a 0a08 	add.w	sl, sl, #8
    37ea:	f10e 0001 	add.w	r0, lr, #1
    37ee:	4671      	mov	r1, lr
    37f0:	e1ab      	b.n	3b4a <_vfiprintf_r+0x752>
    37f2:	9608      	str	r6, [sp, #32]
    37f4:	f013 0220 	ands.w	r2, r3, #32
    37f8:	f040 838c 	bne.w	3f14 <_vfiprintf_r+0xb1c>
    37fc:	f013 0110 	ands.w	r1, r3, #16
    3800:	f040 831a 	bne.w	3e38 <_vfiprintf_r+0xa40>
    3804:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    3808:	f000 8316 	beq.w	3e38 <_vfiprintf_r+0xa40>
    380c:	9807      	ldr	r0, [sp, #28]
    380e:	460a      	mov	r2, r1
    3810:	4601      	mov	r1, r0
    3812:	3104      	adds	r1, #4
    3814:	8806      	ldrh	r6, [r0, #0]
    3816:	9107      	str	r1, [sp, #28]
    3818:	2700      	movs	r7, #0
    381a:	e720      	b.n	365e <_vfiprintf_r+0x266>
    381c:	9608      	str	r6, [sp, #32]
    381e:	f043 0310 	orr.w	r3, r3, #16
    3822:	e7e7      	b.n	37f4 <_vfiprintf_r+0x3fc>
    3824:	9608      	str	r6, [sp, #32]
    3826:	f043 0310 	orr.w	r3, r3, #16
    382a:	e708      	b.n	363e <_vfiprintf_r+0x246>
    382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3830:	f898 2000 	ldrb.w	r2, [r8]
    3834:	e652      	b.n	34dc <_vfiprintf_r+0xe4>
    3836:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    383a:	2600      	movs	r6, #0
    383c:	f818 2b01 	ldrb.w	r2, [r8], #1
    3840:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3844:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    3848:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    384c:	2909      	cmp	r1, #9
    384e:	d9f5      	bls.n	383c <_vfiprintf_r+0x444>
    3850:	e646      	b.n	34e0 <_vfiprintf_r+0xe8>
    3852:	9608      	str	r6, [sp, #32]
    3854:	2800      	cmp	r0, #0
    3856:	f040 8408 	bne.w	406a <_vfiprintf_r+0xc72>
    385a:	f043 0310 	orr.w	r3, r3, #16
    385e:	069e      	lsls	r6, r3, #26
    3860:	f100 834c 	bmi.w	3efc <_vfiprintf_r+0xb04>
    3864:	06dd      	lsls	r5, r3, #27
    3866:	f100 82f3 	bmi.w	3e50 <_vfiprintf_r+0xa58>
    386a:	0658      	lsls	r0, r3, #25
    386c:	f140 82f0 	bpl.w	3e50 <_vfiprintf_r+0xa58>
    3870:	9d07      	ldr	r5, [sp, #28]
    3872:	f9b5 6000 	ldrsh.w	r6, [r5]
    3876:	462a      	mov	r2, r5
    3878:	17f7      	asrs	r7, r6, #31
    387a:	3204      	adds	r2, #4
    387c:	4630      	mov	r0, r6
    387e:	4639      	mov	r1, r7
    3880:	9207      	str	r2, [sp, #28]
    3882:	2800      	cmp	r0, #0
    3884:	f171 0200 	sbcs.w	r2, r1, #0
    3888:	f2c0 835d 	blt.w	3f46 <_vfiprintf_r+0xb4e>
    388c:	1c61      	adds	r1, r4, #1
    388e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3892:	f04f 0201 	mov.w	r2, #1
    3896:	f47f aeea 	bne.w	366e <_vfiprintf_r+0x276>
    389a:	ea56 0107 	orrs.w	r1, r6, r7
    389e:	f000 824d 	beq.w	3d3c <_vfiprintf_r+0x944>
    38a2:	9302      	str	r3, [sp, #8]
    38a4:	2a01      	cmp	r2, #1
    38a6:	f000 828c 	beq.w	3dc2 <_vfiprintf_r+0x9ca>
    38aa:	2a02      	cmp	r2, #2
    38ac:	f040 825c 	bne.w	3d68 <_vfiprintf_r+0x970>
    38b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    38b2:	46cb      	mov	fp, r9
    38b4:	0933      	lsrs	r3, r6, #4
    38b6:	f006 010f 	and.w	r1, r6, #15
    38ba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
    38be:	093a      	lsrs	r2, r7, #4
    38c0:	461e      	mov	r6, r3
    38c2:	4617      	mov	r7, r2
    38c4:	5c43      	ldrb	r3, [r0, r1]
    38c6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
    38ca:	ea56 0307 	orrs.w	r3, r6, r7
    38ce:	d1f1      	bne.n	38b4 <_vfiprintf_r+0x4bc>
    38d0:	eba9 030b 	sub.w	r3, r9, fp
    38d4:	9305      	str	r3, [sp, #20]
    38d6:	e6e1      	b.n	369c <_vfiprintf_r+0x2a4>
    38d8:	2800      	cmp	r0, #0
    38da:	f040 83c0 	bne.w	405e <_vfiprintf_r+0xc66>
    38de:	0699      	lsls	r1, r3, #26
    38e0:	f100 8367 	bmi.w	3fb2 <_vfiprintf_r+0xbba>
    38e4:	06da      	lsls	r2, r3, #27
    38e6:	f100 80f1 	bmi.w	3acc <_vfiprintf_r+0x6d4>
    38ea:	065b      	lsls	r3, r3, #25
    38ec:	f140 80ee 	bpl.w	3acc <_vfiprintf_r+0x6d4>
    38f0:	9a07      	ldr	r2, [sp, #28]
    38f2:	6813      	ldr	r3, [r2, #0]
    38f4:	3204      	adds	r2, #4
    38f6:	9207      	str	r2, [sp, #28]
    38f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    38fc:	801a      	strh	r2, [r3, #0]
    38fe:	e5b8      	b.n	3472 <_vfiprintf_r+0x7a>
    3900:	9807      	ldr	r0, [sp, #28]
    3902:	4a3d      	ldr	r2, [pc, #244]	; (39f8 <_vfiprintf_r+0x600>)
    3904:	9608      	str	r6, [sp, #32]
    3906:	920b      	str	r2, [sp, #44]	; 0x2c
    3908:	6806      	ldr	r6, [r0, #0]
    390a:	2278      	movs	r2, #120	; 0x78
    390c:	2130      	movs	r1, #48	; 0x30
    390e:	3004      	adds	r0, #4
    3910:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    3914:	f043 0302 	orr.w	r3, r3, #2
    3918:	9007      	str	r0, [sp, #28]
    391a:	2700      	movs	r7, #0
    391c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    3920:	2202      	movs	r2, #2
    3922:	e69c      	b.n	365e <_vfiprintf_r+0x266>
    3924:	9608      	str	r6, [sp, #32]
    3926:	2800      	cmp	r0, #0
    3928:	d099      	beq.n	385e <_vfiprintf_r+0x466>
    392a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    392e:	e796      	b.n	385e <_vfiprintf_r+0x466>
    3930:	f898 2000 	ldrb.w	r2, [r8]
    3934:	2d00      	cmp	r5, #0
    3936:	f47f add1 	bne.w	34dc <_vfiprintf_r+0xe4>
    393a:	2001      	movs	r0, #1
    393c:	2520      	movs	r5, #32
    393e:	e5cd      	b.n	34dc <_vfiprintf_r+0xe4>
    3940:	f043 0301 	orr.w	r3, r3, #1
    3944:	f898 2000 	ldrb.w	r2, [r8]
    3948:	e5c8      	b.n	34dc <_vfiprintf_r+0xe4>
    394a:	9608      	str	r6, [sp, #32]
    394c:	2800      	cmp	r0, #0
    394e:	f040 8393 	bne.w	4078 <_vfiprintf_r+0xc80>
    3952:	4929      	ldr	r1, [pc, #164]	; (39f8 <_vfiprintf_r+0x600>)
    3954:	910b      	str	r1, [sp, #44]	; 0x2c
    3956:	069f      	lsls	r7, r3, #26
    3958:	f100 82e8 	bmi.w	3f2c <_vfiprintf_r+0xb34>
    395c:	9807      	ldr	r0, [sp, #28]
    395e:	06de      	lsls	r6, r3, #27
    3960:	4601      	mov	r1, r0
    3962:	f100 8270 	bmi.w	3e46 <_vfiprintf_r+0xa4e>
    3966:	065d      	lsls	r5, r3, #25
    3968:	f140 826d 	bpl.w	3e46 <_vfiprintf_r+0xa4e>
    396c:	3104      	adds	r1, #4
    396e:	8806      	ldrh	r6, [r0, #0]
    3970:	9107      	str	r1, [sp, #28]
    3972:	2700      	movs	r7, #0
    3974:	07d8      	lsls	r0, r3, #31
    3976:	f140 8222 	bpl.w	3dbe <_vfiprintf_r+0x9c6>
    397a:	ea56 0107 	orrs.w	r1, r6, r7
    397e:	f000 821e 	beq.w	3dbe <_vfiprintf_r+0x9c6>
    3982:	2130      	movs	r1, #48	; 0x30
    3984:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    3988:	f043 0302 	orr.w	r3, r3, #2
    398c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    3990:	2202      	movs	r2, #2
    3992:	e664      	b.n	365e <_vfiprintf_r+0x266>
    3994:	9608      	str	r6, [sp, #32]
    3996:	2800      	cmp	r0, #0
    3998:	f040 836b 	bne.w	4072 <_vfiprintf_r+0xc7a>
    399c:	4917      	ldr	r1, [pc, #92]	; (39fc <_vfiprintf_r+0x604>)
    399e:	910b      	str	r1, [sp, #44]	; 0x2c
    39a0:	e7d9      	b.n	3956 <_vfiprintf_r+0x55e>
    39a2:	9907      	ldr	r1, [sp, #28]
    39a4:	9608      	str	r6, [sp, #32]
    39a6:	680a      	ldr	r2, [r1, #0]
    39a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    39ac:	f04f 0000 	mov.w	r0, #0
    39b0:	460a      	mov	r2, r1
    39b2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    39b6:	3204      	adds	r2, #4
    39b8:	2001      	movs	r0, #1
    39ba:	9001      	str	r0, [sp, #4]
    39bc:	9207      	str	r2, [sp, #28]
    39be:	9005      	str	r0, [sp, #20]
    39c0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    39c4:	9302      	str	r3, [sp, #8]
    39c6:	2400      	movs	r4, #0
    39c8:	e670      	b.n	36ac <_vfiprintf_r+0x2b4>
    39ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    39ce:	f898 2000 	ldrb.w	r2, [r8]
    39d2:	e583      	b.n	34dc <_vfiprintf_r+0xe4>
    39d4:	f898 2000 	ldrb.w	r2, [r8]
    39d8:	2a6c      	cmp	r2, #108	; 0x6c
    39da:	bf03      	ittte	eq
    39dc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
    39e0:	f043 0320 	orreq.w	r3, r3, #32
    39e4:	f108 0801 	addeq.w	r8, r8, #1
    39e8:	f043 0310 	orrne.w	r3, r3, #16
    39ec:	e576      	b.n	34dc <_vfiprintf_r+0xe4>
    39ee:	bf00      	nop
    39f0:	00005f78 	.word	0x00005f78
    39f4:	00005f88 	.word	0x00005f88
    39f8:	00005f5c 	.word	0x00005f5c
    39fc:	00005f48 	.word	0x00005f48
    3a00:	9907      	ldr	r1, [sp, #28]
    3a02:	680e      	ldr	r6, [r1, #0]
    3a04:	460a      	mov	r2, r1
    3a06:	2e00      	cmp	r6, #0
    3a08:	f102 0204 	add.w	r2, r2, #4
    3a0c:	f6ff ae0f 	blt.w	362e <_vfiprintf_r+0x236>
    3a10:	9207      	str	r2, [sp, #28]
    3a12:	f898 2000 	ldrb.w	r2, [r8]
    3a16:	e561      	b.n	34dc <_vfiprintf_r+0xe4>
    3a18:	f898 2000 	ldrb.w	r2, [r8]
    3a1c:	2001      	movs	r0, #1
    3a1e:	252b      	movs	r5, #43	; 0x2b
    3a20:	e55c      	b.n	34dc <_vfiprintf_r+0xe4>
    3a22:	9907      	ldr	r1, [sp, #28]
    3a24:	9608      	str	r6, [sp, #32]
    3a26:	f8d1 b000 	ldr.w	fp, [r1]
    3a2a:	f04f 0200 	mov.w	r2, #0
    3a2e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3a32:	1d0e      	adds	r6, r1, #4
    3a34:	f1bb 0f00 	cmp.w	fp, #0
    3a38:	f000 82e5 	beq.w	4006 <_vfiprintf_r+0xc0e>
    3a3c:	1c67      	adds	r7, r4, #1
    3a3e:	f000 82c4 	beq.w	3fca <_vfiprintf_r+0xbd2>
    3a42:	4622      	mov	r2, r4
    3a44:	2100      	movs	r1, #0
    3a46:	4658      	mov	r0, fp
    3a48:	9301      	str	r3, [sp, #4]
    3a4a:	f001 fbd1 	bl	51f0 <memchr>
    3a4e:	9b01      	ldr	r3, [sp, #4]
    3a50:	2800      	cmp	r0, #0
    3a52:	f000 82e5 	beq.w	4020 <_vfiprintf_r+0xc28>
    3a56:	eba0 020b 	sub.w	r2, r0, fp
    3a5a:	9205      	str	r2, [sp, #20]
    3a5c:	9607      	str	r6, [sp, #28]
    3a5e:	9302      	str	r3, [sp, #8]
    3a60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3a64:	2400      	movs	r4, #0
    3a66:	e619      	b.n	369c <_vfiprintf_r+0x2a4>
    3a68:	f898 2000 	ldrb.w	r2, [r8]
    3a6c:	2a2a      	cmp	r2, #42	; 0x2a
    3a6e:	f108 0701 	add.w	r7, r8, #1
    3a72:	f000 82e9 	beq.w	4048 <_vfiprintf_r+0xc50>
    3a76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3a7a:	2909      	cmp	r1, #9
    3a7c:	46b8      	mov	r8, r7
    3a7e:	f04f 0400 	mov.w	r4, #0
    3a82:	f63f ad2d 	bhi.w	34e0 <_vfiprintf_r+0xe8>
    3a86:	f818 2b01 	ldrb.w	r2, [r8], #1
    3a8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3a8e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    3a92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3a96:	2909      	cmp	r1, #9
    3a98:	d9f5      	bls.n	3a86 <_vfiprintf_r+0x68e>
    3a9a:	e521      	b.n	34e0 <_vfiprintf_r+0xe8>
    3a9c:	f043 0320 	orr.w	r3, r3, #32
    3aa0:	f898 2000 	ldrb.w	r2, [r8]
    3aa4:	e51a      	b.n	34dc <_vfiprintf_r+0xe4>
    3aa6:	9608      	str	r6, [sp, #32]
    3aa8:	2800      	cmp	r0, #0
    3aaa:	f040 82db 	bne.w	4064 <_vfiprintf_r+0xc6c>
    3aae:	2a00      	cmp	r2, #0
    3ab0:	f000 80e7 	beq.w	3c82 <_vfiprintf_r+0x88a>
    3ab4:	2101      	movs	r1, #1
    3ab6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    3aba:	f04f 0200 	mov.w	r2, #0
    3abe:	9101      	str	r1, [sp, #4]
    3ac0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3ac4:	9105      	str	r1, [sp, #20]
    3ac6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    3aca:	e77b      	b.n	39c4 <_vfiprintf_r+0x5cc>
    3acc:	9a07      	ldr	r2, [sp, #28]
    3ace:	6813      	ldr	r3, [r2, #0]
    3ad0:	3204      	adds	r2, #4
    3ad2:	9207      	str	r2, [sp, #28]
    3ad4:	9a03      	ldr	r2, [sp, #12]
    3ad6:	601a      	str	r2, [r3, #0]
    3ad8:	e4cb      	b.n	3472 <_vfiprintf_r+0x7a>
    3ada:	aa0f      	add	r2, sp, #60	; 0x3c
    3adc:	9904      	ldr	r1, [sp, #16]
    3ade:	4620      	mov	r0, r4
    3ae0:	f7ff fc4a 	bl	3378 <__sprint_r.part.0>
    3ae4:	2800      	cmp	r0, #0
    3ae6:	f040 8139 	bne.w	3d5c <_vfiprintf_r+0x964>
    3aea:	9910      	ldr	r1, [sp, #64]	; 0x40
    3aec:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3aee:	f101 0c01 	add.w	ip, r1, #1
    3af2:	46ce      	mov	lr, r9
    3af4:	e5ff      	b.n	36f6 <_vfiprintf_r+0x2fe>
    3af6:	9910      	ldr	r1, [sp, #64]	; 0x40
    3af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3afa:	1c48      	adds	r0, r1, #1
    3afc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3b00:	2d00      	cmp	r5, #0
    3b02:	f43f ae22 	beq.w	374a <_vfiprintf_r+0x352>
    3b06:	3201      	adds	r2, #1
    3b08:	f10d 0537 	add.w	r5, sp, #55	; 0x37
    3b0c:	2101      	movs	r1, #1
    3b0e:	2807      	cmp	r0, #7
    3b10:	9211      	str	r2, [sp, #68]	; 0x44
    3b12:	9010      	str	r0, [sp, #64]	; 0x40
    3b14:	f8ca 5000 	str.w	r5, [sl]
    3b18:	f8ca 1004 	str.w	r1, [sl, #4]
    3b1c:	f340 8108 	ble.w	3d30 <_vfiprintf_r+0x938>
    3b20:	2a00      	cmp	r2, #0
    3b22:	f040 81bc 	bne.w	3e9e <_vfiprintf_r+0xaa6>
    3b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b28:	2b00      	cmp	r3, #0
    3b2a:	f43f ae1f 	beq.w	376c <_vfiprintf_r+0x374>
    3b2e:	ab0e      	add	r3, sp, #56	; 0x38
    3b30:	2202      	movs	r2, #2
    3b32:	4608      	mov	r0, r1
    3b34:	931c      	str	r3, [sp, #112]	; 0x70
    3b36:	921d      	str	r2, [sp, #116]	; 0x74
    3b38:	46ca      	mov	sl, r9
    3b3a:	4601      	mov	r1, r0
    3b3c:	f10a 0a08 	add.w	sl, sl, #8
    3b40:	3001      	adds	r0, #1
    3b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b44:	2b80      	cmp	r3, #128	; 0x80
    3b46:	f43f ae19 	beq.w	377c <_vfiprintf_r+0x384>
    3b4a:	9b05      	ldr	r3, [sp, #20]
    3b4c:	1ae4      	subs	r4, r4, r3
    3b4e:	2c00      	cmp	r4, #0
    3b50:	dd2e      	ble.n	3bb0 <_vfiprintf_r+0x7b8>
    3b52:	2c10      	cmp	r4, #16
    3b54:	4db3      	ldr	r5, [pc, #716]	; (3e24 <_vfiprintf_r+0xa2c>)
    3b56:	dd1e      	ble.n	3b96 <_vfiprintf_r+0x79e>
    3b58:	46d6      	mov	lr, sl
    3b5a:	2610      	movs	r6, #16
    3b5c:	9f06      	ldr	r7, [sp, #24]
    3b5e:	f8dd a010 	ldr.w	sl, [sp, #16]
    3b62:	e006      	b.n	3b72 <_vfiprintf_r+0x77a>
    3b64:	1c88      	adds	r0, r1, #2
    3b66:	f10e 0e08 	add.w	lr, lr, #8
    3b6a:	4619      	mov	r1, r3
    3b6c:	3c10      	subs	r4, #16
    3b6e:	2c10      	cmp	r4, #16
    3b70:	dd10      	ble.n	3b94 <_vfiprintf_r+0x79c>
    3b72:	1c4b      	adds	r3, r1, #1
    3b74:	3210      	adds	r2, #16
    3b76:	2b07      	cmp	r3, #7
    3b78:	9211      	str	r2, [sp, #68]	; 0x44
    3b7a:	e88e 0060 	stmia.w	lr, {r5, r6}
    3b7e:	9310      	str	r3, [sp, #64]	; 0x40
    3b80:	ddf0      	ble.n	3b64 <_vfiprintf_r+0x76c>
    3b82:	2a00      	cmp	r2, #0
    3b84:	d165      	bne.n	3c52 <_vfiprintf_r+0x85a>
    3b86:	3c10      	subs	r4, #16
    3b88:	2c10      	cmp	r4, #16
    3b8a:	f04f 0001 	mov.w	r0, #1
    3b8e:	4611      	mov	r1, r2
    3b90:	46ce      	mov	lr, r9
    3b92:	dcee      	bgt.n	3b72 <_vfiprintf_r+0x77a>
    3b94:	46f2      	mov	sl, lr
    3b96:	4422      	add	r2, r4
    3b98:	2807      	cmp	r0, #7
    3b9a:	9211      	str	r2, [sp, #68]	; 0x44
    3b9c:	f8ca 5000 	str.w	r5, [sl]
    3ba0:	f8ca 4004 	str.w	r4, [sl, #4]
    3ba4:	9010      	str	r0, [sp, #64]	; 0x40
    3ba6:	f300 8085 	bgt.w	3cb4 <_vfiprintf_r+0x8bc>
    3baa:	f10a 0a08 	add.w	sl, sl, #8
    3bae:	3001      	adds	r0, #1
    3bb0:	9905      	ldr	r1, [sp, #20]
    3bb2:	f8ca b000 	str.w	fp, [sl]
    3bb6:	440a      	add	r2, r1
    3bb8:	2807      	cmp	r0, #7
    3bba:	9211      	str	r2, [sp, #68]	; 0x44
    3bbc:	f8ca 1004 	str.w	r1, [sl, #4]
    3bc0:	9010      	str	r0, [sp, #64]	; 0x40
    3bc2:	f340 8082 	ble.w	3cca <_vfiprintf_r+0x8d2>
    3bc6:	2a00      	cmp	r2, #0
    3bc8:	f040 8118 	bne.w	3dfc <_vfiprintf_r+0xa04>
    3bcc:	9b02      	ldr	r3, [sp, #8]
    3bce:	9210      	str	r2, [sp, #64]	; 0x40
    3bd0:	0758      	lsls	r0, r3, #29
    3bd2:	d535      	bpl.n	3c40 <_vfiprintf_r+0x848>
    3bd4:	9b08      	ldr	r3, [sp, #32]
    3bd6:	9901      	ldr	r1, [sp, #4]
    3bd8:	1a5c      	subs	r4, r3, r1
    3bda:	2c00      	cmp	r4, #0
    3bdc:	f340 80e7 	ble.w	3dae <_vfiprintf_r+0x9b6>
    3be0:	46ca      	mov	sl, r9
    3be2:	2c10      	cmp	r4, #16
    3be4:	f340 8218 	ble.w	4018 <_vfiprintf_r+0xc20>
    3be8:	9910      	ldr	r1, [sp, #64]	; 0x40
    3bea:	4e8f      	ldr	r6, [pc, #572]	; (3e28 <_vfiprintf_r+0xa30>)
    3bec:	9f06      	ldr	r7, [sp, #24]
    3bee:	f8dd b010 	ldr.w	fp, [sp, #16]
    3bf2:	2510      	movs	r5, #16
    3bf4:	e006      	b.n	3c04 <_vfiprintf_r+0x80c>
    3bf6:	1c88      	adds	r0, r1, #2
    3bf8:	f10a 0a08 	add.w	sl, sl, #8
    3bfc:	4619      	mov	r1, r3
    3bfe:	3c10      	subs	r4, #16
    3c00:	2c10      	cmp	r4, #16
    3c02:	dd11      	ble.n	3c28 <_vfiprintf_r+0x830>
    3c04:	1c4b      	adds	r3, r1, #1
    3c06:	3210      	adds	r2, #16
    3c08:	2b07      	cmp	r3, #7
    3c0a:	9211      	str	r2, [sp, #68]	; 0x44
    3c0c:	f8ca 6000 	str.w	r6, [sl]
    3c10:	f8ca 5004 	str.w	r5, [sl, #4]
    3c14:	9310      	str	r3, [sp, #64]	; 0x40
    3c16:	ddee      	ble.n	3bf6 <_vfiprintf_r+0x7fe>
    3c18:	bb42      	cbnz	r2, 3c6c <_vfiprintf_r+0x874>
    3c1a:	3c10      	subs	r4, #16
    3c1c:	2c10      	cmp	r4, #16
    3c1e:	f04f 0001 	mov.w	r0, #1
    3c22:	4611      	mov	r1, r2
    3c24:	46ca      	mov	sl, r9
    3c26:	dced      	bgt.n	3c04 <_vfiprintf_r+0x80c>
    3c28:	4422      	add	r2, r4
    3c2a:	2807      	cmp	r0, #7
    3c2c:	9211      	str	r2, [sp, #68]	; 0x44
    3c2e:	f8ca 6000 	str.w	r6, [sl]
    3c32:	f8ca 4004 	str.w	r4, [sl, #4]
    3c36:	9010      	str	r0, [sp, #64]	; 0x40
    3c38:	dd51      	ble.n	3cde <_vfiprintf_r+0x8e6>
    3c3a:	2a00      	cmp	r2, #0
    3c3c:	f040 819b 	bne.w	3f76 <_vfiprintf_r+0xb7e>
    3c40:	9b03      	ldr	r3, [sp, #12]
    3c42:	9a08      	ldr	r2, [sp, #32]
    3c44:	9901      	ldr	r1, [sp, #4]
    3c46:	428a      	cmp	r2, r1
    3c48:	bfac      	ite	ge
    3c4a:	189b      	addge	r3, r3, r2
    3c4c:	185b      	addlt	r3, r3, r1
    3c4e:	9303      	str	r3, [sp, #12]
    3c50:	e04e      	b.n	3cf0 <_vfiprintf_r+0x8f8>
    3c52:	aa0f      	add	r2, sp, #60	; 0x3c
    3c54:	4651      	mov	r1, sl
    3c56:	4638      	mov	r0, r7
    3c58:	f7ff fb8e 	bl	3378 <__sprint_r.part.0>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	f040 813f 	bne.w	3ee0 <_vfiprintf_r+0xae8>
    3c62:	9910      	ldr	r1, [sp, #64]	; 0x40
    3c64:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c66:	1c48      	adds	r0, r1, #1
    3c68:	46ce      	mov	lr, r9
    3c6a:	e77f      	b.n	3b6c <_vfiprintf_r+0x774>
    3c6c:	aa0f      	add	r2, sp, #60	; 0x3c
    3c6e:	4659      	mov	r1, fp
    3c70:	4638      	mov	r0, r7
    3c72:	f7ff fb81 	bl	3378 <__sprint_r.part.0>
    3c76:	b960      	cbnz	r0, 3c92 <_vfiprintf_r+0x89a>
    3c78:	9910      	ldr	r1, [sp, #64]	; 0x40
    3c7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c7c:	1c48      	adds	r0, r1, #1
    3c7e:	46ca      	mov	sl, r9
    3c80:	e7bd      	b.n	3bfe <_vfiprintf_r+0x806>
    3c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3c84:	f8dd b010 	ldr.w	fp, [sp, #16]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	f040 81d4 	bne.w	4036 <_vfiprintf_r+0xc3e>
    3c8e:	2300      	movs	r3, #0
    3c90:	9310      	str	r3, [sp, #64]	; 0x40
    3c92:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    3c96:	f013 0f01 	tst.w	r3, #1
    3c9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    3c9e:	d102      	bne.n	3ca6 <_vfiprintf_r+0x8ae>
    3ca0:	059a      	lsls	r2, r3, #22
    3ca2:	f140 80de 	bpl.w	3e62 <_vfiprintf_r+0xa6a>
    3ca6:	065b      	lsls	r3, r3, #25
    3ca8:	f53f acb2 	bmi.w	3610 <_vfiprintf_r+0x218>
    3cac:	9803      	ldr	r0, [sp, #12]
    3cae:	b02d      	add	sp, #180	; 0xb4
    3cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	f040 8106 	bne.w	3ec6 <_vfiprintf_r+0xace>
    3cba:	9a05      	ldr	r2, [sp, #20]
    3cbc:	921d      	str	r2, [sp, #116]	; 0x74
    3cbe:	2301      	movs	r3, #1
    3cc0:	9211      	str	r2, [sp, #68]	; 0x44
    3cc2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
    3cc6:	9310      	str	r3, [sp, #64]	; 0x40
    3cc8:	46ca      	mov	sl, r9
    3cca:	f10a 0a08 	add.w	sl, sl, #8
    3cce:	9b02      	ldr	r3, [sp, #8]
    3cd0:	0759      	lsls	r1, r3, #29
    3cd2:	d504      	bpl.n	3cde <_vfiprintf_r+0x8e6>
    3cd4:	9b08      	ldr	r3, [sp, #32]
    3cd6:	9901      	ldr	r1, [sp, #4]
    3cd8:	1a5c      	subs	r4, r3, r1
    3cda:	2c00      	cmp	r4, #0
    3cdc:	dc81      	bgt.n	3be2 <_vfiprintf_r+0x7ea>
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	9908      	ldr	r1, [sp, #32]
    3ce2:	9801      	ldr	r0, [sp, #4]
    3ce4:	4281      	cmp	r1, r0
    3ce6:	bfac      	ite	ge
    3ce8:	185b      	addge	r3, r3, r1
    3cea:	181b      	addlt	r3, r3, r0
    3cec:	9303      	str	r3, [sp, #12]
    3cee:	bb72      	cbnz	r2, 3d4e <_vfiprintf_r+0x956>
    3cf0:	2300      	movs	r3, #0
    3cf2:	9310      	str	r3, [sp, #64]	; 0x40
    3cf4:	46ca      	mov	sl, r9
    3cf6:	f7ff bbbc 	b.w	3472 <_vfiprintf_r+0x7a>
    3cfa:	aa0f      	add	r2, sp, #60	; 0x3c
    3cfc:	9904      	ldr	r1, [sp, #16]
    3cfe:	4620      	mov	r0, r4
    3d00:	f7ff fb3a 	bl	3378 <__sprint_r.part.0>
    3d04:	bb50      	cbnz	r0, 3d5c <_vfiprintf_r+0x964>
    3d06:	9910      	ldr	r1, [sp, #64]	; 0x40
    3d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3d0a:	f101 0e01 	add.w	lr, r1, #1
    3d0e:	46cc      	mov	ip, r9
    3d10:	e548      	b.n	37a4 <_vfiprintf_r+0x3ac>
    3d12:	2a00      	cmp	r2, #0
    3d14:	f040 8140 	bne.w	3f98 <_vfiprintf_r+0xba0>
    3d18:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
    3d1c:	2900      	cmp	r1, #0
    3d1e:	f000 811b 	beq.w	3f58 <_vfiprintf_r+0xb60>
    3d22:	2201      	movs	r2, #1
    3d24:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    3d28:	4610      	mov	r0, r2
    3d2a:	921d      	str	r2, [sp, #116]	; 0x74
    3d2c:	911c      	str	r1, [sp, #112]	; 0x70
    3d2e:	46ca      	mov	sl, r9
    3d30:	4601      	mov	r1, r0
    3d32:	f10a 0a08 	add.w	sl, sl, #8
    3d36:	3001      	adds	r0, #1
    3d38:	e507      	b.n	374a <_vfiprintf_r+0x352>
    3d3a:	9b02      	ldr	r3, [sp, #8]
    3d3c:	2a01      	cmp	r2, #1
    3d3e:	f000 8098 	beq.w	3e72 <_vfiprintf_r+0xa7a>
    3d42:	2a02      	cmp	r2, #2
    3d44:	d10d      	bne.n	3d62 <_vfiprintf_r+0x96a>
    3d46:	9302      	str	r3, [sp, #8]
    3d48:	2600      	movs	r6, #0
    3d4a:	2700      	movs	r7, #0
    3d4c:	e5b0      	b.n	38b0 <_vfiprintf_r+0x4b8>
    3d4e:	aa0f      	add	r2, sp, #60	; 0x3c
    3d50:	9904      	ldr	r1, [sp, #16]
    3d52:	9806      	ldr	r0, [sp, #24]
    3d54:	f7ff fb10 	bl	3378 <__sprint_r.part.0>
    3d58:	2800      	cmp	r0, #0
    3d5a:	d0c9      	beq.n	3cf0 <_vfiprintf_r+0x8f8>
    3d5c:	f8dd b010 	ldr.w	fp, [sp, #16]
    3d60:	e797      	b.n	3c92 <_vfiprintf_r+0x89a>
    3d62:	9302      	str	r3, [sp, #8]
    3d64:	2600      	movs	r6, #0
    3d66:	2700      	movs	r7, #0
    3d68:	4649      	mov	r1, r9
    3d6a:	e000      	b.n	3d6e <_vfiprintf_r+0x976>
    3d6c:	4659      	mov	r1, fp
    3d6e:	08f2      	lsrs	r2, r6, #3
    3d70:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
    3d74:	08f8      	lsrs	r0, r7, #3
    3d76:	f006 0307 	and.w	r3, r6, #7
    3d7a:	4607      	mov	r7, r0
    3d7c:	4616      	mov	r6, r2
    3d7e:	3330      	adds	r3, #48	; 0x30
    3d80:	ea56 0207 	orrs.w	r2, r6, r7
    3d84:	f801 3c01 	strb.w	r3, [r1, #-1]
    3d88:	f101 3bff 	add.w	fp, r1, #4294967295
    3d8c:	d1ee      	bne.n	3d6c <_vfiprintf_r+0x974>
    3d8e:	9a02      	ldr	r2, [sp, #8]
    3d90:	07d6      	lsls	r6, r2, #31
    3d92:	f57f ad9d 	bpl.w	38d0 <_vfiprintf_r+0x4d8>
    3d96:	2b30      	cmp	r3, #48	; 0x30
    3d98:	f43f ad9a 	beq.w	38d0 <_vfiprintf_r+0x4d8>
    3d9c:	3902      	subs	r1, #2
    3d9e:	2330      	movs	r3, #48	; 0x30
    3da0:	f80b 3c01 	strb.w	r3, [fp, #-1]
    3da4:	eba9 0301 	sub.w	r3, r9, r1
    3da8:	9305      	str	r3, [sp, #20]
    3daa:	468b      	mov	fp, r1
    3dac:	e476      	b.n	369c <_vfiprintf_r+0x2a4>
    3dae:	9b03      	ldr	r3, [sp, #12]
    3db0:	9a08      	ldr	r2, [sp, #32]
    3db2:	428a      	cmp	r2, r1
    3db4:	bfac      	ite	ge
    3db6:	189b      	addge	r3, r3, r2
    3db8:	185b      	addlt	r3, r3, r1
    3dba:	9303      	str	r3, [sp, #12]
    3dbc:	e798      	b.n	3cf0 <_vfiprintf_r+0x8f8>
    3dbe:	2202      	movs	r2, #2
    3dc0:	e44d      	b.n	365e <_vfiprintf_r+0x266>
    3dc2:	2f00      	cmp	r7, #0
    3dc4:	bf08      	it	eq
    3dc6:	2e0a      	cmpeq	r6, #10
    3dc8:	d352      	bcc.n	3e70 <_vfiprintf_r+0xa78>
    3dca:	46cb      	mov	fp, r9
    3dcc:	4630      	mov	r0, r6
    3dce:	4639      	mov	r1, r7
    3dd0:	220a      	movs	r2, #10
    3dd2:	2300      	movs	r3, #0
    3dd4:	f001 ff10 	bl	5bf8 <__aeabi_uldivmod>
    3dd8:	3230      	adds	r2, #48	; 0x30
    3dda:	f80b 2d01 	strb.w	r2, [fp, #-1]!
    3dde:	4630      	mov	r0, r6
    3de0:	4639      	mov	r1, r7
    3de2:	2300      	movs	r3, #0
    3de4:	220a      	movs	r2, #10
    3de6:	f001 ff07 	bl	5bf8 <__aeabi_uldivmod>
    3dea:	4606      	mov	r6, r0
    3dec:	460f      	mov	r7, r1
    3dee:	ea56 0307 	orrs.w	r3, r6, r7
    3df2:	d1eb      	bne.n	3dcc <_vfiprintf_r+0x9d4>
    3df4:	e56c      	b.n	38d0 <_vfiprintf_r+0x4d8>
    3df6:	9405      	str	r4, [sp, #20]
    3df8:	46cb      	mov	fp, r9
    3dfa:	e44f      	b.n	369c <_vfiprintf_r+0x2a4>
    3dfc:	aa0f      	add	r2, sp, #60	; 0x3c
    3dfe:	9904      	ldr	r1, [sp, #16]
    3e00:	9806      	ldr	r0, [sp, #24]
    3e02:	f7ff fab9 	bl	3378 <__sprint_r.part.0>
    3e06:	2800      	cmp	r0, #0
    3e08:	d1a8      	bne.n	3d5c <_vfiprintf_r+0x964>
    3e0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e0c:	46ca      	mov	sl, r9
    3e0e:	e75e      	b.n	3cce <_vfiprintf_r+0x8d6>
    3e10:	aa0f      	add	r2, sp, #60	; 0x3c
    3e12:	9904      	ldr	r1, [sp, #16]
    3e14:	9806      	ldr	r0, [sp, #24]
    3e16:	f7ff faaf 	bl	3378 <__sprint_r.part.0>
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d19e      	bne.n	3d5c <_vfiprintf_r+0x964>
    3e1e:	46ca      	mov	sl, r9
    3e20:	f7ff bbc0 	b.w	35a4 <_vfiprintf_r+0x1ac>
    3e24:	00005f88 	.word	0x00005f88
    3e28:	00005f78 	.word	0x00005f78
    3e2c:	3104      	adds	r1, #4
    3e2e:	6816      	ldr	r6, [r2, #0]
    3e30:	9107      	str	r1, [sp, #28]
    3e32:	2201      	movs	r2, #1
    3e34:	2700      	movs	r7, #0
    3e36:	e412      	b.n	365e <_vfiprintf_r+0x266>
    3e38:	9807      	ldr	r0, [sp, #28]
    3e3a:	4601      	mov	r1, r0
    3e3c:	3104      	adds	r1, #4
    3e3e:	6806      	ldr	r6, [r0, #0]
    3e40:	9107      	str	r1, [sp, #28]
    3e42:	2700      	movs	r7, #0
    3e44:	e40b      	b.n	365e <_vfiprintf_r+0x266>
    3e46:	680e      	ldr	r6, [r1, #0]
    3e48:	3104      	adds	r1, #4
    3e4a:	9107      	str	r1, [sp, #28]
    3e4c:	2700      	movs	r7, #0
    3e4e:	e591      	b.n	3974 <_vfiprintf_r+0x57c>
    3e50:	9907      	ldr	r1, [sp, #28]
    3e52:	680e      	ldr	r6, [r1, #0]
    3e54:	460a      	mov	r2, r1
    3e56:	17f7      	asrs	r7, r6, #31
    3e58:	3204      	adds	r2, #4
    3e5a:	9207      	str	r2, [sp, #28]
    3e5c:	4630      	mov	r0, r6
    3e5e:	4639      	mov	r1, r7
    3e60:	e50f      	b.n	3882 <_vfiprintf_r+0x48a>
    3e62:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    3e66:	f000 fe7f 	bl	4b68 <__retarget_lock_release_recursive>
    3e6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    3e6e:	e71a      	b.n	3ca6 <_vfiprintf_r+0x8ae>
    3e70:	9b02      	ldr	r3, [sp, #8]
    3e72:	9302      	str	r3, [sp, #8]
    3e74:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    3e78:	3630      	adds	r6, #48	; 0x30
    3e7a:	2301      	movs	r3, #1
    3e7c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
    3e80:	9305      	str	r3, [sp, #20]
    3e82:	e40b      	b.n	369c <_vfiprintf_r+0x2a4>
    3e84:	aa0f      	add	r2, sp, #60	; 0x3c
    3e86:	9904      	ldr	r1, [sp, #16]
    3e88:	9806      	ldr	r0, [sp, #24]
    3e8a:	f7ff fa75 	bl	3378 <__sprint_r.part.0>
    3e8e:	2800      	cmp	r0, #0
    3e90:	f47f af64 	bne.w	3d5c <_vfiprintf_r+0x964>
    3e94:	9910      	ldr	r1, [sp, #64]	; 0x40
    3e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e98:	1c48      	adds	r0, r1, #1
    3e9a:	46ca      	mov	sl, r9
    3e9c:	e651      	b.n	3b42 <_vfiprintf_r+0x74a>
    3e9e:	aa0f      	add	r2, sp, #60	; 0x3c
    3ea0:	9904      	ldr	r1, [sp, #16]
    3ea2:	9806      	ldr	r0, [sp, #24]
    3ea4:	f7ff fa68 	bl	3378 <__sprint_r.part.0>
    3ea8:	2800      	cmp	r0, #0
    3eaa:	f47f af57 	bne.w	3d5c <_vfiprintf_r+0x964>
    3eae:	9910      	ldr	r1, [sp, #64]	; 0x40
    3eb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3eb2:	1c48      	adds	r0, r1, #1
    3eb4:	46ca      	mov	sl, r9
    3eb6:	e448      	b.n	374a <_vfiprintf_r+0x352>
    3eb8:	2a00      	cmp	r2, #0
    3eba:	f040 8091 	bne.w	3fe0 <_vfiprintf_r+0xbe8>
    3ebe:	2001      	movs	r0, #1
    3ec0:	4611      	mov	r1, r2
    3ec2:	46ca      	mov	sl, r9
    3ec4:	e641      	b.n	3b4a <_vfiprintf_r+0x752>
    3ec6:	aa0f      	add	r2, sp, #60	; 0x3c
    3ec8:	9904      	ldr	r1, [sp, #16]
    3eca:	9806      	ldr	r0, [sp, #24]
    3ecc:	f7ff fa54 	bl	3378 <__sprint_r.part.0>
    3ed0:	2800      	cmp	r0, #0
    3ed2:	f47f af43 	bne.w	3d5c <_vfiprintf_r+0x964>
    3ed6:	9810      	ldr	r0, [sp, #64]	; 0x40
    3ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3eda:	3001      	adds	r0, #1
    3edc:	46ca      	mov	sl, r9
    3ede:	e667      	b.n	3bb0 <_vfiprintf_r+0x7b8>
    3ee0:	46d3      	mov	fp, sl
    3ee2:	e6d6      	b.n	3c92 <_vfiprintf_r+0x89a>
    3ee4:	9e07      	ldr	r6, [sp, #28]
    3ee6:	3607      	adds	r6, #7
    3ee8:	f026 0207 	bic.w	r2, r6, #7
    3eec:	f102 0108 	add.w	r1, r2, #8
    3ef0:	e9d2 6700 	ldrd	r6, r7, [r2]
    3ef4:	9107      	str	r1, [sp, #28]
    3ef6:	2201      	movs	r2, #1
    3ef8:	f7ff bbb1 	b.w	365e <_vfiprintf_r+0x266>
    3efc:	9e07      	ldr	r6, [sp, #28]
    3efe:	3607      	adds	r6, #7
    3f00:	f026 0607 	bic.w	r6, r6, #7
    3f04:	e9d6 0100 	ldrd	r0, r1, [r6]
    3f08:	f106 0208 	add.w	r2, r6, #8
    3f0c:	9207      	str	r2, [sp, #28]
    3f0e:	4606      	mov	r6, r0
    3f10:	460f      	mov	r7, r1
    3f12:	e4b6      	b.n	3882 <_vfiprintf_r+0x48a>
    3f14:	9e07      	ldr	r6, [sp, #28]
    3f16:	3607      	adds	r6, #7
    3f18:	f026 0207 	bic.w	r2, r6, #7
    3f1c:	f102 0108 	add.w	r1, r2, #8
    3f20:	e9d2 6700 	ldrd	r6, r7, [r2]
    3f24:	9107      	str	r1, [sp, #28]
    3f26:	2200      	movs	r2, #0
    3f28:	f7ff bb99 	b.w	365e <_vfiprintf_r+0x266>
    3f2c:	9e07      	ldr	r6, [sp, #28]
    3f2e:	3607      	adds	r6, #7
    3f30:	f026 0107 	bic.w	r1, r6, #7
    3f34:	f101 0008 	add.w	r0, r1, #8
    3f38:	9007      	str	r0, [sp, #28]
    3f3a:	e9d1 6700 	ldrd	r6, r7, [r1]
    3f3e:	e519      	b.n	3974 <_vfiprintf_r+0x57c>
    3f40:	46cb      	mov	fp, r9
    3f42:	f7ff bbab 	b.w	369c <_vfiprintf_r+0x2a4>
    3f46:	252d      	movs	r5, #45	; 0x2d
    3f48:	4276      	negs	r6, r6
    3f4a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    3f4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    3f52:	2201      	movs	r2, #1
    3f54:	f7ff bb88 	b.w	3668 <_vfiprintf_r+0x270>
    3f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f5a:	b9b3      	cbnz	r3, 3f8a <_vfiprintf_r+0xb92>
    3f5c:	4611      	mov	r1, r2
    3f5e:	2001      	movs	r0, #1
    3f60:	46ca      	mov	sl, r9
    3f62:	e5f2      	b.n	3b4a <_vfiprintf_r+0x752>
    3f64:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    3f68:	f000 fdfe 	bl	4b68 <__retarget_lock_release_recursive>
    3f6c:	f04f 33ff 	mov.w	r3, #4294967295
    3f70:	9303      	str	r3, [sp, #12]
    3f72:	f7ff bb50 	b.w	3616 <_vfiprintf_r+0x21e>
    3f76:	aa0f      	add	r2, sp, #60	; 0x3c
    3f78:	9904      	ldr	r1, [sp, #16]
    3f7a:	9806      	ldr	r0, [sp, #24]
    3f7c:	f7ff f9fc 	bl	3378 <__sprint_r.part.0>
    3f80:	2800      	cmp	r0, #0
    3f82:	f47f aeeb 	bne.w	3d5c <_vfiprintf_r+0x964>
    3f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3f88:	e6a9      	b.n	3cde <_vfiprintf_r+0x8e6>
    3f8a:	ab0e      	add	r3, sp, #56	; 0x38
    3f8c:	2202      	movs	r2, #2
    3f8e:	931c      	str	r3, [sp, #112]	; 0x70
    3f90:	921d      	str	r2, [sp, #116]	; 0x74
    3f92:	2001      	movs	r0, #1
    3f94:	46ca      	mov	sl, r9
    3f96:	e5d0      	b.n	3b3a <_vfiprintf_r+0x742>
    3f98:	aa0f      	add	r2, sp, #60	; 0x3c
    3f9a:	9904      	ldr	r1, [sp, #16]
    3f9c:	9806      	ldr	r0, [sp, #24]
    3f9e:	f7ff f9eb 	bl	3378 <__sprint_r.part.0>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	f47f aeda 	bne.w	3d5c <_vfiprintf_r+0x964>
    3fa8:	9910      	ldr	r1, [sp, #64]	; 0x40
    3faa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3fac:	1c48      	adds	r0, r1, #1
    3fae:	46ca      	mov	sl, r9
    3fb0:	e5a4      	b.n	3afc <_vfiprintf_r+0x704>
    3fb2:	9a07      	ldr	r2, [sp, #28]
    3fb4:	9903      	ldr	r1, [sp, #12]
    3fb6:	6813      	ldr	r3, [r2, #0]
    3fb8:	17cd      	asrs	r5, r1, #31
    3fba:	4608      	mov	r0, r1
    3fbc:	3204      	adds	r2, #4
    3fbe:	4629      	mov	r1, r5
    3fc0:	9207      	str	r2, [sp, #28]
    3fc2:	e9c3 0100 	strd	r0, r1, [r3]
    3fc6:	f7ff ba54 	b.w	3472 <_vfiprintf_r+0x7a>
    3fca:	4658      	mov	r0, fp
    3fcc:	9607      	str	r6, [sp, #28]
    3fce:	9302      	str	r3, [sp, #8]
    3fd0:	f001 fbd6 	bl	5780 <strlen>
    3fd4:	2400      	movs	r4, #0
    3fd6:	9005      	str	r0, [sp, #20]
    3fd8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3fdc:	f7ff bb5e 	b.w	369c <_vfiprintf_r+0x2a4>
    3fe0:	aa0f      	add	r2, sp, #60	; 0x3c
    3fe2:	9904      	ldr	r1, [sp, #16]
    3fe4:	9806      	ldr	r0, [sp, #24]
    3fe6:	f7ff f9c7 	bl	3378 <__sprint_r.part.0>
    3fea:	2800      	cmp	r0, #0
    3fec:	f47f aeb6 	bne.w	3d5c <_vfiprintf_r+0x964>
    3ff0:	9910      	ldr	r1, [sp, #64]	; 0x40
    3ff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3ff4:	1c48      	adds	r0, r1, #1
    3ff6:	46ca      	mov	sl, r9
    3ff8:	e5a7      	b.n	3b4a <_vfiprintf_r+0x752>
    3ffa:	9910      	ldr	r1, [sp, #64]	; 0x40
    3ffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3ffe:	4e20      	ldr	r6, [pc, #128]	; (4080 <_vfiprintf_r+0xc88>)
    4000:	3101      	adds	r1, #1
    4002:	f7ff bb90 	b.w	3726 <_vfiprintf_r+0x32e>
    4006:	2c06      	cmp	r4, #6
    4008:	bf28      	it	cs
    400a:	2406      	movcs	r4, #6
    400c:	9405      	str	r4, [sp, #20]
    400e:	9607      	str	r6, [sp, #28]
    4010:	9401      	str	r4, [sp, #4]
    4012:	f8df b070 	ldr.w	fp, [pc, #112]	; 4084 <_vfiprintf_r+0xc8c>
    4016:	e4d5      	b.n	39c4 <_vfiprintf_r+0x5cc>
    4018:	9810      	ldr	r0, [sp, #64]	; 0x40
    401a:	4e19      	ldr	r6, [pc, #100]	; (4080 <_vfiprintf_r+0xc88>)
    401c:	3001      	adds	r0, #1
    401e:	e603      	b.n	3c28 <_vfiprintf_r+0x830>
    4020:	9405      	str	r4, [sp, #20]
    4022:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    4026:	9607      	str	r6, [sp, #28]
    4028:	9302      	str	r3, [sp, #8]
    402a:	4604      	mov	r4, r0
    402c:	f7ff bb36 	b.w	369c <_vfiprintf_r+0x2a4>
    4030:	4686      	mov	lr, r0
    4032:	f7ff bbce 	b.w	37d2 <_vfiprintf_r+0x3da>
    4036:	9806      	ldr	r0, [sp, #24]
    4038:	aa0f      	add	r2, sp, #60	; 0x3c
    403a:	4659      	mov	r1, fp
    403c:	f7ff f99c 	bl	3378 <__sprint_r.part.0>
    4040:	2800      	cmp	r0, #0
    4042:	f43f ae24 	beq.w	3c8e <_vfiprintf_r+0x896>
    4046:	e624      	b.n	3c92 <_vfiprintf_r+0x89a>
    4048:	9907      	ldr	r1, [sp, #28]
    404a:	f898 2001 	ldrb.w	r2, [r8, #1]
    404e:	680c      	ldr	r4, [r1, #0]
    4050:	3104      	adds	r1, #4
    4052:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
    4056:	46b8      	mov	r8, r7
    4058:	9107      	str	r1, [sp, #28]
    405a:	f7ff ba3f 	b.w	34dc <_vfiprintf_r+0xe4>
    405e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    4062:	e43c      	b.n	38de <_vfiprintf_r+0x4e6>
    4064:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    4068:	e521      	b.n	3aae <_vfiprintf_r+0x6b6>
    406a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    406e:	f7ff bbf4 	b.w	385a <_vfiprintf_r+0x462>
    4072:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    4076:	e491      	b.n	399c <_vfiprintf_r+0x5a4>
    4078:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    407c:	e469      	b.n	3952 <_vfiprintf_r+0x55a>
    407e:	bf00      	nop
    4080:	00005f78 	.word	0x00005f78
    4084:	00005f70 	.word	0x00005f70

00004088 <__sbprintf>:
    4088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    408c:	460c      	mov	r4, r1
    408e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    4092:	8989      	ldrh	r1, [r1, #12]
    4094:	6e66      	ldr	r6, [r4, #100]	; 0x64
    4096:	89e5      	ldrh	r5, [r4, #14]
    4098:	9619      	str	r6, [sp, #100]	; 0x64
    409a:	f021 0102 	bic.w	r1, r1, #2
    409e:	4606      	mov	r6, r0
    40a0:	69e0      	ldr	r0, [r4, #28]
    40a2:	f8ad 100c 	strh.w	r1, [sp, #12]
    40a6:	4617      	mov	r7, r2
    40a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    40ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    40ae:	f8ad 500e 	strh.w	r5, [sp, #14]
    40b2:	4698      	mov	r8, r3
    40b4:	ad1a      	add	r5, sp, #104	; 0x68
    40b6:	2300      	movs	r3, #0
    40b8:	9007      	str	r0, [sp, #28]
    40ba:	a816      	add	r0, sp, #88	; 0x58
    40bc:	9209      	str	r2, [sp, #36]	; 0x24
    40be:	9306      	str	r3, [sp, #24]
    40c0:	9500      	str	r5, [sp, #0]
    40c2:	9504      	str	r5, [sp, #16]
    40c4:	9102      	str	r1, [sp, #8]
    40c6:	9105      	str	r1, [sp, #20]
    40c8:	f000 fd48 	bl	4b5c <__retarget_lock_init_recursive>
    40cc:	4643      	mov	r3, r8
    40ce:	463a      	mov	r2, r7
    40d0:	4669      	mov	r1, sp
    40d2:	4630      	mov	r0, r6
    40d4:	f7ff f990 	bl	33f8 <_vfiprintf_r>
    40d8:	1e05      	subs	r5, r0, #0
    40da:	db07      	blt.n	40ec <__sbprintf+0x64>
    40dc:	4630      	mov	r0, r6
    40de:	4669      	mov	r1, sp
    40e0:	f000 f928 	bl	4334 <_fflush_r>
    40e4:	2800      	cmp	r0, #0
    40e6:	bf18      	it	ne
    40e8:	f04f 35ff 	movne.w	r5, #4294967295
    40ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    40f0:	065b      	lsls	r3, r3, #25
    40f2:	d503      	bpl.n	40fc <__sbprintf+0x74>
    40f4:	89a3      	ldrh	r3, [r4, #12]
    40f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    40fa:	81a3      	strh	r3, [r4, #12]
    40fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    40fe:	f000 fd2f 	bl	4b60 <__retarget_lock_close_recursive>
    4102:	4628      	mov	r0, r5
    4104:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    4108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000410c <__swsetup_r>:
    410c:	b538      	push	{r3, r4, r5, lr}
    410e:	4b30      	ldr	r3, [pc, #192]	; (41d0 <__swsetup_r+0xc4>)
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	4605      	mov	r5, r0
    4114:	460c      	mov	r4, r1
    4116:	b113      	cbz	r3, 411e <__swsetup_r+0x12>
    4118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    411a:	2a00      	cmp	r2, #0
    411c:	d038      	beq.n	4190 <__swsetup_r+0x84>
    411e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4122:	b293      	uxth	r3, r2
    4124:	0718      	lsls	r0, r3, #28
    4126:	d50c      	bpl.n	4142 <__swsetup_r+0x36>
    4128:	6920      	ldr	r0, [r4, #16]
    412a:	b1a8      	cbz	r0, 4158 <__swsetup_r+0x4c>
    412c:	f013 0201 	ands.w	r2, r3, #1
    4130:	d01e      	beq.n	4170 <__swsetup_r+0x64>
    4132:	6963      	ldr	r3, [r4, #20]
    4134:	2200      	movs	r2, #0
    4136:	425b      	negs	r3, r3
    4138:	61a3      	str	r3, [r4, #24]
    413a:	60a2      	str	r2, [r4, #8]
    413c:	b1f0      	cbz	r0, 417c <__swsetup_r+0x70>
    413e:	2000      	movs	r0, #0
    4140:	bd38      	pop	{r3, r4, r5, pc}
    4142:	06d9      	lsls	r1, r3, #27
    4144:	d53c      	bpl.n	41c0 <__swsetup_r+0xb4>
    4146:	0758      	lsls	r0, r3, #29
    4148:	d426      	bmi.n	4198 <__swsetup_r+0x8c>
    414a:	6920      	ldr	r0, [r4, #16]
    414c:	f042 0308 	orr.w	r3, r2, #8
    4150:	81a3      	strh	r3, [r4, #12]
    4152:	b29b      	uxth	r3, r3
    4154:	2800      	cmp	r0, #0
    4156:	d1e9      	bne.n	412c <__swsetup_r+0x20>
    4158:	f403 7220 	and.w	r2, r3, #640	; 0x280
    415c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4160:	d0e4      	beq.n	412c <__swsetup_r+0x20>
    4162:	4628      	mov	r0, r5
    4164:	4621      	mov	r1, r4
    4166:	f000 fd2f 	bl	4bc8 <__smakebuf_r>
    416a:	89a3      	ldrh	r3, [r4, #12]
    416c:	6920      	ldr	r0, [r4, #16]
    416e:	e7dd      	b.n	412c <__swsetup_r+0x20>
    4170:	0799      	lsls	r1, r3, #30
    4172:	bf58      	it	pl
    4174:	6962      	ldrpl	r2, [r4, #20]
    4176:	60a2      	str	r2, [r4, #8]
    4178:	2800      	cmp	r0, #0
    417a:	d1e0      	bne.n	413e <__swsetup_r+0x32>
    417c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4180:	061a      	lsls	r2, r3, #24
    4182:	d5dd      	bpl.n	4140 <__swsetup_r+0x34>
    4184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4188:	81a3      	strh	r3, [r4, #12]
    418a:	f04f 30ff 	mov.w	r0, #4294967295
    418e:	bd38      	pop	{r3, r4, r5, pc}
    4190:	4618      	mov	r0, r3
    4192:	f000 f927 	bl	43e4 <__sinit>
    4196:	e7c2      	b.n	411e <__swsetup_r+0x12>
    4198:	6b21      	ldr	r1, [r4, #48]	; 0x30
    419a:	b151      	cbz	r1, 41b2 <__swsetup_r+0xa6>
    419c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    41a0:	4299      	cmp	r1, r3
    41a2:	d004      	beq.n	41ae <__swsetup_r+0xa2>
    41a4:	4628      	mov	r0, r5
    41a6:	f000 fa43 	bl	4630 <_free_r>
    41aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    41ae:	2300      	movs	r3, #0
    41b0:	6323      	str	r3, [r4, #48]	; 0x30
    41b2:	2300      	movs	r3, #0
    41b4:	6920      	ldr	r0, [r4, #16]
    41b6:	6063      	str	r3, [r4, #4]
    41b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    41bc:	6020      	str	r0, [r4, #0]
    41be:	e7c5      	b.n	414c <__swsetup_r+0x40>
    41c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    41c4:	2309      	movs	r3, #9
    41c6:	602b      	str	r3, [r5, #0]
    41c8:	f04f 30ff 	mov.w	r0, #4294967295
    41cc:	81a2      	strh	r2, [r4, #12]
    41ce:	bd38      	pop	{r3, r4, r5, pc}
    41d0:	20000108 	.word	0x20000108

000041d4 <register_fini>:
    41d4:	4b02      	ldr	r3, [pc, #8]	; (41e0 <register_fini+0xc>)
    41d6:	b113      	cbz	r3, 41de <register_fini+0xa>
    41d8:	4802      	ldr	r0, [pc, #8]	; (41e4 <register_fini+0x10>)
    41da:	f000 b805 	b.w	41e8 <atexit>
    41de:	4770      	bx	lr
    41e0:	00000000 	.word	0x00000000
    41e4:	00004455 	.word	0x00004455

000041e8 <atexit>:
    41e8:	2300      	movs	r3, #0
    41ea:	4601      	mov	r1, r0
    41ec:	461a      	mov	r2, r3
    41ee:	4618      	mov	r0, r3
    41f0:	f001 bbda 	b.w	59a8 <__register_exitproc>

000041f4 <__sflush_r>:
    41f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    41f8:	b29a      	uxth	r2, r3
    41fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41fe:	460d      	mov	r5, r1
    4200:	0711      	lsls	r1, r2, #28
    4202:	4680      	mov	r8, r0
    4204:	d43a      	bmi.n	427c <__sflush_r+0x88>
    4206:	686a      	ldr	r2, [r5, #4]
    4208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    420c:	2a00      	cmp	r2, #0
    420e:	81ab      	strh	r3, [r5, #12]
    4210:	dd6f      	ble.n	42f2 <__sflush_r+0xfe>
    4212:	6aac      	ldr	r4, [r5, #40]	; 0x28
    4214:	2c00      	cmp	r4, #0
    4216:	d049      	beq.n	42ac <__sflush_r+0xb8>
    4218:	2200      	movs	r2, #0
    421a:	b29b      	uxth	r3, r3
    421c:	f8d8 6000 	ldr.w	r6, [r8]
    4220:	f8c8 2000 	str.w	r2, [r8]
    4224:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    4228:	d067      	beq.n	42fa <__sflush_r+0x106>
    422a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    422c:	075f      	lsls	r7, r3, #29
    422e:	d505      	bpl.n	423c <__sflush_r+0x48>
    4230:	6869      	ldr	r1, [r5, #4]
    4232:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4234:	1a52      	subs	r2, r2, r1
    4236:	b10b      	cbz	r3, 423c <__sflush_r+0x48>
    4238:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    423a:	1ad2      	subs	r2, r2, r3
    423c:	2300      	movs	r3, #0
    423e:	69e9      	ldr	r1, [r5, #28]
    4240:	4640      	mov	r0, r8
    4242:	47a0      	blx	r4
    4244:	1c44      	adds	r4, r0, #1
    4246:	d03c      	beq.n	42c2 <__sflush_r+0xce>
    4248:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    424c:	692a      	ldr	r2, [r5, #16]
    424e:	602a      	str	r2, [r5, #0]
    4250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4254:	2200      	movs	r2, #0
    4256:	81ab      	strh	r3, [r5, #12]
    4258:	04db      	lsls	r3, r3, #19
    425a:	606a      	str	r2, [r5, #4]
    425c:	d447      	bmi.n	42ee <__sflush_r+0xfa>
    425e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4260:	f8c8 6000 	str.w	r6, [r8]
    4264:	b311      	cbz	r1, 42ac <__sflush_r+0xb8>
    4266:	f105 0340 	add.w	r3, r5, #64	; 0x40
    426a:	4299      	cmp	r1, r3
    426c:	d002      	beq.n	4274 <__sflush_r+0x80>
    426e:	4640      	mov	r0, r8
    4270:	f000 f9de 	bl	4630 <_free_r>
    4274:	2000      	movs	r0, #0
    4276:	6328      	str	r0, [r5, #48]	; 0x30
    4278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    427c:	692e      	ldr	r6, [r5, #16]
    427e:	b1ae      	cbz	r6, 42ac <__sflush_r+0xb8>
    4280:	682c      	ldr	r4, [r5, #0]
    4282:	602e      	str	r6, [r5, #0]
    4284:	0791      	lsls	r1, r2, #30
    4286:	bf0c      	ite	eq
    4288:	696b      	ldreq	r3, [r5, #20]
    428a:	2300      	movne	r3, #0
    428c:	1ba4      	subs	r4, r4, r6
    428e:	60ab      	str	r3, [r5, #8]
    4290:	e00a      	b.n	42a8 <__sflush_r+0xb4>
    4292:	4623      	mov	r3, r4
    4294:	4632      	mov	r2, r6
    4296:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    4298:	69e9      	ldr	r1, [r5, #28]
    429a:	4640      	mov	r0, r8
    429c:	47b8      	blx	r7
    429e:	2800      	cmp	r0, #0
    42a0:	eba4 0400 	sub.w	r4, r4, r0
    42a4:	4406      	add	r6, r0
    42a6:	dd04      	ble.n	42b2 <__sflush_r+0xbe>
    42a8:	2c00      	cmp	r4, #0
    42aa:	dcf2      	bgt.n	4292 <__sflush_r+0x9e>
    42ac:	2000      	movs	r0, #0
    42ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42b2:	89ab      	ldrh	r3, [r5, #12]
    42b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    42b8:	81ab      	strh	r3, [r5, #12]
    42ba:	f04f 30ff 	mov.w	r0, #4294967295
    42be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42c2:	f8d8 4000 	ldr.w	r4, [r8]
    42c6:	2c1d      	cmp	r4, #29
    42c8:	d8f3      	bhi.n	42b2 <__sflush_r+0xbe>
    42ca:	4b19      	ldr	r3, [pc, #100]	; (4330 <__sflush_r+0x13c>)
    42cc:	40e3      	lsrs	r3, r4
    42ce:	43db      	mvns	r3, r3
    42d0:	f013 0301 	ands.w	r3, r3, #1
    42d4:	d1ed      	bne.n	42b2 <__sflush_r+0xbe>
    42d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    42da:	606b      	str	r3, [r5, #4]
    42dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
    42e0:	6929      	ldr	r1, [r5, #16]
    42e2:	81ab      	strh	r3, [r5, #12]
    42e4:	04da      	lsls	r2, r3, #19
    42e6:	6029      	str	r1, [r5, #0]
    42e8:	d5b9      	bpl.n	425e <__sflush_r+0x6a>
    42ea:	2c00      	cmp	r4, #0
    42ec:	d1b7      	bne.n	425e <__sflush_r+0x6a>
    42ee:	6528      	str	r0, [r5, #80]	; 0x50
    42f0:	e7b5      	b.n	425e <__sflush_r+0x6a>
    42f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    42f4:	2a00      	cmp	r2, #0
    42f6:	dc8c      	bgt.n	4212 <__sflush_r+0x1e>
    42f8:	e7d8      	b.n	42ac <__sflush_r+0xb8>
    42fa:	2301      	movs	r3, #1
    42fc:	69e9      	ldr	r1, [r5, #28]
    42fe:	4640      	mov	r0, r8
    4300:	47a0      	blx	r4
    4302:	1c43      	adds	r3, r0, #1
    4304:	4602      	mov	r2, r0
    4306:	d002      	beq.n	430e <__sflush_r+0x11a>
    4308:	89ab      	ldrh	r3, [r5, #12]
    430a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    430c:	e78e      	b.n	422c <__sflush_r+0x38>
    430e:	f8d8 3000 	ldr.w	r3, [r8]
    4312:	2b00      	cmp	r3, #0
    4314:	d0f8      	beq.n	4308 <__sflush_r+0x114>
    4316:	2b1d      	cmp	r3, #29
    4318:	d001      	beq.n	431e <__sflush_r+0x12a>
    431a:	2b16      	cmp	r3, #22
    431c:	d102      	bne.n	4324 <__sflush_r+0x130>
    431e:	f8c8 6000 	str.w	r6, [r8]
    4322:	e7c3      	b.n	42ac <__sflush_r+0xb8>
    4324:	89ab      	ldrh	r3, [r5, #12]
    4326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    432a:	81ab      	strh	r3, [r5, #12]
    432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4330:	20400001 	.word	0x20400001

00004334 <_fflush_r>:
    4334:	b538      	push	{r3, r4, r5, lr}
    4336:	460d      	mov	r5, r1
    4338:	4604      	mov	r4, r0
    433a:	b108      	cbz	r0, 4340 <_fflush_r+0xc>
    433c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    433e:	b1bb      	cbz	r3, 4370 <_fflush_r+0x3c>
    4340:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    4344:	b188      	cbz	r0, 436a <_fflush_r+0x36>
    4346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    4348:	07db      	lsls	r3, r3, #31
    434a:	d401      	bmi.n	4350 <_fflush_r+0x1c>
    434c:	0581      	lsls	r1, r0, #22
    434e:	d517      	bpl.n	4380 <_fflush_r+0x4c>
    4350:	4620      	mov	r0, r4
    4352:	4629      	mov	r1, r5
    4354:	f7ff ff4e 	bl	41f4 <__sflush_r>
    4358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    435a:	07da      	lsls	r2, r3, #31
    435c:	4604      	mov	r4, r0
    435e:	d402      	bmi.n	4366 <_fflush_r+0x32>
    4360:	89ab      	ldrh	r3, [r5, #12]
    4362:	059b      	lsls	r3, r3, #22
    4364:	d507      	bpl.n	4376 <_fflush_r+0x42>
    4366:	4620      	mov	r0, r4
    4368:	bd38      	pop	{r3, r4, r5, pc}
    436a:	4604      	mov	r4, r0
    436c:	4620      	mov	r0, r4
    436e:	bd38      	pop	{r3, r4, r5, pc}
    4370:	f000 f838 	bl	43e4 <__sinit>
    4374:	e7e4      	b.n	4340 <_fflush_r+0xc>
    4376:	6da8      	ldr	r0, [r5, #88]	; 0x58
    4378:	f000 fbf6 	bl	4b68 <__retarget_lock_release_recursive>
    437c:	4620      	mov	r0, r4
    437e:	bd38      	pop	{r3, r4, r5, pc}
    4380:	6da8      	ldr	r0, [r5, #88]	; 0x58
    4382:	f000 fbef 	bl	4b64 <__retarget_lock_acquire_recursive>
    4386:	e7e3      	b.n	4350 <_fflush_r+0x1c>

00004388 <_cleanup_r>:
    4388:	4901      	ldr	r1, [pc, #4]	; (4390 <_cleanup_r+0x8>)
    438a:	f000 bbaf 	b.w	4aec <_fwalk_reent>
    438e:	bf00      	nop
    4390:	00005a91 	.word	0x00005a91

00004394 <std.isra.0>:
    4394:	b510      	push	{r4, lr}
    4396:	2300      	movs	r3, #0
    4398:	4604      	mov	r4, r0
    439a:	8181      	strh	r1, [r0, #12]
    439c:	81c2      	strh	r2, [r0, #14]
    439e:	6003      	str	r3, [r0, #0]
    43a0:	6043      	str	r3, [r0, #4]
    43a2:	6083      	str	r3, [r0, #8]
    43a4:	6643      	str	r3, [r0, #100]	; 0x64
    43a6:	6103      	str	r3, [r0, #16]
    43a8:	6143      	str	r3, [r0, #20]
    43aa:	6183      	str	r3, [r0, #24]
    43ac:	4619      	mov	r1, r3
    43ae:	2208      	movs	r2, #8
    43b0:	305c      	adds	r0, #92	; 0x5c
    43b2:	f7fe ff93 	bl	32dc <memset>
    43b6:	4807      	ldr	r0, [pc, #28]	; (43d4 <std.isra.0+0x40>)
    43b8:	4907      	ldr	r1, [pc, #28]	; (43d8 <std.isra.0+0x44>)
    43ba:	4a08      	ldr	r2, [pc, #32]	; (43dc <std.isra.0+0x48>)
    43bc:	4b08      	ldr	r3, [pc, #32]	; (43e0 <std.isra.0+0x4c>)
    43be:	6220      	str	r0, [r4, #32]
    43c0:	61e4      	str	r4, [r4, #28]
    43c2:	6261      	str	r1, [r4, #36]	; 0x24
    43c4:	62a2      	str	r2, [r4, #40]	; 0x28
    43c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    43c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    43cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43d0:	f000 bbc4 	b.w	4b5c <__retarget_lock_init_recursive>
    43d4:	000056e1 	.word	0x000056e1
    43d8:	00005705 	.word	0x00005705
    43dc:	00005741 	.word	0x00005741
    43e0:	00005761 	.word	0x00005761

000043e4 <__sinit>:
    43e4:	b510      	push	{r4, lr}
    43e6:	4604      	mov	r4, r0
    43e8:	4812      	ldr	r0, [pc, #72]	; (4434 <__sinit+0x50>)
    43ea:	f000 fbbb 	bl	4b64 <__retarget_lock_acquire_recursive>
    43ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    43f0:	b9d2      	cbnz	r2, 4428 <__sinit+0x44>
    43f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
    43f6:	4810      	ldr	r0, [pc, #64]	; (4438 <__sinit+0x54>)
    43f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    43fc:	2103      	movs	r1, #3
    43fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
    4402:	63e0      	str	r0, [r4, #60]	; 0x3c
    4404:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    4408:	6860      	ldr	r0, [r4, #4]
    440a:	2104      	movs	r1, #4
    440c:	f7ff ffc2 	bl	4394 <std.isra.0>
    4410:	2201      	movs	r2, #1
    4412:	2109      	movs	r1, #9
    4414:	68a0      	ldr	r0, [r4, #8]
    4416:	f7ff ffbd 	bl	4394 <std.isra.0>
    441a:	2202      	movs	r2, #2
    441c:	2112      	movs	r1, #18
    441e:	68e0      	ldr	r0, [r4, #12]
    4420:	f7ff ffb8 	bl	4394 <std.isra.0>
    4424:	2301      	movs	r3, #1
    4426:	63a3      	str	r3, [r4, #56]	; 0x38
    4428:	4802      	ldr	r0, [pc, #8]	; (4434 <__sinit+0x50>)
    442a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    442e:	f000 bb9b 	b.w	4b68 <__retarget_lock_release_recursive>
    4432:	bf00      	nop
    4434:	20000e1c 	.word	0x20000e1c
    4438:	00004389 	.word	0x00004389

0000443c <__sfp_lock_acquire>:
    443c:	4801      	ldr	r0, [pc, #4]	; (4444 <__sfp_lock_acquire+0x8>)
    443e:	f000 bb91 	b.w	4b64 <__retarget_lock_acquire_recursive>
    4442:	bf00      	nop
    4444:	20000e30 	.word	0x20000e30

00004448 <__sfp_lock_release>:
    4448:	4801      	ldr	r0, [pc, #4]	; (4450 <__sfp_lock_release+0x8>)
    444a:	f000 bb8d 	b.w	4b68 <__retarget_lock_release_recursive>
    444e:	bf00      	nop
    4450:	20000e30 	.word	0x20000e30

00004454 <__libc_fini_array>:
    4454:	b538      	push	{r3, r4, r5, lr}
    4456:	4c0a      	ldr	r4, [pc, #40]	; (4480 <__libc_fini_array+0x2c>)
    4458:	4d0a      	ldr	r5, [pc, #40]	; (4484 <__libc_fini_array+0x30>)
    445a:	1b64      	subs	r4, r4, r5
    445c:	10a4      	asrs	r4, r4, #2
    445e:	d00a      	beq.n	4476 <__libc_fini_array+0x22>
    4460:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4464:	3b01      	subs	r3, #1
    4466:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    446a:	3c01      	subs	r4, #1
    446c:	f855 3904 	ldr.w	r3, [r5], #-4
    4470:	4798      	blx	r3
    4472:	2c00      	cmp	r4, #0
    4474:	d1f9      	bne.n	446a <__libc_fini_array+0x16>
    4476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    447a:	f001 be21 	b.w	60c0 <_fini>
    447e:	bf00      	nop
    4480:	000060d0 	.word	0x000060d0
    4484:	000060cc 	.word	0x000060cc

00004488 <__fputwc>:
    4488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    448c:	b082      	sub	sp, #8
    448e:	4680      	mov	r8, r0
    4490:	4689      	mov	r9, r1
    4492:	4614      	mov	r4, r2
    4494:	f000 fb54 	bl	4b40 <__locale_mb_cur_max>
    4498:	2801      	cmp	r0, #1
    449a:	d036      	beq.n	450a <__fputwc+0x82>
    449c:	464a      	mov	r2, r9
    449e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    44a2:	a901      	add	r1, sp, #4
    44a4:	4640      	mov	r0, r8
    44a6:	f001 fa31 	bl	590c <_wcrtomb_r>
    44aa:	1c42      	adds	r2, r0, #1
    44ac:	4606      	mov	r6, r0
    44ae:	d025      	beq.n	44fc <__fputwc+0x74>
    44b0:	b3a8      	cbz	r0, 451e <__fputwc+0x96>
    44b2:	f89d e004 	ldrb.w	lr, [sp, #4]
    44b6:	2500      	movs	r5, #0
    44b8:	f10d 0a04 	add.w	sl, sp, #4
    44bc:	e009      	b.n	44d2 <__fputwc+0x4a>
    44be:	6823      	ldr	r3, [r4, #0]
    44c0:	1c5a      	adds	r2, r3, #1
    44c2:	6022      	str	r2, [r4, #0]
    44c4:	f883 e000 	strb.w	lr, [r3]
    44c8:	3501      	adds	r5, #1
    44ca:	42b5      	cmp	r5, r6
    44cc:	d227      	bcs.n	451e <__fputwc+0x96>
    44ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
    44d2:	68a3      	ldr	r3, [r4, #8]
    44d4:	3b01      	subs	r3, #1
    44d6:	2b00      	cmp	r3, #0
    44d8:	60a3      	str	r3, [r4, #8]
    44da:	daf0      	bge.n	44be <__fputwc+0x36>
    44dc:	69a7      	ldr	r7, [r4, #24]
    44de:	42bb      	cmp	r3, r7
    44e0:	4671      	mov	r1, lr
    44e2:	4622      	mov	r2, r4
    44e4:	4640      	mov	r0, r8
    44e6:	db02      	blt.n	44ee <__fputwc+0x66>
    44e8:	f1be 0f0a 	cmp.w	lr, #10
    44ec:	d1e7      	bne.n	44be <__fputwc+0x36>
    44ee:	f001 f9b5 	bl	585c <__swbuf_r>
    44f2:	1c43      	adds	r3, r0, #1
    44f4:	d1e8      	bne.n	44c8 <__fputwc+0x40>
    44f6:	b002      	add	sp, #8
    44f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44fc:	89a3      	ldrh	r3, [r4, #12]
    44fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4502:	81a3      	strh	r3, [r4, #12]
    4504:	b002      	add	sp, #8
    4506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    450a:	f109 33ff 	add.w	r3, r9, #4294967295
    450e:	2bfe      	cmp	r3, #254	; 0xfe
    4510:	d8c4      	bhi.n	449c <__fputwc+0x14>
    4512:	fa5f fe89 	uxtb.w	lr, r9
    4516:	4606      	mov	r6, r0
    4518:	f88d e004 	strb.w	lr, [sp, #4]
    451c:	e7cb      	b.n	44b6 <__fputwc+0x2e>
    451e:	4648      	mov	r0, r9
    4520:	b002      	add	sp, #8
    4522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4526:	bf00      	nop

00004528 <_fputwc_r>:
    4528:	b530      	push	{r4, r5, lr}
    452a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    452c:	f013 0f01 	tst.w	r3, #1
    4530:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    4534:	4614      	mov	r4, r2
    4536:	b083      	sub	sp, #12
    4538:	4605      	mov	r5, r0
    453a:	b29a      	uxth	r2, r3
    453c:	d101      	bne.n	4542 <_fputwc_r+0x1a>
    453e:	0590      	lsls	r0, r2, #22
    4540:	d51c      	bpl.n	457c <_fputwc_r+0x54>
    4542:	0490      	lsls	r0, r2, #18
    4544:	d406      	bmi.n	4554 <_fputwc_r+0x2c>
    4546:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    454c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    4550:	81a3      	strh	r3, [r4, #12]
    4552:	6662      	str	r2, [r4, #100]	; 0x64
    4554:	4628      	mov	r0, r5
    4556:	4622      	mov	r2, r4
    4558:	f7ff ff96 	bl	4488 <__fputwc>
    455c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    455e:	07da      	lsls	r2, r3, #31
    4560:	4605      	mov	r5, r0
    4562:	d402      	bmi.n	456a <_fputwc_r+0x42>
    4564:	89a3      	ldrh	r3, [r4, #12]
    4566:	059b      	lsls	r3, r3, #22
    4568:	d502      	bpl.n	4570 <_fputwc_r+0x48>
    456a:	4628      	mov	r0, r5
    456c:	b003      	add	sp, #12
    456e:	bd30      	pop	{r4, r5, pc}
    4570:	6da0      	ldr	r0, [r4, #88]	; 0x58
    4572:	f000 faf9 	bl	4b68 <__retarget_lock_release_recursive>
    4576:	4628      	mov	r0, r5
    4578:	b003      	add	sp, #12
    457a:	bd30      	pop	{r4, r5, pc}
    457c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    457e:	9101      	str	r1, [sp, #4]
    4580:	f000 faf0 	bl	4b64 <__retarget_lock_acquire_recursive>
    4584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4588:	9901      	ldr	r1, [sp, #4]
    458a:	b29a      	uxth	r2, r3
    458c:	e7d9      	b.n	4542 <_fputwc_r+0x1a>
    458e:	bf00      	nop

00004590 <_malloc_trim_r>:
    4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4592:	4f24      	ldr	r7, [pc, #144]	; (4624 <_malloc_trim_r+0x94>)
    4594:	460c      	mov	r4, r1
    4596:	4606      	mov	r6, r0
    4598:	f000 fede 	bl	5358 <__malloc_lock>
    459c:	68bb      	ldr	r3, [r7, #8]
    459e:	685d      	ldr	r5, [r3, #4]
    45a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    45a4:	310f      	adds	r1, #15
    45a6:	f025 0503 	bic.w	r5, r5, #3
    45aa:	4429      	add	r1, r5
    45ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    45b0:	f021 010f 	bic.w	r1, r1, #15
    45b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    45b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    45bc:	db07      	blt.n	45ce <_malloc_trim_r+0x3e>
    45be:	2100      	movs	r1, #0
    45c0:	4630      	mov	r0, r6
    45c2:	f001 f87b 	bl	56bc <_sbrk_r>
    45c6:	68bb      	ldr	r3, [r7, #8]
    45c8:	442b      	add	r3, r5
    45ca:	4298      	cmp	r0, r3
    45cc:	d004      	beq.n	45d8 <_malloc_trim_r+0x48>
    45ce:	4630      	mov	r0, r6
    45d0:	f000 fec8 	bl	5364 <__malloc_unlock>
    45d4:	2000      	movs	r0, #0
    45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45d8:	4261      	negs	r1, r4
    45da:	4630      	mov	r0, r6
    45dc:	f001 f86e 	bl	56bc <_sbrk_r>
    45e0:	3001      	adds	r0, #1
    45e2:	d00d      	beq.n	4600 <_malloc_trim_r+0x70>
    45e4:	4b10      	ldr	r3, [pc, #64]	; (4628 <_malloc_trim_r+0x98>)
    45e6:	68ba      	ldr	r2, [r7, #8]
    45e8:	6819      	ldr	r1, [r3, #0]
    45ea:	1b2d      	subs	r5, r5, r4
    45ec:	f045 0501 	orr.w	r5, r5, #1
    45f0:	4630      	mov	r0, r6
    45f2:	1b09      	subs	r1, r1, r4
    45f4:	6055      	str	r5, [r2, #4]
    45f6:	6019      	str	r1, [r3, #0]
    45f8:	f000 feb4 	bl	5364 <__malloc_unlock>
    45fc:	2001      	movs	r0, #1
    45fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4600:	2100      	movs	r1, #0
    4602:	4630      	mov	r0, r6
    4604:	f001 f85a 	bl	56bc <_sbrk_r>
    4608:	68ba      	ldr	r2, [r7, #8]
    460a:	1a83      	subs	r3, r0, r2
    460c:	2b0f      	cmp	r3, #15
    460e:	ddde      	ble.n	45ce <_malloc_trim_r+0x3e>
    4610:	4c06      	ldr	r4, [pc, #24]	; (462c <_malloc_trim_r+0x9c>)
    4612:	4905      	ldr	r1, [pc, #20]	; (4628 <_malloc_trim_r+0x98>)
    4614:	6824      	ldr	r4, [r4, #0]
    4616:	f043 0301 	orr.w	r3, r3, #1
    461a:	1b00      	subs	r0, r0, r4
    461c:	6053      	str	r3, [r2, #4]
    461e:	6008      	str	r0, [r1, #0]
    4620:	e7d5      	b.n	45ce <_malloc_trim_r+0x3e>
    4622:	bf00      	nop
    4624:	200006a8 	.word	0x200006a8
    4628:	20000cb8 	.word	0x20000cb8
    462c:	20000ab0 	.word	0x20000ab0

00004630 <_free_r>:
    4630:	2900      	cmp	r1, #0
    4632:	d044      	beq.n	46be <_free_r+0x8e>
    4634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4638:	460d      	mov	r5, r1
    463a:	4680      	mov	r8, r0
    463c:	f000 fe8c 	bl	5358 <__malloc_lock>
    4640:	f855 7c04 	ldr.w	r7, [r5, #-4]
    4644:	4969      	ldr	r1, [pc, #420]	; (47ec <_free_r+0x1bc>)
    4646:	f027 0301 	bic.w	r3, r7, #1
    464a:	f1a5 0408 	sub.w	r4, r5, #8
    464e:	18e2      	adds	r2, r4, r3
    4650:	688e      	ldr	r6, [r1, #8]
    4652:	6850      	ldr	r0, [r2, #4]
    4654:	42b2      	cmp	r2, r6
    4656:	f020 0003 	bic.w	r0, r0, #3
    465a:	d05e      	beq.n	471a <_free_r+0xea>
    465c:	07fe      	lsls	r6, r7, #31
    465e:	6050      	str	r0, [r2, #4]
    4660:	d40b      	bmi.n	467a <_free_r+0x4a>
    4662:	f855 7c08 	ldr.w	r7, [r5, #-8]
    4666:	1be4      	subs	r4, r4, r7
    4668:	f101 0e08 	add.w	lr, r1, #8
    466c:	68a5      	ldr	r5, [r4, #8]
    466e:	4575      	cmp	r5, lr
    4670:	443b      	add	r3, r7
    4672:	d06d      	beq.n	4750 <_free_r+0x120>
    4674:	68e7      	ldr	r7, [r4, #12]
    4676:	60ef      	str	r7, [r5, #12]
    4678:	60bd      	str	r5, [r7, #8]
    467a:	1815      	adds	r5, r2, r0
    467c:	686d      	ldr	r5, [r5, #4]
    467e:	07ed      	lsls	r5, r5, #31
    4680:	d53e      	bpl.n	4700 <_free_r+0xd0>
    4682:	f043 0201 	orr.w	r2, r3, #1
    4686:	6062      	str	r2, [r4, #4]
    4688:	50e3      	str	r3, [r4, r3]
    468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    468e:	d217      	bcs.n	46c0 <_free_r+0x90>
    4690:	08db      	lsrs	r3, r3, #3
    4692:	1c58      	adds	r0, r3, #1
    4694:	109a      	asrs	r2, r3, #2
    4696:	684d      	ldr	r5, [r1, #4]
    4698:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
    469c:	60a7      	str	r7, [r4, #8]
    469e:	2301      	movs	r3, #1
    46a0:	4093      	lsls	r3, r2
    46a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    46a6:	432b      	orrs	r3, r5
    46a8:	3a08      	subs	r2, #8
    46aa:	60e2      	str	r2, [r4, #12]
    46ac:	604b      	str	r3, [r1, #4]
    46ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    46b2:	60fc      	str	r4, [r7, #12]
    46b4:	4640      	mov	r0, r8
    46b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    46ba:	f000 be53 	b.w	5364 <__malloc_unlock>
    46be:	4770      	bx	lr
    46c0:	0a5a      	lsrs	r2, r3, #9
    46c2:	2a04      	cmp	r2, #4
    46c4:	d852      	bhi.n	476c <_free_r+0x13c>
    46c6:	099a      	lsrs	r2, r3, #6
    46c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
    46cc:	00ff      	lsls	r7, r7, #3
    46ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
    46d2:	19c8      	adds	r0, r1, r7
    46d4:	59ca      	ldr	r2, [r1, r7]
    46d6:	3808      	subs	r0, #8
    46d8:	4290      	cmp	r0, r2
    46da:	d04f      	beq.n	477c <_free_r+0x14c>
    46dc:	6851      	ldr	r1, [r2, #4]
    46de:	f021 0103 	bic.w	r1, r1, #3
    46e2:	428b      	cmp	r3, r1
    46e4:	d232      	bcs.n	474c <_free_r+0x11c>
    46e6:	6892      	ldr	r2, [r2, #8]
    46e8:	4290      	cmp	r0, r2
    46ea:	d1f7      	bne.n	46dc <_free_r+0xac>
    46ec:	68c3      	ldr	r3, [r0, #12]
    46ee:	60a0      	str	r0, [r4, #8]
    46f0:	60e3      	str	r3, [r4, #12]
    46f2:	609c      	str	r4, [r3, #8]
    46f4:	60c4      	str	r4, [r0, #12]
    46f6:	4640      	mov	r0, r8
    46f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    46fc:	f000 be32 	b.w	5364 <__malloc_unlock>
    4700:	6895      	ldr	r5, [r2, #8]
    4702:	4f3b      	ldr	r7, [pc, #236]	; (47f0 <_free_r+0x1c0>)
    4704:	42bd      	cmp	r5, r7
    4706:	4403      	add	r3, r0
    4708:	d040      	beq.n	478c <_free_r+0x15c>
    470a:	68d0      	ldr	r0, [r2, #12]
    470c:	60e8      	str	r0, [r5, #12]
    470e:	f043 0201 	orr.w	r2, r3, #1
    4712:	6085      	str	r5, [r0, #8]
    4714:	6062      	str	r2, [r4, #4]
    4716:	50e3      	str	r3, [r4, r3]
    4718:	e7b7      	b.n	468a <_free_r+0x5a>
    471a:	07ff      	lsls	r7, r7, #31
    471c:	4403      	add	r3, r0
    471e:	d407      	bmi.n	4730 <_free_r+0x100>
    4720:	f855 2c08 	ldr.w	r2, [r5, #-8]
    4724:	1aa4      	subs	r4, r4, r2
    4726:	4413      	add	r3, r2
    4728:	68a0      	ldr	r0, [r4, #8]
    472a:	68e2      	ldr	r2, [r4, #12]
    472c:	60c2      	str	r2, [r0, #12]
    472e:	6090      	str	r0, [r2, #8]
    4730:	4a30      	ldr	r2, [pc, #192]	; (47f4 <_free_r+0x1c4>)
    4732:	6812      	ldr	r2, [r2, #0]
    4734:	f043 0001 	orr.w	r0, r3, #1
    4738:	4293      	cmp	r3, r2
    473a:	6060      	str	r0, [r4, #4]
    473c:	608c      	str	r4, [r1, #8]
    473e:	d3b9      	bcc.n	46b4 <_free_r+0x84>
    4740:	4b2d      	ldr	r3, [pc, #180]	; (47f8 <_free_r+0x1c8>)
    4742:	4640      	mov	r0, r8
    4744:	6819      	ldr	r1, [r3, #0]
    4746:	f7ff ff23 	bl	4590 <_malloc_trim_r>
    474a:	e7b3      	b.n	46b4 <_free_r+0x84>
    474c:	4610      	mov	r0, r2
    474e:	e7cd      	b.n	46ec <_free_r+0xbc>
    4750:	1811      	adds	r1, r2, r0
    4752:	6849      	ldr	r1, [r1, #4]
    4754:	07c9      	lsls	r1, r1, #31
    4756:	d444      	bmi.n	47e2 <_free_r+0x1b2>
    4758:	6891      	ldr	r1, [r2, #8]
    475a:	68d2      	ldr	r2, [r2, #12]
    475c:	60ca      	str	r2, [r1, #12]
    475e:	4403      	add	r3, r0
    4760:	f043 0001 	orr.w	r0, r3, #1
    4764:	6091      	str	r1, [r2, #8]
    4766:	6060      	str	r0, [r4, #4]
    4768:	50e3      	str	r3, [r4, r3]
    476a:	e7a3      	b.n	46b4 <_free_r+0x84>
    476c:	2a14      	cmp	r2, #20
    476e:	d816      	bhi.n	479e <_free_r+0x16e>
    4770:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    4774:	00ff      	lsls	r7, r7, #3
    4776:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    477a:	e7aa      	b.n	46d2 <_free_r+0xa2>
    477c:	10aa      	asrs	r2, r5, #2
    477e:	2301      	movs	r3, #1
    4780:	684d      	ldr	r5, [r1, #4]
    4782:	4093      	lsls	r3, r2
    4784:	432b      	orrs	r3, r5
    4786:	604b      	str	r3, [r1, #4]
    4788:	4603      	mov	r3, r0
    478a:	e7b0      	b.n	46ee <_free_r+0xbe>
    478c:	f043 0201 	orr.w	r2, r3, #1
    4790:	614c      	str	r4, [r1, #20]
    4792:	610c      	str	r4, [r1, #16]
    4794:	60e5      	str	r5, [r4, #12]
    4796:	60a5      	str	r5, [r4, #8]
    4798:	6062      	str	r2, [r4, #4]
    479a:	50e3      	str	r3, [r4, r3]
    479c:	e78a      	b.n	46b4 <_free_r+0x84>
    479e:	2a54      	cmp	r2, #84	; 0x54
    47a0:	d806      	bhi.n	47b0 <_free_r+0x180>
    47a2:	0b1a      	lsrs	r2, r3, #12
    47a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    47a8:	00ff      	lsls	r7, r7, #3
    47aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    47ae:	e790      	b.n	46d2 <_free_r+0xa2>
    47b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    47b4:	d806      	bhi.n	47c4 <_free_r+0x194>
    47b6:	0bda      	lsrs	r2, r3, #15
    47b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
    47bc:	00ff      	lsls	r7, r7, #3
    47be:	f102 0577 	add.w	r5, r2, #119	; 0x77
    47c2:	e786      	b.n	46d2 <_free_r+0xa2>
    47c4:	f240 5054 	movw	r0, #1364	; 0x554
    47c8:	4282      	cmp	r2, r0
    47ca:	d806      	bhi.n	47da <_free_r+0x1aa>
    47cc:	0c9a      	lsrs	r2, r3, #18
    47ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    47d2:	00ff      	lsls	r7, r7, #3
    47d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    47d8:	e77b      	b.n	46d2 <_free_r+0xa2>
    47da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
    47de:	257e      	movs	r5, #126	; 0x7e
    47e0:	e777      	b.n	46d2 <_free_r+0xa2>
    47e2:	f043 0101 	orr.w	r1, r3, #1
    47e6:	6061      	str	r1, [r4, #4]
    47e8:	6013      	str	r3, [r2, #0]
    47ea:	e763      	b.n	46b4 <_free_r+0x84>
    47ec:	200006a8 	.word	0x200006a8
    47f0:	200006b0 	.word	0x200006b0
    47f4:	20000ab4 	.word	0x20000ab4
    47f8:	20000ce8 	.word	0x20000ce8

000047fc <__sfvwrite_r>:
    47fc:	6893      	ldr	r3, [r2, #8]
    47fe:	2b00      	cmp	r3, #0
    4800:	d073      	beq.n	48ea <__sfvwrite_r+0xee>
    4802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4806:	898b      	ldrh	r3, [r1, #12]
    4808:	b083      	sub	sp, #12
    480a:	460c      	mov	r4, r1
    480c:	0719      	lsls	r1, r3, #28
    480e:	9000      	str	r0, [sp, #0]
    4810:	4616      	mov	r6, r2
    4812:	d526      	bpl.n	4862 <__sfvwrite_r+0x66>
    4814:	6922      	ldr	r2, [r4, #16]
    4816:	b322      	cbz	r2, 4862 <__sfvwrite_r+0x66>
    4818:	f013 0002 	ands.w	r0, r3, #2
    481c:	6835      	ldr	r5, [r6, #0]
    481e:	d02c      	beq.n	487a <__sfvwrite_r+0x7e>
    4820:	f04f 0900 	mov.w	r9, #0
    4824:	4fb0      	ldr	r7, [pc, #704]	; (4ae8 <__sfvwrite_r+0x2ec>)
    4826:	46c8      	mov	r8, r9
    4828:	46b2      	mov	sl, r6
    482a:	45b8      	cmp	r8, r7
    482c:	4643      	mov	r3, r8
    482e:	464a      	mov	r2, r9
    4830:	bf28      	it	cs
    4832:	463b      	movcs	r3, r7
    4834:	9800      	ldr	r0, [sp, #0]
    4836:	f1b8 0f00 	cmp.w	r8, #0
    483a:	d050      	beq.n	48de <__sfvwrite_r+0xe2>
    483c:	69e1      	ldr	r1, [r4, #28]
    483e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4840:	47b0      	blx	r6
    4842:	2800      	cmp	r0, #0
    4844:	dd58      	ble.n	48f8 <__sfvwrite_r+0xfc>
    4846:	f8da 3008 	ldr.w	r3, [sl, #8]
    484a:	1a1b      	subs	r3, r3, r0
    484c:	4481      	add	r9, r0
    484e:	eba8 0800 	sub.w	r8, r8, r0
    4852:	f8ca 3008 	str.w	r3, [sl, #8]
    4856:	2b00      	cmp	r3, #0
    4858:	d1e7      	bne.n	482a <__sfvwrite_r+0x2e>
    485a:	2000      	movs	r0, #0
    485c:	b003      	add	sp, #12
    485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4862:	4621      	mov	r1, r4
    4864:	9800      	ldr	r0, [sp, #0]
    4866:	f7ff fc51 	bl	410c <__swsetup_r>
    486a:	2800      	cmp	r0, #0
    486c:	f040 8133 	bne.w	4ad6 <__sfvwrite_r+0x2da>
    4870:	89a3      	ldrh	r3, [r4, #12]
    4872:	6835      	ldr	r5, [r6, #0]
    4874:	f013 0002 	ands.w	r0, r3, #2
    4878:	d1d2      	bne.n	4820 <__sfvwrite_r+0x24>
    487a:	f013 0901 	ands.w	r9, r3, #1
    487e:	d145      	bne.n	490c <__sfvwrite_r+0x110>
    4880:	464f      	mov	r7, r9
    4882:	9601      	str	r6, [sp, #4]
    4884:	b337      	cbz	r7, 48d4 <__sfvwrite_r+0xd8>
    4886:	059a      	lsls	r2, r3, #22
    4888:	f8d4 8008 	ldr.w	r8, [r4, #8]
    488c:	f140 8083 	bpl.w	4996 <__sfvwrite_r+0x19a>
    4890:	4547      	cmp	r7, r8
    4892:	46c3      	mov	fp, r8
    4894:	f0c0 80ab 	bcc.w	49ee <__sfvwrite_r+0x1f2>
    4898:	f413 6f90 	tst.w	r3, #1152	; 0x480
    489c:	f040 80ac 	bne.w	49f8 <__sfvwrite_r+0x1fc>
    48a0:	6820      	ldr	r0, [r4, #0]
    48a2:	46ba      	mov	sl, r7
    48a4:	465a      	mov	r2, fp
    48a6:	4649      	mov	r1, r9
    48a8:	f000 fcf2 	bl	5290 <memmove>
    48ac:	68a2      	ldr	r2, [r4, #8]
    48ae:	6823      	ldr	r3, [r4, #0]
    48b0:	eba2 0208 	sub.w	r2, r2, r8
    48b4:	445b      	add	r3, fp
    48b6:	60a2      	str	r2, [r4, #8]
    48b8:	6023      	str	r3, [r4, #0]
    48ba:	9a01      	ldr	r2, [sp, #4]
    48bc:	6893      	ldr	r3, [r2, #8]
    48be:	eba3 030a 	sub.w	r3, r3, sl
    48c2:	44d1      	add	r9, sl
    48c4:	eba7 070a 	sub.w	r7, r7, sl
    48c8:	6093      	str	r3, [r2, #8]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d0c5      	beq.n	485a <__sfvwrite_r+0x5e>
    48ce:	89a3      	ldrh	r3, [r4, #12]
    48d0:	2f00      	cmp	r7, #0
    48d2:	d1d8      	bne.n	4886 <__sfvwrite_r+0x8a>
    48d4:	f8d5 9000 	ldr.w	r9, [r5]
    48d8:	686f      	ldr	r7, [r5, #4]
    48da:	3508      	adds	r5, #8
    48dc:	e7d2      	b.n	4884 <__sfvwrite_r+0x88>
    48de:	f8d5 9000 	ldr.w	r9, [r5]
    48e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
    48e6:	3508      	adds	r5, #8
    48e8:	e79f      	b.n	482a <__sfvwrite_r+0x2e>
    48ea:	2000      	movs	r0, #0
    48ec:	4770      	bx	lr
    48ee:	4621      	mov	r1, r4
    48f0:	9800      	ldr	r0, [sp, #0]
    48f2:	f7ff fd1f 	bl	4334 <_fflush_r>
    48f6:	b370      	cbz	r0, 4956 <__sfvwrite_r+0x15a>
    48f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    48fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4900:	f04f 30ff 	mov.w	r0, #4294967295
    4904:	81a3      	strh	r3, [r4, #12]
    4906:	b003      	add	sp, #12
    4908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    490c:	4681      	mov	r9, r0
    490e:	4633      	mov	r3, r6
    4910:	464e      	mov	r6, r9
    4912:	46a8      	mov	r8, r5
    4914:	469a      	mov	sl, r3
    4916:	464d      	mov	r5, r9
    4918:	b34e      	cbz	r6, 496e <__sfvwrite_r+0x172>
    491a:	b380      	cbz	r0, 497e <__sfvwrite_r+0x182>
    491c:	6820      	ldr	r0, [r4, #0]
    491e:	6923      	ldr	r3, [r4, #16]
    4920:	6962      	ldr	r2, [r4, #20]
    4922:	45b1      	cmp	r9, r6
    4924:	46cb      	mov	fp, r9
    4926:	bf28      	it	cs
    4928:	46b3      	movcs	fp, r6
    492a:	4298      	cmp	r0, r3
    492c:	465f      	mov	r7, fp
    492e:	d904      	bls.n	493a <__sfvwrite_r+0x13e>
    4930:	68a3      	ldr	r3, [r4, #8]
    4932:	4413      	add	r3, r2
    4934:	459b      	cmp	fp, r3
    4936:	f300 80a6 	bgt.w	4a86 <__sfvwrite_r+0x28a>
    493a:	4593      	cmp	fp, r2
    493c:	db4b      	blt.n	49d6 <__sfvwrite_r+0x1da>
    493e:	4613      	mov	r3, r2
    4940:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4942:	69e1      	ldr	r1, [r4, #28]
    4944:	9800      	ldr	r0, [sp, #0]
    4946:	462a      	mov	r2, r5
    4948:	47b8      	blx	r7
    494a:	1e07      	subs	r7, r0, #0
    494c:	ddd4      	ble.n	48f8 <__sfvwrite_r+0xfc>
    494e:	ebb9 0907 	subs.w	r9, r9, r7
    4952:	d0cc      	beq.n	48ee <__sfvwrite_r+0xf2>
    4954:	2001      	movs	r0, #1
    4956:	f8da 3008 	ldr.w	r3, [sl, #8]
    495a:	1bdb      	subs	r3, r3, r7
    495c:	443d      	add	r5, r7
    495e:	1bf6      	subs	r6, r6, r7
    4960:	f8ca 3008 	str.w	r3, [sl, #8]
    4964:	2b00      	cmp	r3, #0
    4966:	f43f af78 	beq.w	485a <__sfvwrite_r+0x5e>
    496a:	2e00      	cmp	r6, #0
    496c:	d1d5      	bne.n	491a <__sfvwrite_r+0x11e>
    496e:	f108 0308 	add.w	r3, r8, #8
    4972:	e913 0060 	ldmdb	r3, {r5, r6}
    4976:	4698      	mov	r8, r3
    4978:	3308      	adds	r3, #8
    497a:	2e00      	cmp	r6, #0
    497c:	d0f9      	beq.n	4972 <__sfvwrite_r+0x176>
    497e:	4632      	mov	r2, r6
    4980:	210a      	movs	r1, #10
    4982:	4628      	mov	r0, r5
    4984:	f000 fc34 	bl	51f0 <memchr>
    4988:	2800      	cmp	r0, #0
    498a:	f000 80a1 	beq.w	4ad0 <__sfvwrite_r+0x2d4>
    498e:	3001      	adds	r0, #1
    4990:	eba0 0905 	sub.w	r9, r0, r5
    4994:	e7c2      	b.n	491c <__sfvwrite_r+0x120>
    4996:	6820      	ldr	r0, [r4, #0]
    4998:	6923      	ldr	r3, [r4, #16]
    499a:	4298      	cmp	r0, r3
    499c:	d802      	bhi.n	49a4 <__sfvwrite_r+0x1a8>
    499e:	6963      	ldr	r3, [r4, #20]
    49a0:	429f      	cmp	r7, r3
    49a2:	d25d      	bcs.n	4a60 <__sfvwrite_r+0x264>
    49a4:	45b8      	cmp	r8, r7
    49a6:	bf28      	it	cs
    49a8:	46b8      	movcs	r8, r7
    49aa:	4642      	mov	r2, r8
    49ac:	4649      	mov	r1, r9
    49ae:	f000 fc6f 	bl	5290 <memmove>
    49b2:	68a3      	ldr	r3, [r4, #8]
    49b4:	6822      	ldr	r2, [r4, #0]
    49b6:	eba3 0308 	sub.w	r3, r3, r8
    49ba:	4442      	add	r2, r8
    49bc:	60a3      	str	r3, [r4, #8]
    49be:	6022      	str	r2, [r4, #0]
    49c0:	b10b      	cbz	r3, 49c6 <__sfvwrite_r+0x1ca>
    49c2:	46c2      	mov	sl, r8
    49c4:	e779      	b.n	48ba <__sfvwrite_r+0xbe>
    49c6:	4621      	mov	r1, r4
    49c8:	9800      	ldr	r0, [sp, #0]
    49ca:	f7ff fcb3 	bl	4334 <_fflush_r>
    49ce:	2800      	cmp	r0, #0
    49d0:	d192      	bne.n	48f8 <__sfvwrite_r+0xfc>
    49d2:	46c2      	mov	sl, r8
    49d4:	e771      	b.n	48ba <__sfvwrite_r+0xbe>
    49d6:	465a      	mov	r2, fp
    49d8:	4629      	mov	r1, r5
    49da:	f000 fc59 	bl	5290 <memmove>
    49de:	68a2      	ldr	r2, [r4, #8]
    49e0:	6823      	ldr	r3, [r4, #0]
    49e2:	eba2 020b 	sub.w	r2, r2, fp
    49e6:	445b      	add	r3, fp
    49e8:	60a2      	str	r2, [r4, #8]
    49ea:	6023      	str	r3, [r4, #0]
    49ec:	e7af      	b.n	494e <__sfvwrite_r+0x152>
    49ee:	6820      	ldr	r0, [r4, #0]
    49f0:	46b8      	mov	r8, r7
    49f2:	46ba      	mov	sl, r7
    49f4:	46bb      	mov	fp, r7
    49f6:	e755      	b.n	48a4 <__sfvwrite_r+0xa8>
    49f8:	6962      	ldr	r2, [r4, #20]
    49fa:	6820      	ldr	r0, [r4, #0]
    49fc:	6921      	ldr	r1, [r4, #16]
    49fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    4a02:	eba0 0a01 	sub.w	sl, r0, r1
    4a06:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    4a0a:	f10a 0001 	add.w	r0, sl, #1
    4a0e:	ea4f 0868 	mov.w	r8, r8, asr #1
    4a12:	4438      	add	r0, r7
    4a14:	4540      	cmp	r0, r8
    4a16:	4642      	mov	r2, r8
    4a18:	bf84      	itt	hi
    4a1a:	4680      	movhi	r8, r0
    4a1c:	4642      	movhi	r2, r8
    4a1e:	055b      	lsls	r3, r3, #21
    4a20:	d544      	bpl.n	4aac <__sfvwrite_r+0x2b0>
    4a22:	4611      	mov	r1, r2
    4a24:	9800      	ldr	r0, [sp, #0]
    4a26:	f000 f919 	bl	4c5c <_malloc_r>
    4a2a:	4683      	mov	fp, r0
    4a2c:	2800      	cmp	r0, #0
    4a2e:	d055      	beq.n	4adc <__sfvwrite_r+0x2e0>
    4a30:	4652      	mov	r2, sl
    4a32:	6921      	ldr	r1, [r4, #16]
    4a34:	f7fe fbb8 	bl	31a8 <memcpy>
    4a38:	89a3      	ldrh	r3, [r4, #12]
    4a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    4a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4a42:	81a3      	strh	r3, [r4, #12]
    4a44:	eb0b 000a 	add.w	r0, fp, sl
    4a48:	eba8 030a 	sub.w	r3, r8, sl
    4a4c:	f8c4 b010 	str.w	fp, [r4, #16]
    4a50:	f8c4 8014 	str.w	r8, [r4, #20]
    4a54:	6020      	str	r0, [r4, #0]
    4a56:	60a3      	str	r3, [r4, #8]
    4a58:	46b8      	mov	r8, r7
    4a5a:	46ba      	mov	sl, r7
    4a5c:	46bb      	mov	fp, r7
    4a5e:	e721      	b.n	48a4 <__sfvwrite_r+0xa8>
    4a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4a64:	42b9      	cmp	r1, r7
    4a66:	bf28      	it	cs
    4a68:	4639      	movcs	r1, r7
    4a6a:	464a      	mov	r2, r9
    4a6c:	fb91 f1f3 	sdiv	r1, r1, r3
    4a70:	9800      	ldr	r0, [sp, #0]
    4a72:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4a74:	fb03 f301 	mul.w	r3, r3, r1
    4a78:	69e1      	ldr	r1, [r4, #28]
    4a7a:	47b0      	blx	r6
    4a7c:	f1b0 0a00 	subs.w	sl, r0, #0
    4a80:	f73f af1b 	bgt.w	48ba <__sfvwrite_r+0xbe>
    4a84:	e738      	b.n	48f8 <__sfvwrite_r+0xfc>
    4a86:	461a      	mov	r2, r3
    4a88:	4629      	mov	r1, r5
    4a8a:	9301      	str	r3, [sp, #4]
    4a8c:	f000 fc00 	bl	5290 <memmove>
    4a90:	6822      	ldr	r2, [r4, #0]
    4a92:	9b01      	ldr	r3, [sp, #4]
    4a94:	9800      	ldr	r0, [sp, #0]
    4a96:	441a      	add	r2, r3
    4a98:	6022      	str	r2, [r4, #0]
    4a9a:	4621      	mov	r1, r4
    4a9c:	f7ff fc4a 	bl	4334 <_fflush_r>
    4aa0:	9b01      	ldr	r3, [sp, #4]
    4aa2:	2800      	cmp	r0, #0
    4aa4:	f47f af28 	bne.w	48f8 <__sfvwrite_r+0xfc>
    4aa8:	461f      	mov	r7, r3
    4aaa:	e750      	b.n	494e <__sfvwrite_r+0x152>
    4aac:	9800      	ldr	r0, [sp, #0]
    4aae:	f000 fc5f 	bl	5370 <_realloc_r>
    4ab2:	4683      	mov	fp, r0
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d1c5      	bne.n	4a44 <__sfvwrite_r+0x248>
    4ab8:	9d00      	ldr	r5, [sp, #0]
    4aba:	6921      	ldr	r1, [r4, #16]
    4abc:	4628      	mov	r0, r5
    4abe:	f7ff fdb7 	bl	4630 <_free_r>
    4ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4ac6:	220c      	movs	r2, #12
    4ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4acc:	602a      	str	r2, [r5, #0]
    4ace:	e715      	b.n	48fc <__sfvwrite_r+0x100>
    4ad0:	f106 0901 	add.w	r9, r6, #1
    4ad4:	e722      	b.n	491c <__sfvwrite_r+0x120>
    4ad6:	f04f 30ff 	mov.w	r0, #4294967295
    4ada:	e6bf      	b.n	485c <__sfvwrite_r+0x60>
    4adc:	9a00      	ldr	r2, [sp, #0]
    4ade:	230c      	movs	r3, #12
    4ae0:	6013      	str	r3, [r2, #0]
    4ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4ae6:	e709      	b.n	48fc <__sfvwrite_r+0x100>
    4ae8:	7ffffc00 	.word	0x7ffffc00

00004aec <_fwalk_reent>:
    4aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4af0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    4af4:	d01f      	beq.n	4b36 <_fwalk_reent+0x4a>
    4af6:	4688      	mov	r8, r1
    4af8:	4606      	mov	r6, r0
    4afa:	f04f 0900 	mov.w	r9, #0
    4afe:	687d      	ldr	r5, [r7, #4]
    4b00:	68bc      	ldr	r4, [r7, #8]
    4b02:	3d01      	subs	r5, #1
    4b04:	d411      	bmi.n	4b2a <_fwalk_reent+0x3e>
    4b06:	89a3      	ldrh	r3, [r4, #12]
    4b08:	2b01      	cmp	r3, #1
    4b0a:	f105 35ff 	add.w	r5, r5, #4294967295
    4b0e:	d908      	bls.n	4b22 <_fwalk_reent+0x36>
    4b10:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    4b14:	3301      	adds	r3, #1
    4b16:	4621      	mov	r1, r4
    4b18:	4630      	mov	r0, r6
    4b1a:	d002      	beq.n	4b22 <_fwalk_reent+0x36>
    4b1c:	47c0      	blx	r8
    4b1e:	ea49 0900 	orr.w	r9, r9, r0
    4b22:	1c6b      	adds	r3, r5, #1
    4b24:	f104 0468 	add.w	r4, r4, #104	; 0x68
    4b28:	d1ed      	bne.n	4b06 <_fwalk_reent+0x1a>
    4b2a:	683f      	ldr	r7, [r7, #0]
    4b2c:	2f00      	cmp	r7, #0
    4b2e:	d1e6      	bne.n	4afe <_fwalk_reent+0x12>
    4b30:	4648      	mov	r0, r9
    4b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b36:	46b9      	mov	r9, r7
    4b38:	4648      	mov	r0, r9
    4b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b3e:	bf00      	nop

00004b40 <__locale_mb_cur_max>:
    4b40:	4b04      	ldr	r3, [pc, #16]	; (4b54 <__locale_mb_cur_max+0x14>)
    4b42:	4a05      	ldr	r2, [pc, #20]	; (4b58 <__locale_mb_cur_max+0x18>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4b48:	2b00      	cmp	r3, #0
    4b4a:	bf08      	it	eq
    4b4c:	4613      	moveq	r3, r2
    4b4e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    4b52:	4770      	bx	lr
    4b54:	20000108 	.word	0x20000108
    4b58:	2000053c 	.word	0x2000053c

00004b5c <__retarget_lock_init_recursive>:
    4b5c:	4770      	bx	lr
    4b5e:	bf00      	nop

00004b60 <__retarget_lock_close_recursive>:
    4b60:	4770      	bx	lr
    4b62:	bf00      	nop

00004b64 <__retarget_lock_acquire_recursive>:
    4b64:	4770      	bx	lr
    4b66:	bf00      	nop

00004b68 <__retarget_lock_release_recursive>:
    4b68:	4770      	bx	lr
    4b6a:	bf00      	nop

00004b6c <__swhatbuf_r>:
    4b6c:	b570      	push	{r4, r5, r6, lr}
    4b6e:	460c      	mov	r4, r1
    4b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4b74:	2900      	cmp	r1, #0
    4b76:	b090      	sub	sp, #64	; 0x40
    4b78:	4615      	mov	r5, r2
    4b7a:	461e      	mov	r6, r3
    4b7c:	db14      	blt.n	4ba8 <__swhatbuf_r+0x3c>
    4b7e:	aa01      	add	r2, sp, #4
    4b80:	f000 ffe8 	bl	5b54 <_fstat_r>
    4b84:	2800      	cmp	r0, #0
    4b86:	db0f      	blt.n	4ba8 <__swhatbuf_r+0x3c>
    4b88:	9a02      	ldr	r2, [sp, #8]
    4b8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    4b8e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    4b92:	fab2 f282 	clz	r2, r2
    4b96:	0952      	lsrs	r2, r2, #5
    4b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4b9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4ba0:	6032      	str	r2, [r6, #0]
    4ba2:	602b      	str	r3, [r5, #0]
    4ba4:	b010      	add	sp, #64	; 0x40
    4ba6:	bd70      	pop	{r4, r5, r6, pc}
    4ba8:	89a2      	ldrh	r2, [r4, #12]
    4baa:	2300      	movs	r3, #0
    4bac:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    4bb0:	6033      	str	r3, [r6, #0]
    4bb2:	d004      	beq.n	4bbe <__swhatbuf_r+0x52>
    4bb4:	2240      	movs	r2, #64	; 0x40
    4bb6:	4618      	mov	r0, r3
    4bb8:	602a      	str	r2, [r5, #0]
    4bba:	b010      	add	sp, #64	; 0x40
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
    4bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4bc2:	602b      	str	r3, [r5, #0]
    4bc4:	b010      	add	sp, #64	; 0x40
    4bc6:	bd70      	pop	{r4, r5, r6, pc}

00004bc8 <__smakebuf_r>:
    4bc8:	898a      	ldrh	r2, [r1, #12]
    4bca:	0792      	lsls	r2, r2, #30
    4bcc:	460b      	mov	r3, r1
    4bce:	d506      	bpl.n	4bde <__smakebuf_r+0x16>
    4bd0:	f101 0243 	add.w	r2, r1, #67	; 0x43
    4bd4:	2101      	movs	r1, #1
    4bd6:	601a      	str	r2, [r3, #0]
    4bd8:	611a      	str	r2, [r3, #16]
    4bda:	6159      	str	r1, [r3, #20]
    4bdc:	4770      	bx	lr
    4bde:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be0:	b083      	sub	sp, #12
    4be2:	ab01      	add	r3, sp, #4
    4be4:	466a      	mov	r2, sp
    4be6:	460c      	mov	r4, r1
    4be8:	4606      	mov	r6, r0
    4bea:	f7ff ffbf 	bl	4b6c <__swhatbuf_r>
    4bee:	9900      	ldr	r1, [sp, #0]
    4bf0:	4605      	mov	r5, r0
    4bf2:	4630      	mov	r0, r6
    4bf4:	f000 f832 	bl	4c5c <_malloc_r>
    4bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4bfc:	b1d8      	cbz	r0, 4c36 <__smakebuf_r+0x6e>
    4bfe:	9a01      	ldr	r2, [sp, #4]
    4c00:	4f15      	ldr	r7, [pc, #84]	; (4c58 <__smakebuf_r+0x90>)
    4c02:	9900      	ldr	r1, [sp, #0]
    4c04:	63f7      	str	r7, [r6, #60]	; 0x3c
    4c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4c0a:	81a3      	strh	r3, [r4, #12]
    4c0c:	6020      	str	r0, [r4, #0]
    4c0e:	6120      	str	r0, [r4, #16]
    4c10:	6161      	str	r1, [r4, #20]
    4c12:	b91a      	cbnz	r2, 4c1c <__smakebuf_r+0x54>
    4c14:	432b      	orrs	r3, r5
    4c16:	81a3      	strh	r3, [r4, #12]
    4c18:	b003      	add	sp, #12
    4c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c1c:	4630      	mov	r0, r6
    4c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4c22:	f000 ffab 	bl	5b7c <_isatty_r>
    4c26:	b1a0      	cbz	r0, 4c52 <__smakebuf_r+0x8a>
    4c28:	89a3      	ldrh	r3, [r4, #12]
    4c2a:	f023 0303 	bic.w	r3, r3, #3
    4c2e:	f043 0301 	orr.w	r3, r3, #1
    4c32:	b21b      	sxth	r3, r3
    4c34:	e7ee      	b.n	4c14 <__smakebuf_r+0x4c>
    4c36:	059a      	lsls	r2, r3, #22
    4c38:	d4ee      	bmi.n	4c18 <__smakebuf_r+0x50>
    4c3a:	f023 0303 	bic.w	r3, r3, #3
    4c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    4c42:	f043 0302 	orr.w	r3, r3, #2
    4c46:	2101      	movs	r1, #1
    4c48:	81a3      	strh	r3, [r4, #12]
    4c4a:	6022      	str	r2, [r4, #0]
    4c4c:	6122      	str	r2, [r4, #16]
    4c4e:	6161      	str	r1, [r4, #20]
    4c50:	e7e2      	b.n	4c18 <__smakebuf_r+0x50>
    4c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4c56:	e7dd      	b.n	4c14 <__smakebuf_r+0x4c>
    4c58:	00004389 	.word	0x00004389

00004c5c <_malloc_r>:
    4c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c60:	f101 060b 	add.w	r6, r1, #11
    4c64:	2e16      	cmp	r6, #22
    4c66:	b083      	sub	sp, #12
    4c68:	4605      	mov	r5, r0
    4c6a:	f240 809e 	bls.w	4daa <_malloc_r+0x14e>
    4c6e:	f036 0607 	bics.w	r6, r6, #7
    4c72:	f100 80bd 	bmi.w	4df0 <_malloc_r+0x194>
    4c76:	42b1      	cmp	r1, r6
    4c78:	f200 80ba 	bhi.w	4df0 <_malloc_r+0x194>
    4c7c:	f000 fb6c 	bl	5358 <__malloc_lock>
    4c80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4c84:	f0c0 8293 	bcc.w	51ae <_malloc_r+0x552>
    4c88:	0a73      	lsrs	r3, r6, #9
    4c8a:	f000 80b8 	beq.w	4dfe <_malloc_r+0x1a2>
    4c8e:	2b04      	cmp	r3, #4
    4c90:	f200 8179 	bhi.w	4f86 <_malloc_r+0x32a>
    4c94:	09b3      	lsrs	r3, r6, #6
    4c96:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4c9a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
    4c9e:	00c3      	lsls	r3, r0, #3
    4ca0:	4fbf      	ldr	r7, [pc, #764]	; (4fa0 <_malloc_r+0x344>)
    4ca2:	443b      	add	r3, r7
    4ca4:	f1a3 0108 	sub.w	r1, r3, #8
    4ca8:	685c      	ldr	r4, [r3, #4]
    4caa:	42a1      	cmp	r1, r4
    4cac:	d106      	bne.n	4cbc <_malloc_r+0x60>
    4cae:	e00c      	b.n	4cca <_malloc_r+0x6e>
    4cb0:	2a00      	cmp	r2, #0
    4cb2:	f280 80aa 	bge.w	4e0a <_malloc_r+0x1ae>
    4cb6:	68e4      	ldr	r4, [r4, #12]
    4cb8:	42a1      	cmp	r1, r4
    4cba:	d006      	beq.n	4cca <_malloc_r+0x6e>
    4cbc:	6863      	ldr	r3, [r4, #4]
    4cbe:	f023 0303 	bic.w	r3, r3, #3
    4cc2:	1b9a      	subs	r2, r3, r6
    4cc4:	2a0f      	cmp	r2, #15
    4cc6:	ddf3      	ble.n	4cb0 <_malloc_r+0x54>
    4cc8:	4670      	mov	r0, lr
    4cca:	693c      	ldr	r4, [r7, #16]
    4ccc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4fb4 <_malloc_r+0x358>
    4cd0:	4574      	cmp	r4, lr
    4cd2:	f000 81ab 	beq.w	502c <_malloc_r+0x3d0>
    4cd6:	6863      	ldr	r3, [r4, #4]
    4cd8:	f023 0303 	bic.w	r3, r3, #3
    4cdc:	1b9a      	subs	r2, r3, r6
    4cde:	2a0f      	cmp	r2, #15
    4ce0:	f300 8190 	bgt.w	5004 <_malloc_r+0x3a8>
    4ce4:	2a00      	cmp	r2, #0
    4ce6:	f8c7 e014 	str.w	lr, [r7, #20]
    4cea:	f8c7 e010 	str.w	lr, [r7, #16]
    4cee:	f280 809d 	bge.w	4e2c <_malloc_r+0x1d0>
    4cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4cf6:	f080 8161 	bcs.w	4fbc <_malloc_r+0x360>
    4cfa:	08db      	lsrs	r3, r3, #3
    4cfc:	f103 0c01 	add.w	ip, r3, #1
    4d00:	1099      	asrs	r1, r3, #2
    4d02:	687a      	ldr	r2, [r7, #4]
    4d04:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
    4d08:	f8c4 8008 	str.w	r8, [r4, #8]
    4d0c:	2301      	movs	r3, #1
    4d0e:	408b      	lsls	r3, r1
    4d10:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
    4d14:	4313      	orrs	r3, r2
    4d16:	3908      	subs	r1, #8
    4d18:	60e1      	str	r1, [r4, #12]
    4d1a:	607b      	str	r3, [r7, #4]
    4d1c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
    4d20:	f8c8 400c 	str.w	r4, [r8, #12]
    4d24:	1082      	asrs	r2, r0, #2
    4d26:	2401      	movs	r4, #1
    4d28:	4094      	lsls	r4, r2
    4d2a:	429c      	cmp	r4, r3
    4d2c:	f200 808b 	bhi.w	4e46 <_malloc_r+0x1ea>
    4d30:	421c      	tst	r4, r3
    4d32:	d106      	bne.n	4d42 <_malloc_r+0xe6>
    4d34:	f020 0003 	bic.w	r0, r0, #3
    4d38:	0064      	lsls	r4, r4, #1
    4d3a:	421c      	tst	r4, r3
    4d3c:	f100 0004 	add.w	r0, r0, #4
    4d40:	d0fa      	beq.n	4d38 <_malloc_r+0xdc>
    4d42:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4d46:	46cc      	mov	ip, r9
    4d48:	4680      	mov	r8, r0
    4d4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    4d4e:	459c      	cmp	ip, r3
    4d50:	d107      	bne.n	4d62 <_malloc_r+0x106>
    4d52:	e16d      	b.n	5030 <_malloc_r+0x3d4>
    4d54:	2a00      	cmp	r2, #0
    4d56:	f280 817b 	bge.w	5050 <_malloc_r+0x3f4>
    4d5a:	68db      	ldr	r3, [r3, #12]
    4d5c:	459c      	cmp	ip, r3
    4d5e:	f000 8167 	beq.w	5030 <_malloc_r+0x3d4>
    4d62:	6859      	ldr	r1, [r3, #4]
    4d64:	f021 0103 	bic.w	r1, r1, #3
    4d68:	1b8a      	subs	r2, r1, r6
    4d6a:	2a0f      	cmp	r2, #15
    4d6c:	ddf2      	ble.n	4d54 <_malloc_r+0xf8>
    4d6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    4d72:	f8d3 8008 	ldr.w	r8, [r3, #8]
    4d76:	9300      	str	r3, [sp, #0]
    4d78:	199c      	adds	r4, r3, r6
    4d7a:	4628      	mov	r0, r5
    4d7c:	f046 0601 	orr.w	r6, r6, #1
    4d80:	f042 0501 	orr.w	r5, r2, #1
    4d84:	605e      	str	r6, [r3, #4]
    4d86:	f8c8 c00c 	str.w	ip, [r8, #12]
    4d8a:	f8cc 8008 	str.w	r8, [ip, #8]
    4d8e:	617c      	str	r4, [r7, #20]
    4d90:	613c      	str	r4, [r7, #16]
    4d92:	f8c4 e00c 	str.w	lr, [r4, #12]
    4d96:	f8c4 e008 	str.w	lr, [r4, #8]
    4d9a:	6065      	str	r5, [r4, #4]
    4d9c:	505a      	str	r2, [r3, r1]
    4d9e:	f000 fae1 	bl	5364 <__malloc_unlock>
    4da2:	9b00      	ldr	r3, [sp, #0]
    4da4:	f103 0408 	add.w	r4, r3, #8
    4da8:	e01e      	b.n	4de8 <_malloc_r+0x18c>
    4daa:	2910      	cmp	r1, #16
    4dac:	d820      	bhi.n	4df0 <_malloc_r+0x194>
    4dae:	f000 fad3 	bl	5358 <__malloc_lock>
    4db2:	2610      	movs	r6, #16
    4db4:	2318      	movs	r3, #24
    4db6:	2002      	movs	r0, #2
    4db8:	4f79      	ldr	r7, [pc, #484]	; (4fa0 <_malloc_r+0x344>)
    4dba:	443b      	add	r3, r7
    4dbc:	f1a3 0208 	sub.w	r2, r3, #8
    4dc0:	685c      	ldr	r4, [r3, #4]
    4dc2:	4294      	cmp	r4, r2
    4dc4:	f000 813d 	beq.w	5042 <_malloc_r+0x3e6>
    4dc8:	6863      	ldr	r3, [r4, #4]
    4dca:	68e1      	ldr	r1, [r4, #12]
    4dcc:	68a6      	ldr	r6, [r4, #8]
    4dce:	f023 0303 	bic.w	r3, r3, #3
    4dd2:	4423      	add	r3, r4
    4dd4:	4628      	mov	r0, r5
    4dd6:	685a      	ldr	r2, [r3, #4]
    4dd8:	60f1      	str	r1, [r6, #12]
    4dda:	f042 0201 	orr.w	r2, r2, #1
    4dde:	608e      	str	r6, [r1, #8]
    4de0:	605a      	str	r2, [r3, #4]
    4de2:	f000 fabf 	bl	5364 <__malloc_unlock>
    4de6:	3408      	adds	r4, #8
    4de8:	4620      	mov	r0, r4
    4dea:	b003      	add	sp, #12
    4dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4df0:	2400      	movs	r4, #0
    4df2:	230c      	movs	r3, #12
    4df4:	4620      	mov	r0, r4
    4df6:	602b      	str	r3, [r5, #0]
    4df8:	b003      	add	sp, #12
    4dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dfe:	2040      	movs	r0, #64	; 0x40
    4e00:	f44f 7300 	mov.w	r3, #512	; 0x200
    4e04:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    4e08:	e74a      	b.n	4ca0 <_malloc_r+0x44>
    4e0a:	4423      	add	r3, r4
    4e0c:	68e1      	ldr	r1, [r4, #12]
    4e0e:	685a      	ldr	r2, [r3, #4]
    4e10:	68a6      	ldr	r6, [r4, #8]
    4e12:	f042 0201 	orr.w	r2, r2, #1
    4e16:	60f1      	str	r1, [r6, #12]
    4e18:	4628      	mov	r0, r5
    4e1a:	608e      	str	r6, [r1, #8]
    4e1c:	605a      	str	r2, [r3, #4]
    4e1e:	f000 faa1 	bl	5364 <__malloc_unlock>
    4e22:	3408      	adds	r4, #8
    4e24:	4620      	mov	r0, r4
    4e26:	b003      	add	sp, #12
    4e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e2c:	4423      	add	r3, r4
    4e2e:	4628      	mov	r0, r5
    4e30:	685a      	ldr	r2, [r3, #4]
    4e32:	f042 0201 	orr.w	r2, r2, #1
    4e36:	605a      	str	r2, [r3, #4]
    4e38:	f000 fa94 	bl	5364 <__malloc_unlock>
    4e3c:	3408      	adds	r4, #8
    4e3e:	4620      	mov	r0, r4
    4e40:	b003      	add	sp, #12
    4e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e46:	68bc      	ldr	r4, [r7, #8]
    4e48:	6863      	ldr	r3, [r4, #4]
    4e4a:	f023 0803 	bic.w	r8, r3, #3
    4e4e:	45b0      	cmp	r8, r6
    4e50:	d304      	bcc.n	4e5c <_malloc_r+0x200>
    4e52:	eba8 0306 	sub.w	r3, r8, r6
    4e56:	2b0f      	cmp	r3, #15
    4e58:	f300 8085 	bgt.w	4f66 <_malloc_r+0x30a>
    4e5c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4fb8 <_malloc_r+0x35c>
    4e60:	4b50      	ldr	r3, [pc, #320]	; (4fa4 <_malloc_r+0x348>)
    4e62:	f8d9 2000 	ldr.w	r2, [r9]
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	3201      	adds	r2, #1
    4e6a:	4433      	add	r3, r6
    4e6c:	eb04 0a08 	add.w	sl, r4, r8
    4e70:	f000 8155 	beq.w	511e <_malloc_r+0x4c2>
    4e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4e78:	330f      	adds	r3, #15
    4e7a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    4e7e:	f02b 0b0f 	bic.w	fp, fp, #15
    4e82:	4659      	mov	r1, fp
    4e84:	4628      	mov	r0, r5
    4e86:	f000 fc19 	bl	56bc <_sbrk_r>
    4e8a:	1c41      	adds	r1, r0, #1
    4e8c:	4602      	mov	r2, r0
    4e8e:	f000 80fc 	beq.w	508a <_malloc_r+0x42e>
    4e92:	4582      	cmp	sl, r0
    4e94:	f200 80f7 	bhi.w	5086 <_malloc_r+0x42a>
    4e98:	4b43      	ldr	r3, [pc, #268]	; (4fa8 <_malloc_r+0x34c>)
    4e9a:	6819      	ldr	r1, [r3, #0]
    4e9c:	4459      	add	r1, fp
    4e9e:	6019      	str	r1, [r3, #0]
    4ea0:	f000 814d 	beq.w	513e <_malloc_r+0x4e2>
    4ea4:	f8d9 0000 	ldr.w	r0, [r9]
    4ea8:	3001      	adds	r0, #1
    4eaa:	bf1b      	ittet	ne
    4eac:	eba2 0a0a 	subne.w	sl, r2, sl
    4eb0:	4451      	addne	r1, sl
    4eb2:	f8c9 2000 	streq.w	r2, [r9]
    4eb6:	6019      	strne	r1, [r3, #0]
    4eb8:	f012 0107 	ands.w	r1, r2, #7
    4ebc:	f000 8115 	beq.w	50ea <_malloc_r+0x48e>
    4ec0:	f1c1 0008 	rsb	r0, r1, #8
    4ec4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    4ec8:	4402      	add	r2, r0
    4eca:	3108      	adds	r1, #8
    4ecc:	eb02 090b 	add.w	r9, r2, fp
    4ed0:	f3c9 090b 	ubfx	r9, r9, #0, #12
    4ed4:	eba1 0909 	sub.w	r9, r1, r9
    4ed8:	4649      	mov	r1, r9
    4eda:	4628      	mov	r0, r5
    4edc:	9301      	str	r3, [sp, #4]
    4ede:	9200      	str	r2, [sp, #0]
    4ee0:	f000 fbec 	bl	56bc <_sbrk_r>
    4ee4:	1c43      	adds	r3, r0, #1
    4ee6:	e89d 000c 	ldmia.w	sp, {r2, r3}
    4eea:	f000 8143 	beq.w	5174 <_malloc_r+0x518>
    4eee:	1a80      	subs	r0, r0, r2
    4ef0:	4448      	add	r0, r9
    4ef2:	f040 0001 	orr.w	r0, r0, #1
    4ef6:	6819      	ldr	r1, [r3, #0]
    4ef8:	60ba      	str	r2, [r7, #8]
    4efa:	4449      	add	r1, r9
    4efc:	42bc      	cmp	r4, r7
    4efe:	6050      	str	r0, [r2, #4]
    4f00:	6019      	str	r1, [r3, #0]
    4f02:	d017      	beq.n	4f34 <_malloc_r+0x2d8>
    4f04:	f1b8 0f0f 	cmp.w	r8, #15
    4f08:	f240 80fb 	bls.w	5102 <_malloc_r+0x4a6>
    4f0c:	6860      	ldr	r0, [r4, #4]
    4f0e:	f1a8 020c 	sub.w	r2, r8, #12
    4f12:	f022 0207 	bic.w	r2, r2, #7
    4f16:	eb04 0e02 	add.w	lr, r4, r2
    4f1a:	f000 0001 	and.w	r0, r0, #1
    4f1e:	f04f 0c05 	mov.w	ip, #5
    4f22:	4310      	orrs	r0, r2
    4f24:	2a0f      	cmp	r2, #15
    4f26:	6060      	str	r0, [r4, #4]
    4f28:	f8ce c004 	str.w	ip, [lr, #4]
    4f2c:	f8ce c008 	str.w	ip, [lr, #8]
    4f30:	f200 8117 	bhi.w	5162 <_malloc_r+0x506>
    4f34:	4b1d      	ldr	r3, [pc, #116]	; (4fac <_malloc_r+0x350>)
    4f36:	68bc      	ldr	r4, [r7, #8]
    4f38:	681a      	ldr	r2, [r3, #0]
    4f3a:	4291      	cmp	r1, r2
    4f3c:	bf88      	it	hi
    4f3e:	6019      	strhi	r1, [r3, #0]
    4f40:	4b1b      	ldr	r3, [pc, #108]	; (4fb0 <_malloc_r+0x354>)
    4f42:	681a      	ldr	r2, [r3, #0]
    4f44:	4291      	cmp	r1, r2
    4f46:	6862      	ldr	r2, [r4, #4]
    4f48:	bf88      	it	hi
    4f4a:	6019      	strhi	r1, [r3, #0]
    4f4c:	f022 0203 	bic.w	r2, r2, #3
    4f50:	4296      	cmp	r6, r2
    4f52:	eba2 0306 	sub.w	r3, r2, r6
    4f56:	d801      	bhi.n	4f5c <_malloc_r+0x300>
    4f58:	2b0f      	cmp	r3, #15
    4f5a:	dc04      	bgt.n	4f66 <_malloc_r+0x30a>
    4f5c:	4628      	mov	r0, r5
    4f5e:	f000 fa01 	bl	5364 <__malloc_unlock>
    4f62:	2400      	movs	r4, #0
    4f64:	e740      	b.n	4de8 <_malloc_r+0x18c>
    4f66:	19a2      	adds	r2, r4, r6
    4f68:	f043 0301 	orr.w	r3, r3, #1
    4f6c:	f046 0601 	orr.w	r6, r6, #1
    4f70:	6066      	str	r6, [r4, #4]
    4f72:	4628      	mov	r0, r5
    4f74:	60ba      	str	r2, [r7, #8]
    4f76:	6053      	str	r3, [r2, #4]
    4f78:	f000 f9f4 	bl	5364 <__malloc_unlock>
    4f7c:	3408      	adds	r4, #8
    4f7e:	4620      	mov	r0, r4
    4f80:	b003      	add	sp, #12
    4f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f86:	2b14      	cmp	r3, #20
    4f88:	d971      	bls.n	506e <_malloc_r+0x412>
    4f8a:	2b54      	cmp	r3, #84	; 0x54
    4f8c:	f200 80a3 	bhi.w	50d6 <_malloc_r+0x47a>
    4f90:	0b33      	lsrs	r3, r6, #12
    4f92:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4f96:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
    4f9a:	00c3      	lsls	r3, r0, #3
    4f9c:	e680      	b.n	4ca0 <_malloc_r+0x44>
    4f9e:	bf00      	nop
    4fa0:	200006a8 	.word	0x200006a8
    4fa4:	20000ce8 	.word	0x20000ce8
    4fa8:	20000cb8 	.word	0x20000cb8
    4fac:	20000ce0 	.word	0x20000ce0
    4fb0:	20000ce4 	.word	0x20000ce4
    4fb4:	200006b0 	.word	0x200006b0
    4fb8:	20000ab0 	.word	0x20000ab0
    4fbc:	0a5a      	lsrs	r2, r3, #9
    4fbe:	2a04      	cmp	r2, #4
    4fc0:	d95b      	bls.n	507a <_malloc_r+0x41e>
    4fc2:	2a14      	cmp	r2, #20
    4fc4:	f200 80ae 	bhi.w	5124 <_malloc_r+0x4c8>
    4fc8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    4fcc:	00c9      	lsls	r1, r1, #3
    4fce:	325b      	adds	r2, #91	; 0x5b
    4fd0:	eb07 0c01 	add.w	ip, r7, r1
    4fd4:	5879      	ldr	r1, [r7, r1]
    4fd6:	f1ac 0c08 	sub.w	ip, ip, #8
    4fda:	458c      	cmp	ip, r1
    4fdc:	f000 8088 	beq.w	50f0 <_malloc_r+0x494>
    4fe0:	684a      	ldr	r2, [r1, #4]
    4fe2:	f022 0203 	bic.w	r2, r2, #3
    4fe6:	4293      	cmp	r3, r2
    4fe8:	d273      	bcs.n	50d2 <_malloc_r+0x476>
    4fea:	6889      	ldr	r1, [r1, #8]
    4fec:	458c      	cmp	ip, r1
    4fee:	d1f7      	bne.n	4fe0 <_malloc_r+0x384>
    4ff0:	f8dc 200c 	ldr.w	r2, [ip, #12]
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	60e2      	str	r2, [r4, #12]
    4ff8:	f8c4 c008 	str.w	ip, [r4, #8]
    4ffc:	6094      	str	r4, [r2, #8]
    4ffe:	f8cc 400c 	str.w	r4, [ip, #12]
    5002:	e68f      	b.n	4d24 <_malloc_r+0xc8>
    5004:	19a1      	adds	r1, r4, r6
    5006:	f046 0c01 	orr.w	ip, r6, #1
    500a:	f042 0601 	orr.w	r6, r2, #1
    500e:	f8c4 c004 	str.w	ip, [r4, #4]
    5012:	4628      	mov	r0, r5
    5014:	6179      	str	r1, [r7, #20]
    5016:	6139      	str	r1, [r7, #16]
    5018:	f8c1 e00c 	str.w	lr, [r1, #12]
    501c:	f8c1 e008 	str.w	lr, [r1, #8]
    5020:	604e      	str	r6, [r1, #4]
    5022:	50e2      	str	r2, [r4, r3]
    5024:	f000 f99e 	bl	5364 <__malloc_unlock>
    5028:	3408      	adds	r4, #8
    502a:	e6dd      	b.n	4de8 <_malloc_r+0x18c>
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	e679      	b.n	4d24 <_malloc_r+0xc8>
    5030:	f108 0801 	add.w	r8, r8, #1
    5034:	f018 0f03 	tst.w	r8, #3
    5038:	f10c 0c08 	add.w	ip, ip, #8
    503c:	f47f ae85 	bne.w	4d4a <_malloc_r+0xee>
    5040:	e02d      	b.n	509e <_malloc_r+0x442>
    5042:	68dc      	ldr	r4, [r3, #12]
    5044:	42a3      	cmp	r3, r4
    5046:	bf08      	it	eq
    5048:	3002      	addeq	r0, #2
    504a:	f43f ae3e 	beq.w	4cca <_malloc_r+0x6e>
    504e:	e6bb      	b.n	4dc8 <_malloc_r+0x16c>
    5050:	4419      	add	r1, r3
    5052:	461c      	mov	r4, r3
    5054:	684a      	ldr	r2, [r1, #4]
    5056:	68db      	ldr	r3, [r3, #12]
    5058:	f854 6f08 	ldr.w	r6, [r4, #8]!
    505c:	f042 0201 	orr.w	r2, r2, #1
    5060:	604a      	str	r2, [r1, #4]
    5062:	4628      	mov	r0, r5
    5064:	60f3      	str	r3, [r6, #12]
    5066:	609e      	str	r6, [r3, #8]
    5068:	f000 f97c 	bl	5364 <__malloc_unlock>
    506c:	e6bc      	b.n	4de8 <_malloc_r+0x18c>
    506e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5072:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
    5076:	00c3      	lsls	r3, r0, #3
    5078:	e612      	b.n	4ca0 <_malloc_r+0x44>
    507a:	099a      	lsrs	r2, r3, #6
    507c:	f102 0139 	add.w	r1, r2, #57	; 0x39
    5080:	00c9      	lsls	r1, r1, #3
    5082:	3238      	adds	r2, #56	; 0x38
    5084:	e7a4      	b.n	4fd0 <_malloc_r+0x374>
    5086:	42bc      	cmp	r4, r7
    5088:	d054      	beq.n	5134 <_malloc_r+0x4d8>
    508a:	68bc      	ldr	r4, [r7, #8]
    508c:	6862      	ldr	r2, [r4, #4]
    508e:	f022 0203 	bic.w	r2, r2, #3
    5092:	e75d      	b.n	4f50 <_malloc_r+0x2f4>
    5094:	f859 3908 	ldr.w	r3, [r9], #-8
    5098:	4599      	cmp	r9, r3
    509a:	f040 8086 	bne.w	51aa <_malloc_r+0x54e>
    509e:	f010 0f03 	tst.w	r0, #3
    50a2:	f100 30ff 	add.w	r0, r0, #4294967295
    50a6:	d1f5      	bne.n	5094 <_malloc_r+0x438>
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	ea23 0304 	bic.w	r3, r3, r4
    50ae:	607b      	str	r3, [r7, #4]
    50b0:	0064      	lsls	r4, r4, #1
    50b2:	429c      	cmp	r4, r3
    50b4:	f63f aec7 	bhi.w	4e46 <_malloc_r+0x1ea>
    50b8:	2c00      	cmp	r4, #0
    50ba:	f43f aec4 	beq.w	4e46 <_malloc_r+0x1ea>
    50be:	421c      	tst	r4, r3
    50c0:	4640      	mov	r0, r8
    50c2:	f47f ae3e 	bne.w	4d42 <_malloc_r+0xe6>
    50c6:	0064      	lsls	r4, r4, #1
    50c8:	421c      	tst	r4, r3
    50ca:	f100 0004 	add.w	r0, r0, #4
    50ce:	d0fa      	beq.n	50c6 <_malloc_r+0x46a>
    50d0:	e637      	b.n	4d42 <_malloc_r+0xe6>
    50d2:	468c      	mov	ip, r1
    50d4:	e78c      	b.n	4ff0 <_malloc_r+0x394>
    50d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    50da:	d815      	bhi.n	5108 <_malloc_r+0x4ac>
    50dc:	0bf3      	lsrs	r3, r6, #15
    50de:	f103 0078 	add.w	r0, r3, #120	; 0x78
    50e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
    50e6:	00c3      	lsls	r3, r0, #3
    50e8:	e5da      	b.n	4ca0 <_malloc_r+0x44>
    50ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    50ee:	e6ed      	b.n	4ecc <_malloc_r+0x270>
    50f0:	687b      	ldr	r3, [r7, #4]
    50f2:	1092      	asrs	r2, r2, #2
    50f4:	2101      	movs	r1, #1
    50f6:	fa01 f202 	lsl.w	r2, r1, r2
    50fa:	4313      	orrs	r3, r2
    50fc:	607b      	str	r3, [r7, #4]
    50fe:	4662      	mov	r2, ip
    5100:	e779      	b.n	4ff6 <_malloc_r+0x39a>
    5102:	2301      	movs	r3, #1
    5104:	6053      	str	r3, [r2, #4]
    5106:	e729      	b.n	4f5c <_malloc_r+0x300>
    5108:	f240 5254 	movw	r2, #1364	; 0x554
    510c:	4293      	cmp	r3, r2
    510e:	d822      	bhi.n	5156 <_malloc_r+0x4fa>
    5110:	0cb3      	lsrs	r3, r6, #18
    5112:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5116:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
    511a:	00c3      	lsls	r3, r0, #3
    511c:	e5c0      	b.n	4ca0 <_malloc_r+0x44>
    511e:	f103 0b10 	add.w	fp, r3, #16
    5122:	e6ae      	b.n	4e82 <_malloc_r+0x226>
    5124:	2a54      	cmp	r2, #84	; 0x54
    5126:	d829      	bhi.n	517c <_malloc_r+0x520>
    5128:	0b1a      	lsrs	r2, r3, #12
    512a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    512e:	00c9      	lsls	r1, r1, #3
    5130:	326e      	adds	r2, #110	; 0x6e
    5132:	e74d      	b.n	4fd0 <_malloc_r+0x374>
    5134:	4b20      	ldr	r3, [pc, #128]	; (51b8 <_malloc_r+0x55c>)
    5136:	6819      	ldr	r1, [r3, #0]
    5138:	4459      	add	r1, fp
    513a:	6019      	str	r1, [r3, #0]
    513c:	e6b2      	b.n	4ea4 <_malloc_r+0x248>
    513e:	f3ca 000b 	ubfx	r0, sl, #0, #12
    5142:	2800      	cmp	r0, #0
    5144:	f47f aeae 	bne.w	4ea4 <_malloc_r+0x248>
    5148:	eb08 030b 	add.w	r3, r8, fp
    514c:	68ba      	ldr	r2, [r7, #8]
    514e:	f043 0301 	orr.w	r3, r3, #1
    5152:	6053      	str	r3, [r2, #4]
    5154:	e6ee      	b.n	4f34 <_malloc_r+0x2d8>
    5156:	207f      	movs	r0, #127	; 0x7f
    5158:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    515c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
    5160:	e59e      	b.n	4ca0 <_malloc_r+0x44>
    5162:	f104 0108 	add.w	r1, r4, #8
    5166:	4628      	mov	r0, r5
    5168:	9300      	str	r3, [sp, #0]
    516a:	f7ff fa61 	bl	4630 <_free_r>
    516e:	9b00      	ldr	r3, [sp, #0]
    5170:	6819      	ldr	r1, [r3, #0]
    5172:	e6df      	b.n	4f34 <_malloc_r+0x2d8>
    5174:	2001      	movs	r0, #1
    5176:	f04f 0900 	mov.w	r9, #0
    517a:	e6bc      	b.n	4ef6 <_malloc_r+0x29a>
    517c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5180:	d805      	bhi.n	518e <_malloc_r+0x532>
    5182:	0bda      	lsrs	r2, r3, #15
    5184:	f102 0178 	add.w	r1, r2, #120	; 0x78
    5188:	00c9      	lsls	r1, r1, #3
    518a:	3277      	adds	r2, #119	; 0x77
    518c:	e720      	b.n	4fd0 <_malloc_r+0x374>
    518e:	f240 5154 	movw	r1, #1364	; 0x554
    5192:	428a      	cmp	r2, r1
    5194:	d805      	bhi.n	51a2 <_malloc_r+0x546>
    5196:	0c9a      	lsrs	r2, r3, #18
    5198:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    519c:	00c9      	lsls	r1, r1, #3
    519e:	327c      	adds	r2, #124	; 0x7c
    51a0:	e716      	b.n	4fd0 <_malloc_r+0x374>
    51a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    51a6:	227e      	movs	r2, #126	; 0x7e
    51a8:	e712      	b.n	4fd0 <_malloc_r+0x374>
    51aa:	687b      	ldr	r3, [r7, #4]
    51ac:	e780      	b.n	50b0 <_malloc_r+0x454>
    51ae:	08f0      	lsrs	r0, r6, #3
    51b0:	f106 0308 	add.w	r3, r6, #8
    51b4:	e600      	b.n	4db8 <_malloc_r+0x15c>
    51b6:	bf00      	nop
    51b8:	20000cb8 	.word	0x20000cb8

000051bc <__ascii_mbtowc>:
    51bc:	b082      	sub	sp, #8
    51be:	b149      	cbz	r1, 51d4 <__ascii_mbtowc+0x18>
    51c0:	b15a      	cbz	r2, 51da <__ascii_mbtowc+0x1e>
    51c2:	b16b      	cbz	r3, 51e0 <__ascii_mbtowc+0x24>
    51c4:	7813      	ldrb	r3, [r2, #0]
    51c6:	600b      	str	r3, [r1, #0]
    51c8:	7812      	ldrb	r2, [r2, #0]
    51ca:	1c10      	adds	r0, r2, #0
    51cc:	bf18      	it	ne
    51ce:	2001      	movne	r0, #1
    51d0:	b002      	add	sp, #8
    51d2:	4770      	bx	lr
    51d4:	a901      	add	r1, sp, #4
    51d6:	2a00      	cmp	r2, #0
    51d8:	d1f3      	bne.n	51c2 <__ascii_mbtowc+0x6>
    51da:	4610      	mov	r0, r2
    51dc:	b002      	add	sp, #8
    51de:	4770      	bx	lr
    51e0:	f06f 0001 	mvn.w	r0, #1
    51e4:	e7f4      	b.n	51d0 <__ascii_mbtowc+0x14>
    51e6:	bf00      	nop
	...

000051f0 <memchr>:
    51f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    51f4:	2a10      	cmp	r2, #16
    51f6:	db2b      	blt.n	5250 <memchr+0x60>
    51f8:	f010 0f07 	tst.w	r0, #7
    51fc:	d008      	beq.n	5210 <memchr+0x20>
    51fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    5202:	3a01      	subs	r2, #1
    5204:	428b      	cmp	r3, r1
    5206:	d02d      	beq.n	5264 <memchr+0x74>
    5208:	f010 0f07 	tst.w	r0, #7
    520c:	b342      	cbz	r2, 5260 <memchr+0x70>
    520e:	d1f6      	bne.n	51fe <memchr+0xe>
    5210:	b4f0      	push	{r4, r5, r6, r7}
    5212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    521a:	f022 0407 	bic.w	r4, r2, #7
    521e:	f07f 0700 	mvns.w	r7, #0
    5222:	2300      	movs	r3, #0
    5224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5228:	3c08      	subs	r4, #8
    522a:	ea85 0501 	eor.w	r5, r5, r1
    522e:	ea86 0601 	eor.w	r6, r6, r1
    5232:	fa85 f547 	uadd8	r5, r5, r7
    5236:	faa3 f587 	sel	r5, r3, r7
    523a:	fa86 f647 	uadd8	r6, r6, r7
    523e:	faa5 f687 	sel	r6, r5, r7
    5242:	b98e      	cbnz	r6, 5268 <memchr+0x78>
    5244:	d1ee      	bne.n	5224 <memchr+0x34>
    5246:	bcf0      	pop	{r4, r5, r6, r7}
    5248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    524c:	f002 0207 	and.w	r2, r2, #7
    5250:	b132      	cbz	r2, 5260 <memchr+0x70>
    5252:	f810 3b01 	ldrb.w	r3, [r0], #1
    5256:	3a01      	subs	r2, #1
    5258:	ea83 0301 	eor.w	r3, r3, r1
    525c:	b113      	cbz	r3, 5264 <memchr+0x74>
    525e:	d1f8      	bne.n	5252 <memchr+0x62>
    5260:	2000      	movs	r0, #0
    5262:	4770      	bx	lr
    5264:	3801      	subs	r0, #1
    5266:	4770      	bx	lr
    5268:	2d00      	cmp	r5, #0
    526a:	bf06      	itte	eq
    526c:	4635      	moveq	r5, r6
    526e:	3803      	subeq	r0, #3
    5270:	3807      	subne	r0, #7
    5272:	f015 0f01 	tst.w	r5, #1
    5276:	d107      	bne.n	5288 <memchr+0x98>
    5278:	3001      	adds	r0, #1
    527a:	f415 7f80 	tst.w	r5, #256	; 0x100
    527e:	bf02      	ittt	eq
    5280:	3001      	addeq	r0, #1
    5282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5286:	3001      	addeq	r0, #1
    5288:	bcf0      	pop	{r4, r5, r6, r7}
    528a:	3801      	subs	r0, #1
    528c:	4770      	bx	lr
    528e:	bf00      	nop

00005290 <memmove>:
    5290:	4288      	cmp	r0, r1
    5292:	b5f0      	push	{r4, r5, r6, r7, lr}
    5294:	d90d      	bls.n	52b2 <memmove+0x22>
    5296:	188b      	adds	r3, r1, r2
    5298:	4298      	cmp	r0, r3
    529a:	d20a      	bcs.n	52b2 <memmove+0x22>
    529c:	1884      	adds	r4, r0, r2
    529e:	2a00      	cmp	r2, #0
    52a0:	d051      	beq.n	5346 <memmove+0xb6>
    52a2:	4622      	mov	r2, r4
    52a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    52a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
    52ac:	4299      	cmp	r1, r3
    52ae:	d1f9      	bne.n	52a4 <memmove+0x14>
    52b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52b2:	2a0f      	cmp	r2, #15
    52b4:	d948      	bls.n	5348 <memmove+0xb8>
    52b6:	ea41 0300 	orr.w	r3, r1, r0
    52ba:	079b      	lsls	r3, r3, #30
    52bc:	d146      	bne.n	534c <memmove+0xbc>
    52be:	f100 0410 	add.w	r4, r0, #16
    52c2:	f101 0310 	add.w	r3, r1, #16
    52c6:	4615      	mov	r5, r2
    52c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
    52cc:	f844 6c10 	str.w	r6, [r4, #-16]
    52d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    52d4:	f844 6c0c 	str.w	r6, [r4, #-12]
    52d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
    52dc:	f844 6c08 	str.w	r6, [r4, #-8]
    52e0:	3d10      	subs	r5, #16
    52e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
    52e6:	f844 6c04 	str.w	r6, [r4, #-4]
    52ea:	2d0f      	cmp	r5, #15
    52ec:	f103 0310 	add.w	r3, r3, #16
    52f0:	f104 0410 	add.w	r4, r4, #16
    52f4:	d8e8      	bhi.n	52c8 <memmove+0x38>
    52f6:	f1a2 0310 	sub.w	r3, r2, #16
    52fa:	f023 030f 	bic.w	r3, r3, #15
    52fe:	f002 0e0f 	and.w	lr, r2, #15
    5302:	3310      	adds	r3, #16
    5304:	f1be 0f03 	cmp.w	lr, #3
    5308:	4419      	add	r1, r3
    530a:	4403      	add	r3, r0
    530c:	d921      	bls.n	5352 <memmove+0xc2>
    530e:	1f1e      	subs	r6, r3, #4
    5310:	460d      	mov	r5, r1
    5312:	4674      	mov	r4, lr
    5314:	3c04      	subs	r4, #4
    5316:	f855 7b04 	ldr.w	r7, [r5], #4
    531a:	f846 7f04 	str.w	r7, [r6, #4]!
    531e:	2c03      	cmp	r4, #3
    5320:	d8f8      	bhi.n	5314 <memmove+0x84>
    5322:	f1ae 0404 	sub.w	r4, lr, #4
    5326:	f024 0403 	bic.w	r4, r4, #3
    532a:	3404      	adds	r4, #4
    532c:	4421      	add	r1, r4
    532e:	4423      	add	r3, r4
    5330:	f002 0203 	and.w	r2, r2, #3
    5334:	b162      	cbz	r2, 5350 <memmove+0xc0>
    5336:	3b01      	subs	r3, #1
    5338:	440a      	add	r2, r1
    533a:	f811 4b01 	ldrb.w	r4, [r1], #1
    533e:	f803 4f01 	strb.w	r4, [r3, #1]!
    5342:	428a      	cmp	r2, r1
    5344:	d1f9      	bne.n	533a <memmove+0xaa>
    5346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5348:	4603      	mov	r3, r0
    534a:	e7f3      	b.n	5334 <memmove+0xa4>
    534c:	4603      	mov	r3, r0
    534e:	e7f2      	b.n	5336 <memmove+0xa6>
    5350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5352:	4672      	mov	r2, lr
    5354:	e7ee      	b.n	5334 <memmove+0xa4>
    5356:	bf00      	nop

00005358 <__malloc_lock>:
    5358:	4801      	ldr	r0, [pc, #4]	; (5360 <__malloc_lock+0x8>)
    535a:	f7ff bc03 	b.w	4b64 <__retarget_lock_acquire_recursive>
    535e:	bf00      	nop
    5360:	20000e20 	.word	0x20000e20

00005364 <__malloc_unlock>:
    5364:	4801      	ldr	r0, [pc, #4]	; (536c <__malloc_unlock+0x8>)
    5366:	f7ff bbff 	b.w	4b68 <__retarget_lock_release_recursive>
    536a:	bf00      	nop
    536c:	20000e20 	.word	0x20000e20

00005370 <_realloc_r>:
    5370:	2900      	cmp	r1, #0
    5372:	f000 8095 	beq.w	54a0 <_realloc_r+0x130>
    5376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    537a:	460d      	mov	r5, r1
    537c:	4616      	mov	r6, r2
    537e:	b083      	sub	sp, #12
    5380:	4680      	mov	r8, r0
    5382:	f106 070b 	add.w	r7, r6, #11
    5386:	f7ff ffe7 	bl	5358 <__malloc_lock>
    538a:	f855 ec04 	ldr.w	lr, [r5, #-4]
    538e:	2f16      	cmp	r7, #22
    5390:	f02e 0403 	bic.w	r4, lr, #3
    5394:	f1a5 0908 	sub.w	r9, r5, #8
    5398:	d83c      	bhi.n	5414 <_realloc_r+0xa4>
    539a:	2210      	movs	r2, #16
    539c:	4617      	mov	r7, r2
    539e:	42be      	cmp	r6, r7
    53a0:	d83d      	bhi.n	541e <_realloc_r+0xae>
    53a2:	4294      	cmp	r4, r2
    53a4:	da43      	bge.n	542e <_realloc_r+0xbe>
    53a6:	4bc4      	ldr	r3, [pc, #784]	; (56b8 <_realloc_r+0x348>)
    53a8:	6899      	ldr	r1, [r3, #8]
    53aa:	eb09 0004 	add.w	r0, r9, r4
    53ae:	4288      	cmp	r0, r1
    53b0:	f000 80b4 	beq.w	551c <_realloc_r+0x1ac>
    53b4:	6843      	ldr	r3, [r0, #4]
    53b6:	f023 0101 	bic.w	r1, r3, #1
    53ba:	4401      	add	r1, r0
    53bc:	6849      	ldr	r1, [r1, #4]
    53be:	07c9      	lsls	r1, r1, #31
    53c0:	d54c      	bpl.n	545c <_realloc_r+0xec>
    53c2:	f01e 0f01 	tst.w	lr, #1
    53c6:	f000 809b 	beq.w	5500 <_realloc_r+0x190>
    53ca:	4631      	mov	r1, r6
    53cc:	4640      	mov	r0, r8
    53ce:	f7ff fc45 	bl	4c5c <_malloc_r>
    53d2:	4606      	mov	r6, r0
    53d4:	2800      	cmp	r0, #0
    53d6:	d03a      	beq.n	544e <_realloc_r+0xde>
    53d8:	f855 3c04 	ldr.w	r3, [r5, #-4]
    53dc:	f023 0301 	bic.w	r3, r3, #1
    53e0:	444b      	add	r3, r9
    53e2:	f1a0 0208 	sub.w	r2, r0, #8
    53e6:	429a      	cmp	r2, r3
    53e8:	f000 8121 	beq.w	562e <_realloc_r+0x2be>
    53ec:	1f22      	subs	r2, r4, #4
    53ee:	2a24      	cmp	r2, #36	; 0x24
    53f0:	f200 8107 	bhi.w	5602 <_realloc_r+0x292>
    53f4:	2a13      	cmp	r2, #19
    53f6:	f200 80db 	bhi.w	55b0 <_realloc_r+0x240>
    53fa:	4603      	mov	r3, r0
    53fc:	462a      	mov	r2, r5
    53fe:	6811      	ldr	r1, [r2, #0]
    5400:	6019      	str	r1, [r3, #0]
    5402:	6851      	ldr	r1, [r2, #4]
    5404:	6059      	str	r1, [r3, #4]
    5406:	6892      	ldr	r2, [r2, #8]
    5408:	609a      	str	r2, [r3, #8]
    540a:	4629      	mov	r1, r5
    540c:	4640      	mov	r0, r8
    540e:	f7ff f90f 	bl	4630 <_free_r>
    5412:	e01c      	b.n	544e <_realloc_r+0xde>
    5414:	f027 0707 	bic.w	r7, r7, #7
    5418:	2f00      	cmp	r7, #0
    541a:	463a      	mov	r2, r7
    541c:	dabf      	bge.n	539e <_realloc_r+0x2e>
    541e:	2600      	movs	r6, #0
    5420:	230c      	movs	r3, #12
    5422:	4630      	mov	r0, r6
    5424:	f8c8 3000 	str.w	r3, [r8]
    5428:	b003      	add	sp, #12
    542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    542e:	462e      	mov	r6, r5
    5430:	1be3      	subs	r3, r4, r7
    5432:	2b0f      	cmp	r3, #15
    5434:	d81e      	bhi.n	5474 <_realloc_r+0x104>
    5436:	f8d9 3004 	ldr.w	r3, [r9, #4]
    543a:	f003 0301 	and.w	r3, r3, #1
    543e:	4323      	orrs	r3, r4
    5440:	444c      	add	r4, r9
    5442:	f8c9 3004 	str.w	r3, [r9, #4]
    5446:	6863      	ldr	r3, [r4, #4]
    5448:	f043 0301 	orr.w	r3, r3, #1
    544c:	6063      	str	r3, [r4, #4]
    544e:	4640      	mov	r0, r8
    5450:	f7ff ff88 	bl	5364 <__malloc_unlock>
    5454:	4630      	mov	r0, r6
    5456:	b003      	add	sp, #12
    5458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    545c:	f023 0303 	bic.w	r3, r3, #3
    5460:	18e1      	adds	r1, r4, r3
    5462:	4291      	cmp	r1, r2
    5464:	db1f      	blt.n	54a6 <_realloc_r+0x136>
    5466:	68c3      	ldr	r3, [r0, #12]
    5468:	6882      	ldr	r2, [r0, #8]
    546a:	462e      	mov	r6, r5
    546c:	60d3      	str	r3, [r2, #12]
    546e:	460c      	mov	r4, r1
    5470:	609a      	str	r2, [r3, #8]
    5472:	e7dd      	b.n	5430 <_realloc_r+0xc0>
    5474:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5478:	eb09 0107 	add.w	r1, r9, r7
    547c:	f002 0201 	and.w	r2, r2, #1
    5480:	444c      	add	r4, r9
    5482:	f043 0301 	orr.w	r3, r3, #1
    5486:	4317      	orrs	r7, r2
    5488:	f8c9 7004 	str.w	r7, [r9, #4]
    548c:	604b      	str	r3, [r1, #4]
    548e:	6863      	ldr	r3, [r4, #4]
    5490:	f043 0301 	orr.w	r3, r3, #1
    5494:	3108      	adds	r1, #8
    5496:	6063      	str	r3, [r4, #4]
    5498:	4640      	mov	r0, r8
    549a:	f7ff f8c9 	bl	4630 <_free_r>
    549e:	e7d6      	b.n	544e <_realloc_r+0xde>
    54a0:	4611      	mov	r1, r2
    54a2:	f7ff bbdb 	b.w	4c5c <_malloc_r>
    54a6:	f01e 0f01 	tst.w	lr, #1
    54aa:	d18e      	bne.n	53ca <_realloc_r+0x5a>
    54ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
    54b0:	eba9 0a01 	sub.w	sl, r9, r1
    54b4:	f8da 1004 	ldr.w	r1, [sl, #4]
    54b8:	f021 0103 	bic.w	r1, r1, #3
    54bc:	440b      	add	r3, r1
    54be:	4423      	add	r3, r4
    54c0:	4293      	cmp	r3, r2
    54c2:	db25      	blt.n	5510 <_realloc_r+0x1a0>
    54c4:	68c2      	ldr	r2, [r0, #12]
    54c6:	6881      	ldr	r1, [r0, #8]
    54c8:	4656      	mov	r6, sl
    54ca:	60ca      	str	r2, [r1, #12]
    54cc:	6091      	str	r1, [r2, #8]
    54ce:	f8da 100c 	ldr.w	r1, [sl, #12]
    54d2:	f856 0f08 	ldr.w	r0, [r6, #8]!
    54d6:	1f22      	subs	r2, r4, #4
    54d8:	2a24      	cmp	r2, #36	; 0x24
    54da:	60c1      	str	r1, [r0, #12]
    54dc:	6088      	str	r0, [r1, #8]
    54de:	f200 8094 	bhi.w	560a <_realloc_r+0x29a>
    54e2:	2a13      	cmp	r2, #19
    54e4:	d96f      	bls.n	55c6 <_realloc_r+0x256>
    54e6:	6829      	ldr	r1, [r5, #0]
    54e8:	f8ca 1008 	str.w	r1, [sl, #8]
    54ec:	6869      	ldr	r1, [r5, #4]
    54ee:	f8ca 100c 	str.w	r1, [sl, #12]
    54f2:	2a1b      	cmp	r2, #27
    54f4:	f200 80a2 	bhi.w	563c <_realloc_r+0x2cc>
    54f8:	3508      	adds	r5, #8
    54fa:	f10a 0210 	add.w	r2, sl, #16
    54fe:	e063      	b.n	55c8 <_realloc_r+0x258>
    5500:	f855 3c08 	ldr.w	r3, [r5, #-8]
    5504:	eba9 0a03 	sub.w	sl, r9, r3
    5508:	f8da 1004 	ldr.w	r1, [sl, #4]
    550c:	f021 0103 	bic.w	r1, r1, #3
    5510:	1863      	adds	r3, r4, r1
    5512:	4293      	cmp	r3, r2
    5514:	f6ff af59 	blt.w	53ca <_realloc_r+0x5a>
    5518:	4656      	mov	r6, sl
    551a:	e7d8      	b.n	54ce <_realloc_r+0x15e>
    551c:	6841      	ldr	r1, [r0, #4]
    551e:	f021 0b03 	bic.w	fp, r1, #3
    5522:	44a3      	add	fp, r4
    5524:	f107 0010 	add.w	r0, r7, #16
    5528:	4583      	cmp	fp, r0
    552a:	da56      	bge.n	55da <_realloc_r+0x26a>
    552c:	f01e 0f01 	tst.w	lr, #1
    5530:	f47f af4b 	bne.w	53ca <_realloc_r+0x5a>
    5534:	f855 1c08 	ldr.w	r1, [r5, #-8]
    5538:	eba9 0a01 	sub.w	sl, r9, r1
    553c:	f8da 1004 	ldr.w	r1, [sl, #4]
    5540:	f021 0103 	bic.w	r1, r1, #3
    5544:	448b      	add	fp, r1
    5546:	4558      	cmp	r0, fp
    5548:	dce2      	bgt.n	5510 <_realloc_r+0x1a0>
    554a:	4656      	mov	r6, sl
    554c:	f8da 100c 	ldr.w	r1, [sl, #12]
    5550:	f856 0f08 	ldr.w	r0, [r6, #8]!
    5554:	1f22      	subs	r2, r4, #4
    5556:	2a24      	cmp	r2, #36	; 0x24
    5558:	60c1      	str	r1, [r0, #12]
    555a:	6088      	str	r0, [r1, #8]
    555c:	f200 808f 	bhi.w	567e <_realloc_r+0x30e>
    5560:	2a13      	cmp	r2, #19
    5562:	f240 808a 	bls.w	567a <_realloc_r+0x30a>
    5566:	6829      	ldr	r1, [r5, #0]
    5568:	f8ca 1008 	str.w	r1, [sl, #8]
    556c:	6869      	ldr	r1, [r5, #4]
    556e:	f8ca 100c 	str.w	r1, [sl, #12]
    5572:	2a1b      	cmp	r2, #27
    5574:	f200 808a 	bhi.w	568c <_realloc_r+0x31c>
    5578:	3508      	adds	r5, #8
    557a:	f10a 0210 	add.w	r2, sl, #16
    557e:	6829      	ldr	r1, [r5, #0]
    5580:	6011      	str	r1, [r2, #0]
    5582:	6869      	ldr	r1, [r5, #4]
    5584:	6051      	str	r1, [r2, #4]
    5586:	68a9      	ldr	r1, [r5, #8]
    5588:	6091      	str	r1, [r2, #8]
    558a:	eb0a 0107 	add.w	r1, sl, r7
    558e:	ebab 0207 	sub.w	r2, fp, r7
    5592:	f042 0201 	orr.w	r2, r2, #1
    5596:	6099      	str	r1, [r3, #8]
    5598:	604a      	str	r2, [r1, #4]
    559a:	f8da 3004 	ldr.w	r3, [sl, #4]
    559e:	f003 0301 	and.w	r3, r3, #1
    55a2:	431f      	orrs	r7, r3
    55a4:	4640      	mov	r0, r8
    55a6:	f8ca 7004 	str.w	r7, [sl, #4]
    55aa:	f7ff fedb 	bl	5364 <__malloc_unlock>
    55ae:	e751      	b.n	5454 <_realloc_r+0xe4>
    55b0:	682b      	ldr	r3, [r5, #0]
    55b2:	6003      	str	r3, [r0, #0]
    55b4:	686b      	ldr	r3, [r5, #4]
    55b6:	6043      	str	r3, [r0, #4]
    55b8:	2a1b      	cmp	r2, #27
    55ba:	d82d      	bhi.n	5618 <_realloc_r+0x2a8>
    55bc:	f100 0308 	add.w	r3, r0, #8
    55c0:	f105 0208 	add.w	r2, r5, #8
    55c4:	e71b      	b.n	53fe <_realloc_r+0x8e>
    55c6:	4632      	mov	r2, r6
    55c8:	6829      	ldr	r1, [r5, #0]
    55ca:	6011      	str	r1, [r2, #0]
    55cc:	6869      	ldr	r1, [r5, #4]
    55ce:	6051      	str	r1, [r2, #4]
    55d0:	68a9      	ldr	r1, [r5, #8]
    55d2:	6091      	str	r1, [r2, #8]
    55d4:	461c      	mov	r4, r3
    55d6:	46d1      	mov	r9, sl
    55d8:	e72a      	b.n	5430 <_realloc_r+0xc0>
    55da:	eb09 0107 	add.w	r1, r9, r7
    55de:	ebab 0b07 	sub.w	fp, fp, r7
    55e2:	f04b 0201 	orr.w	r2, fp, #1
    55e6:	6099      	str	r1, [r3, #8]
    55e8:	604a      	str	r2, [r1, #4]
    55ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
    55ee:	f003 0301 	and.w	r3, r3, #1
    55f2:	431f      	orrs	r7, r3
    55f4:	4640      	mov	r0, r8
    55f6:	f845 7c04 	str.w	r7, [r5, #-4]
    55fa:	f7ff feb3 	bl	5364 <__malloc_unlock>
    55fe:	462e      	mov	r6, r5
    5600:	e728      	b.n	5454 <_realloc_r+0xe4>
    5602:	4629      	mov	r1, r5
    5604:	f7ff fe44 	bl	5290 <memmove>
    5608:	e6ff      	b.n	540a <_realloc_r+0x9a>
    560a:	4629      	mov	r1, r5
    560c:	4630      	mov	r0, r6
    560e:	461c      	mov	r4, r3
    5610:	46d1      	mov	r9, sl
    5612:	f7ff fe3d 	bl	5290 <memmove>
    5616:	e70b      	b.n	5430 <_realloc_r+0xc0>
    5618:	68ab      	ldr	r3, [r5, #8]
    561a:	6083      	str	r3, [r0, #8]
    561c:	68eb      	ldr	r3, [r5, #12]
    561e:	60c3      	str	r3, [r0, #12]
    5620:	2a24      	cmp	r2, #36	; 0x24
    5622:	d017      	beq.n	5654 <_realloc_r+0x2e4>
    5624:	f100 0310 	add.w	r3, r0, #16
    5628:	f105 0210 	add.w	r2, r5, #16
    562c:	e6e7      	b.n	53fe <_realloc_r+0x8e>
    562e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5632:	f023 0303 	bic.w	r3, r3, #3
    5636:	441c      	add	r4, r3
    5638:	462e      	mov	r6, r5
    563a:	e6f9      	b.n	5430 <_realloc_r+0xc0>
    563c:	68a9      	ldr	r1, [r5, #8]
    563e:	f8ca 1010 	str.w	r1, [sl, #16]
    5642:	68e9      	ldr	r1, [r5, #12]
    5644:	f8ca 1014 	str.w	r1, [sl, #20]
    5648:	2a24      	cmp	r2, #36	; 0x24
    564a:	d00c      	beq.n	5666 <_realloc_r+0x2f6>
    564c:	3510      	adds	r5, #16
    564e:	f10a 0218 	add.w	r2, sl, #24
    5652:	e7b9      	b.n	55c8 <_realloc_r+0x258>
    5654:	692b      	ldr	r3, [r5, #16]
    5656:	6103      	str	r3, [r0, #16]
    5658:	696b      	ldr	r3, [r5, #20]
    565a:	6143      	str	r3, [r0, #20]
    565c:	f105 0218 	add.w	r2, r5, #24
    5660:	f100 0318 	add.w	r3, r0, #24
    5664:	e6cb      	b.n	53fe <_realloc_r+0x8e>
    5666:	692a      	ldr	r2, [r5, #16]
    5668:	f8ca 2018 	str.w	r2, [sl, #24]
    566c:	696a      	ldr	r2, [r5, #20]
    566e:	f8ca 201c 	str.w	r2, [sl, #28]
    5672:	3518      	adds	r5, #24
    5674:	f10a 0220 	add.w	r2, sl, #32
    5678:	e7a6      	b.n	55c8 <_realloc_r+0x258>
    567a:	4632      	mov	r2, r6
    567c:	e77f      	b.n	557e <_realloc_r+0x20e>
    567e:	4629      	mov	r1, r5
    5680:	4630      	mov	r0, r6
    5682:	9301      	str	r3, [sp, #4]
    5684:	f7ff fe04 	bl	5290 <memmove>
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	e77e      	b.n	558a <_realloc_r+0x21a>
    568c:	68a9      	ldr	r1, [r5, #8]
    568e:	f8ca 1010 	str.w	r1, [sl, #16]
    5692:	68e9      	ldr	r1, [r5, #12]
    5694:	f8ca 1014 	str.w	r1, [sl, #20]
    5698:	2a24      	cmp	r2, #36	; 0x24
    569a:	d003      	beq.n	56a4 <_realloc_r+0x334>
    569c:	3510      	adds	r5, #16
    569e:	f10a 0218 	add.w	r2, sl, #24
    56a2:	e76c      	b.n	557e <_realloc_r+0x20e>
    56a4:	692a      	ldr	r2, [r5, #16]
    56a6:	f8ca 2018 	str.w	r2, [sl, #24]
    56aa:	696a      	ldr	r2, [r5, #20]
    56ac:	f8ca 201c 	str.w	r2, [sl, #28]
    56b0:	3518      	adds	r5, #24
    56b2:	f10a 0220 	add.w	r2, sl, #32
    56b6:	e762      	b.n	557e <_realloc_r+0x20e>
    56b8:	200006a8 	.word	0x200006a8

000056bc <_sbrk_r>:
    56bc:	b538      	push	{r3, r4, r5, lr}
    56be:	4c07      	ldr	r4, [pc, #28]	; (56dc <_sbrk_r+0x20>)
    56c0:	2300      	movs	r3, #0
    56c2:	4605      	mov	r5, r0
    56c4:	4608      	mov	r0, r1
    56c6:	6023      	str	r3, [r4, #0]
    56c8:	f7fd fbd0 	bl	2e6c <_sbrk>
    56cc:	1c43      	adds	r3, r0, #1
    56ce:	d000      	beq.n	56d2 <_sbrk_r+0x16>
    56d0:	bd38      	pop	{r3, r4, r5, pc}
    56d2:	6823      	ldr	r3, [r4, #0]
    56d4:	2b00      	cmp	r3, #0
    56d6:	d0fb      	beq.n	56d0 <_sbrk_r+0x14>
    56d8:	602b      	str	r3, [r5, #0]
    56da:	bd38      	pop	{r3, r4, r5, pc}
    56dc:	20000e34 	.word	0x20000e34

000056e0 <__sread>:
    56e0:	b510      	push	{r4, lr}
    56e2:	460c      	mov	r4, r1
    56e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    56e8:	f000 fa70 	bl	5bcc <_read_r>
    56ec:	2800      	cmp	r0, #0
    56ee:	db03      	blt.n	56f8 <__sread+0x18>
    56f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    56f2:	4403      	add	r3, r0
    56f4:	6523      	str	r3, [r4, #80]	; 0x50
    56f6:	bd10      	pop	{r4, pc}
    56f8:	89a3      	ldrh	r3, [r4, #12]
    56fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    56fe:	81a3      	strh	r3, [r4, #12]
    5700:	bd10      	pop	{r4, pc}
    5702:	bf00      	nop

00005704 <__swrite>:
    5704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5708:	4616      	mov	r6, r2
    570a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    570e:	461f      	mov	r7, r3
    5710:	05d3      	lsls	r3, r2, #23
    5712:	460c      	mov	r4, r1
    5714:	4605      	mov	r5, r0
    5716:	d507      	bpl.n	5728 <__swrite+0x24>
    5718:	2200      	movs	r2, #0
    571a:	2302      	movs	r3, #2
    571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5720:	f000 fa3e 	bl	5ba0 <_lseek_r>
    5724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    5728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    572c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    5730:	81a2      	strh	r2, [r4, #12]
    5732:	463b      	mov	r3, r7
    5734:	4632      	mov	r2, r6
    5736:	4628      	mov	r0, r5
    5738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    573c:	f000 b91e 	b.w	597c <_write_r>

00005740 <__sseek>:
    5740:	b510      	push	{r4, lr}
    5742:	460c      	mov	r4, r1
    5744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5748:	f000 fa2a 	bl	5ba0 <_lseek_r>
    574c:	89a3      	ldrh	r3, [r4, #12]
    574e:	1c42      	adds	r2, r0, #1
    5750:	bf0e      	itee	eq
    5752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    575a:	6520      	strne	r0, [r4, #80]	; 0x50
    575c:	81a3      	strh	r3, [r4, #12]
    575e:	bd10      	pop	{r4, pc}

00005760 <__sclose>:
    5760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5764:	f000 b982 	b.w	5a6c <_close_r>
	...

00005780 <strlen>:
    5780:	f890 f000 	pld	[r0]
    5784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5788:	f020 0107 	bic.w	r1, r0, #7
    578c:	f06f 0c00 	mvn.w	ip, #0
    5790:	f010 0407 	ands.w	r4, r0, #7
    5794:	f891 f020 	pld	[r1, #32]
    5798:	f040 8049 	bne.w	582e <strlen+0xae>
    579c:	f04f 0400 	mov.w	r4, #0
    57a0:	f06f 0007 	mvn.w	r0, #7
    57a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    57a8:	f891 f040 	pld	[r1, #64]	; 0x40
    57ac:	f100 0008 	add.w	r0, r0, #8
    57b0:	fa82 f24c 	uadd8	r2, r2, ip
    57b4:	faa4 f28c 	sel	r2, r4, ip
    57b8:	fa83 f34c 	uadd8	r3, r3, ip
    57bc:	faa2 f38c 	sel	r3, r2, ip
    57c0:	bb4b      	cbnz	r3, 5816 <strlen+0x96>
    57c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    57c6:	fa82 f24c 	uadd8	r2, r2, ip
    57ca:	f100 0008 	add.w	r0, r0, #8
    57ce:	faa4 f28c 	sel	r2, r4, ip
    57d2:	fa83 f34c 	uadd8	r3, r3, ip
    57d6:	faa2 f38c 	sel	r3, r2, ip
    57da:	b9e3      	cbnz	r3, 5816 <strlen+0x96>
    57dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    57e0:	fa82 f24c 	uadd8	r2, r2, ip
    57e4:	f100 0008 	add.w	r0, r0, #8
    57e8:	faa4 f28c 	sel	r2, r4, ip
    57ec:	fa83 f34c 	uadd8	r3, r3, ip
    57f0:	faa2 f38c 	sel	r3, r2, ip
    57f4:	b97b      	cbnz	r3, 5816 <strlen+0x96>
    57f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    57fa:	f101 0120 	add.w	r1, r1, #32
    57fe:	fa82 f24c 	uadd8	r2, r2, ip
    5802:	f100 0008 	add.w	r0, r0, #8
    5806:	faa4 f28c 	sel	r2, r4, ip
    580a:	fa83 f34c 	uadd8	r3, r3, ip
    580e:	faa2 f38c 	sel	r3, r2, ip
    5812:	2b00      	cmp	r3, #0
    5814:	d0c6      	beq.n	57a4 <strlen+0x24>
    5816:	2a00      	cmp	r2, #0
    5818:	bf04      	itt	eq
    581a:	3004      	addeq	r0, #4
    581c:	461a      	moveq	r2, r3
    581e:	ba12      	rev	r2, r2
    5820:	fab2 f282 	clz	r2, r2
    5824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    582c:	4770      	bx	lr
    582e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5832:	f004 0503 	and.w	r5, r4, #3
    5836:	f1c4 0000 	rsb	r0, r4, #0
    583a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    583e:	f014 0f04 	tst.w	r4, #4
    5842:	f891 f040 	pld	[r1, #64]	; 0x40
    5846:	fa0c f505 	lsl.w	r5, ip, r5
    584a:	ea62 0205 	orn	r2, r2, r5
    584e:	bf1c      	itt	ne
    5850:	ea63 0305 	ornne	r3, r3, r5
    5854:	4662      	movne	r2, ip
    5856:	f04f 0400 	mov.w	r4, #0
    585a:	e7a9      	b.n	57b0 <strlen+0x30>

0000585c <__swbuf_r>:
    585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    585e:	460d      	mov	r5, r1
    5860:	4614      	mov	r4, r2
    5862:	4606      	mov	r6, r0
    5864:	b110      	cbz	r0, 586c <__swbuf_r+0x10>
    5866:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5868:	2b00      	cmp	r3, #0
    586a:	d04b      	beq.n	5904 <__swbuf_r+0xa8>
    586c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    5870:	69a3      	ldr	r3, [r4, #24]
    5872:	60a3      	str	r3, [r4, #8]
    5874:	b291      	uxth	r1, r2
    5876:	0708      	lsls	r0, r1, #28
    5878:	d539      	bpl.n	58ee <__swbuf_r+0x92>
    587a:	6923      	ldr	r3, [r4, #16]
    587c:	2b00      	cmp	r3, #0
    587e:	d036      	beq.n	58ee <__swbuf_r+0x92>
    5880:	b2ed      	uxtb	r5, r5
    5882:	0489      	lsls	r1, r1, #18
    5884:	462f      	mov	r7, r5
    5886:	d515      	bpl.n	58b4 <__swbuf_r+0x58>
    5888:	6822      	ldr	r2, [r4, #0]
    588a:	6961      	ldr	r1, [r4, #20]
    588c:	1ad3      	subs	r3, r2, r3
    588e:	428b      	cmp	r3, r1
    5890:	da1c      	bge.n	58cc <__swbuf_r+0x70>
    5892:	3301      	adds	r3, #1
    5894:	68a1      	ldr	r1, [r4, #8]
    5896:	1c50      	adds	r0, r2, #1
    5898:	3901      	subs	r1, #1
    589a:	60a1      	str	r1, [r4, #8]
    589c:	6020      	str	r0, [r4, #0]
    589e:	7015      	strb	r5, [r2, #0]
    58a0:	6962      	ldr	r2, [r4, #20]
    58a2:	429a      	cmp	r2, r3
    58a4:	d01a      	beq.n	58dc <__swbuf_r+0x80>
    58a6:	89a3      	ldrh	r3, [r4, #12]
    58a8:	07db      	lsls	r3, r3, #31
    58aa:	d501      	bpl.n	58b0 <__swbuf_r+0x54>
    58ac:	2d0a      	cmp	r5, #10
    58ae:	d015      	beq.n	58dc <__swbuf_r+0x80>
    58b0:	4638      	mov	r0, r7
    58b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    58b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    58ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    58be:	81a2      	strh	r2, [r4, #12]
    58c0:	6822      	ldr	r2, [r4, #0]
    58c2:	6661      	str	r1, [r4, #100]	; 0x64
    58c4:	6961      	ldr	r1, [r4, #20]
    58c6:	1ad3      	subs	r3, r2, r3
    58c8:	428b      	cmp	r3, r1
    58ca:	dbe2      	blt.n	5892 <__swbuf_r+0x36>
    58cc:	4621      	mov	r1, r4
    58ce:	4630      	mov	r0, r6
    58d0:	f7fe fd30 	bl	4334 <_fflush_r>
    58d4:	b940      	cbnz	r0, 58e8 <__swbuf_r+0x8c>
    58d6:	6822      	ldr	r2, [r4, #0]
    58d8:	2301      	movs	r3, #1
    58da:	e7db      	b.n	5894 <__swbuf_r+0x38>
    58dc:	4621      	mov	r1, r4
    58de:	4630      	mov	r0, r6
    58e0:	f7fe fd28 	bl	4334 <_fflush_r>
    58e4:	2800      	cmp	r0, #0
    58e6:	d0e3      	beq.n	58b0 <__swbuf_r+0x54>
    58e8:	f04f 37ff 	mov.w	r7, #4294967295
    58ec:	e7e0      	b.n	58b0 <__swbuf_r+0x54>
    58ee:	4621      	mov	r1, r4
    58f0:	4630      	mov	r0, r6
    58f2:	f7fe fc0b 	bl	410c <__swsetup_r>
    58f6:	2800      	cmp	r0, #0
    58f8:	d1f6      	bne.n	58e8 <__swbuf_r+0x8c>
    58fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    58fe:	6923      	ldr	r3, [r4, #16]
    5900:	b291      	uxth	r1, r2
    5902:	e7bd      	b.n	5880 <__swbuf_r+0x24>
    5904:	f7fe fd6e 	bl	43e4 <__sinit>
    5908:	e7b0      	b.n	586c <__swbuf_r+0x10>
    590a:	bf00      	nop

0000590c <_wcrtomb_r>:
    590c:	b5f0      	push	{r4, r5, r6, r7, lr}
    590e:	4606      	mov	r6, r0
    5910:	b085      	sub	sp, #20
    5912:	461f      	mov	r7, r3
    5914:	b189      	cbz	r1, 593a <_wcrtomb_r+0x2e>
    5916:	4c10      	ldr	r4, [pc, #64]	; (5958 <_wcrtomb_r+0x4c>)
    5918:	4d10      	ldr	r5, [pc, #64]	; (595c <_wcrtomb_r+0x50>)
    591a:	6824      	ldr	r4, [r4, #0]
    591c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    591e:	2c00      	cmp	r4, #0
    5920:	bf08      	it	eq
    5922:	462c      	moveq	r4, r5
    5924:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    5928:	47a0      	blx	r4
    592a:	1c43      	adds	r3, r0, #1
    592c:	d103      	bne.n	5936 <_wcrtomb_r+0x2a>
    592e:	2200      	movs	r2, #0
    5930:	238a      	movs	r3, #138	; 0x8a
    5932:	603a      	str	r2, [r7, #0]
    5934:	6033      	str	r3, [r6, #0]
    5936:	b005      	add	sp, #20
    5938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    593a:	460c      	mov	r4, r1
    593c:	4906      	ldr	r1, [pc, #24]	; (5958 <_wcrtomb_r+0x4c>)
    593e:	4a07      	ldr	r2, [pc, #28]	; (595c <_wcrtomb_r+0x50>)
    5940:	6809      	ldr	r1, [r1, #0]
    5942:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5944:	2900      	cmp	r1, #0
    5946:	bf08      	it	eq
    5948:	4611      	moveq	r1, r2
    594a:	4622      	mov	r2, r4
    594c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
    5950:	a901      	add	r1, sp, #4
    5952:	47a0      	blx	r4
    5954:	e7e9      	b.n	592a <_wcrtomb_r+0x1e>
    5956:	bf00      	nop
    5958:	20000108 	.word	0x20000108
    595c:	2000053c 	.word	0x2000053c

00005960 <__ascii_wctomb>:
    5960:	b121      	cbz	r1, 596c <__ascii_wctomb+0xc>
    5962:	2aff      	cmp	r2, #255	; 0xff
    5964:	d804      	bhi.n	5970 <__ascii_wctomb+0x10>
    5966:	700a      	strb	r2, [r1, #0]
    5968:	2001      	movs	r0, #1
    596a:	4770      	bx	lr
    596c:	4608      	mov	r0, r1
    596e:	4770      	bx	lr
    5970:	238a      	movs	r3, #138	; 0x8a
    5972:	6003      	str	r3, [r0, #0]
    5974:	f04f 30ff 	mov.w	r0, #4294967295
    5978:	4770      	bx	lr
    597a:	bf00      	nop

0000597c <_write_r>:
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	460d      	mov	r5, r1
    5980:	4c08      	ldr	r4, [pc, #32]	; (59a4 <_write_r+0x28>)
    5982:	4611      	mov	r1, r2
    5984:	4606      	mov	r6, r0
    5986:	461a      	mov	r2, r3
    5988:	4628      	mov	r0, r5
    598a:	2300      	movs	r3, #0
    598c:	6023      	str	r3, [r4, #0]
    598e:	f000 fac3 	bl	5f18 <_write>
    5992:	1c43      	adds	r3, r0, #1
    5994:	d000      	beq.n	5998 <_write_r+0x1c>
    5996:	bd70      	pop	{r4, r5, r6, pc}
    5998:	6823      	ldr	r3, [r4, #0]
    599a:	2b00      	cmp	r3, #0
    599c:	d0fb      	beq.n	5996 <_write_r+0x1a>
    599e:	6033      	str	r3, [r6, #0]
    59a0:	bd70      	pop	{r4, r5, r6, pc}
    59a2:	bf00      	nop
    59a4:	20000e34 	.word	0x20000e34

000059a8 <__register_exitproc>:
    59a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59ac:	4d2c      	ldr	r5, [pc, #176]	; (5a60 <__register_exitproc+0xb8>)
    59ae:	4606      	mov	r6, r0
    59b0:	6828      	ldr	r0, [r5, #0]
    59b2:	4698      	mov	r8, r3
    59b4:	460f      	mov	r7, r1
    59b6:	4691      	mov	r9, r2
    59b8:	f7ff f8d4 	bl	4b64 <__retarget_lock_acquire_recursive>
    59bc:	4b29      	ldr	r3, [pc, #164]	; (5a64 <__register_exitproc+0xbc>)
    59be:	681c      	ldr	r4, [r3, #0]
    59c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    59c4:	2b00      	cmp	r3, #0
    59c6:	d03e      	beq.n	5a46 <__register_exitproc+0x9e>
    59c8:	685a      	ldr	r2, [r3, #4]
    59ca:	2a1f      	cmp	r2, #31
    59cc:	dc1c      	bgt.n	5a08 <__register_exitproc+0x60>
    59ce:	f102 0e01 	add.w	lr, r2, #1
    59d2:	b176      	cbz	r6, 59f2 <__register_exitproc+0x4a>
    59d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    59d8:	2401      	movs	r4, #1
    59da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    59de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    59e2:	4094      	lsls	r4, r2
    59e4:	4320      	orrs	r0, r4
    59e6:	2e02      	cmp	r6, #2
    59e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    59ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    59f0:	d023      	beq.n	5a3a <__register_exitproc+0x92>
    59f2:	3202      	adds	r2, #2
    59f4:	f8c3 e004 	str.w	lr, [r3, #4]
    59f8:	6828      	ldr	r0, [r5, #0]
    59fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    59fe:	f7ff f8b3 	bl	4b68 <__retarget_lock_release_recursive>
    5a02:	2000      	movs	r0, #0
    5a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a08:	4b17      	ldr	r3, [pc, #92]	; (5a68 <__register_exitproc+0xc0>)
    5a0a:	b30b      	cbz	r3, 5a50 <__register_exitproc+0xa8>
    5a0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5a10:	f3af 8000 	nop.w
    5a14:	4603      	mov	r3, r0
    5a16:	b1d8      	cbz	r0, 5a50 <__register_exitproc+0xa8>
    5a18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    5a1c:	6002      	str	r2, [r0, #0]
    5a1e:	2100      	movs	r1, #0
    5a20:	6041      	str	r1, [r0, #4]
    5a22:	460a      	mov	r2, r1
    5a24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5a28:	f04f 0e01 	mov.w	lr, #1
    5a2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5a30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    5a34:	2e00      	cmp	r6, #0
    5a36:	d0dc      	beq.n	59f2 <__register_exitproc+0x4a>
    5a38:	e7cc      	b.n	59d4 <__register_exitproc+0x2c>
    5a3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    5a3e:	430c      	orrs	r4, r1
    5a40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    5a44:	e7d5      	b.n	59f2 <__register_exitproc+0x4a>
    5a46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    5a4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    5a4e:	e7bb      	b.n	59c8 <__register_exitproc+0x20>
    5a50:	6828      	ldr	r0, [r5, #0]
    5a52:	f7ff f889 	bl	4b68 <__retarget_lock_release_recursive>
    5a56:	f04f 30ff 	mov.w	r0, #4294967295
    5a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a5e:	bf00      	nop
    5a60:	20000538 	.word	0x20000538
    5a64:	00005f44 	.word	0x00005f44
    5a68:	00000000 	.word	0x00000000

00005a6c <_close_r>:
    5a6c:	b538      	push	{r3, r4, r5, lr}
    5a6e:	4c07      	ldr	r4, [pc, #28]	; (5a8c <_close_r+0x20>)
    5a70:	2300      	movs	r3, #0
    5a72:	4605      	mov	r5, r0
    5a74:	4608      	mov	r0, r1
    5a76:	6023      	str	r3, [r4, #0]
    5a78:	f7fd fa14 	bl	2ea4 <_close>
    5a7c:	1c43      	adds	r3, r0, #1
    5a7e:	d000      	beq.n	5a82 <_close_r+0x16>
    5a80:	bd38      	pop	{r3, r4, r5, pc}
    5a82:	6823      	ldr	r3, [r4, #0]
    5a84:	2b00      	cmp	r3, #0
    5a86:	d0fb      	beq.n	5a80 <_close_r+0x14>
    5a88:	602b      	str	r3, [r5, #0]
    5a8a:	bd38      	pop	{r3, r4, r5, pc}
    5a8c:	20000e34 	.word	0x20000e34

00005a90 <_fclose_r>:
    5a90:	b570      	push	{r4, r5, r6, lr}
    5a92:	b159      	cbz	r1, 5aac <_fclose_r+0x1c>
    5a94:	4605      	mov	r5, r0
    5a96:	460c      	mov	r4, r1
    5a98:	b110      	cbz	r0, 5aa0 <_fclose_r+0x10>
    5a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d03c      	beq.n	5b1a <_fclose_r+0x8a>
    5aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5aa2:	07d8      	lsls	r0, r3, #31
    5aa4:	d505      	bpl.n	5ab2 <_fclose_r+0x22>
    5aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5aaa:	b92b      	cbnz	r3, 5ab8 <_fclose_r+0x28>
    5aac:	2600      	movs	r6, #0
    5aae:	4630      	mov	r0, r6
    5ab0:	bd70      	pop	{r4, r5, r6, pc}
    5ab2:	89a3      	ldrh	r3, [r4, #12]
    5ab4:	0599      	lsls	r1, r3, #22
    5ab6:	d53c      	bpl.n	5b32 <_fclose_r+0xa2>
    5ab8:	4621      	mov	r1, r4
    5aba:	4628      	mov	r0, r5
    5abc:	f7fe fb9a 	bl	41f4 <__sflush_r>
    5ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5ac2:	4606      	mov	r6, r0
    5ac4:	b133      	cbz	r3, 5ad4 <_fclose_r+0x44>
    5ac6:	69e1      	ldr	r1, [r4, #28]
    5ac8:	4628      	mov	r0, r5
    5aca:	4798      	blx	r3
    5acc:	2800      	cmp	r0, #0
    5ace:	bfb8      	it	lt
    5ad0:	f04f 36ff 	movlt.w	r6, #4294967295
    5ad4:	89a3      	ldrh	r3, [r4, #12]
    5ad6:	061a      	lsls	r2, r3, #24
    5ad8:	d422      	bmi.n	5b20 <_fclose_r+0x90>
    5ada:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5adc:	b141      	cbz	r1, 5af0 <_fclose_r+0x60>
    5ade:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5ae2:	4299      	cmp	r1, r3
    5ae4:	d002      	beq.n	5aec <_fclose_r+0x5c>
    5ae6:	4628      	mov	r0, r5
    5ae8:	f7fe fda2 	bl	4630 <_free_r>
    5aec:	2300      	movs	r3, #0
    5aee:	6323      	str	r3, [r4, #48]	; 0x30
    5af0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5af2:	b121      	cbz	r1, 5afe <_fclose_r+0x6e>
    5af4:	4628      	mov	r0, r5
    5af6:	f7fe fd9b 	bl	4630 <_free_r>
    5afa:	2300      	movs	r3, #0
    5afc:	6463      	str	r3, [r4, #68]	; 0x44
    5afe:	f7fe fc9d 	bl	443c <__sfp_lock_acquire>
    5b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5b04:	2200      	movs	r2, #0
    5b06:	07db      	lsls	r3, r3, #31
    5b08:	81a2      	strh	r2, [r4, #12]
    5b0a:	d50e      	bpl.n	5b2a <_fclose_r+0x9a>
    5b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b0e:	f7ff f827 	bl	4b60 <__retarget_lock_close_recursive>
    5b12:	f7fe fc99 	bl	4448 <__sfp_lock_release>
    5b16:	4630      	mov	r0, r6
    5b18:	bd70      	pop	{r4, r5, r6, pc}
    5b1a:	f7fe fc63 	bl	43e4 <__sinit>
    5b1e:	e7bf      	b.n	5aa0 <_fclose_r+0x10>
    5b20:	6921      	ldr	r1, [r4, #16]
    5b22:	4628      	mov	r0, r5
    5b24:	f7fe fd84 	bl	4630 <_free_r>
    5b28:	e7d7      	b.n	5ada <_fclose_r+0x4a>
    5b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b2c:	f7ff f81c 	bl	4b68 <__retarget_lock_release_recursive>
    5b30:	e7ec      	b.n	5b0c <_fclose_r+0x7c>
    5b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b34:	f7ff f816 	bl	4b64 <__retarget_lock_acquire_recursive>
    5b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d1bb      	bne.n	5ab8 <_fclose_r+0x28>
    5b40:	6e66      	ldr	r6, [r4, #100]	; 0x64
    5b42:	f016 0601 	ands.w	r6, r6, #1
    5b46:	d1b1      	bne.n	5aac <_fclose_r+0x1c>
    5b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b4a:	f7ff f80d 	bl	4b68 <__retarget_lock_release_recursive>
    5b4e:	4630      	mov	r0, r6
    5b50:	bd70      	pop	{r4, r5, r6, pc}
    5b52:	bf00      	nop

00005b54 <_fstat_r>:
    5b54:	b538      	push	{r3, r4, r5, lr}
    5b56:	460b      	mov	r3, r1
    5b58:	4c07      	ldr	r4, [pc, #28]	; (5b78 <_fstat_r+0x24>)
    5b5a:	4605      	mov	r5, r0
    5b5c:	4611      	mov	r1, r2
    5b5e:	4618      	mov	r0, r3
    5b60:	2300      	movs	r3, #0
    5b62:	6023      	str	r3, [r4, #0]
    5b64:	f7fd f9a1 	bl	2eaa <_fstat>
    5b68:	1c43      	adds	r3, r0, #1
    5b6a:	d000      	beq.n	5b6e <_fstat_r+0x1a>
    5b6c:	bd38      	pop	{r3, r4, r5, pc}
    5b6e:	6823      	ldr	r3, [r4, #0]
    5b70:	2b00      	cmp	r3, #0
    5b72:	d0fb      	beq.n	5b6c <_fstat_r+0x18>
    5b74:	602b      	str	r3, [r5, #0]
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	20000e34 	.word	0x20000e34

00005b7c <_isatty_r>:
    5b7c:	b538      	push	{r3, r4, r5, lr}
    5b7e:	4c07      	ldr	r4, [pc, #28]	; (5b9c <_isatty_r+0x20>)
    5b80:	2300      	movs	r3, #0
    5b82:	4605      	mov	r5, r0
    5b84:	4608      	mov	r0, r1
    5b86:	6023      	str	r3, [r4, #0]
    5b88:	f7fd f994 	bl	2eb4 <_isatty>
    5b8c:	1c43      	adds	r3, r0, #1
    5b8e:	d000      	beq.n	5b92 <_isatty_r+0x16>
    5b90:	bd38      	pop	{r3, r4, r5, pc}
    5b92:	6823      	ldr	r3, [r4, #0]
    5b94:	2b00      	cmp	r3, #0
    5b96:	d0fb      	beq.n	5b90 <_isatty_r+0x14>
    5b98:	602b      	str	r3, [r5, #0]
    5b9a:	bd38      	pop	{r3, r4, r5, pc}
    5b9c:	20000e34 	.word	0x20000e34

00005ba0 <_lseek_r>:
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	460d      	mov	r5, r1
    5ba4:	4c08      	ldr	r4, [pc, #32]	; (5bc8 <_lseek_r+0x28>)
    5ba6:	4611      	mov	r1, r2
    5ba8:	4606      	mov	r6, r0
    5baa:	461a      	mov	r2, r3
    5bac:	4628      	mov	r0, r5
    5bae:	2300      	movs	r3, #0
    5bb0:	6023      	str	r3, [r4, #0]
    5bb2:	f7fd f981 	bl	2eb8 <_lseek>
    5bb6:	1c43      	adds	r3, r0, #1
    5bb8:	d000      	beq.n	5bbc <_lseek_r+0x1c>
    5bba:	bd70      	pop	{r4, r5, r6, pc}
    5bbc:	6823      	ldr	r3, [r4, #0]
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d0fb      	beq.n	5bba <_lseek_r+0x1a>
    5bc2:	6033      	str	r3, [r6, #0]
    5bc4:	bd70      	pop	{r4, r5, r6, pc}
    5bc6:	bf00      	nop
    5bc8:	20000e34 	.word	0x20000e34

00005bcc <_read_r>:
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	460d      	mov	r5, r1
    5bd0:	4c08      	ldr	r4, [pc, #32]	; (5bf4 <_read_r+0x28>)
    5bd2:	4611      	mov	r1, r2
    5bd4:	4606      	mov	r6, r0
    5bd6:	461a      	mov	r2, r3
    5bd8:	4628      	mov	r0, r5
    5bda:	2300      	movs	r3, #0
    5bdc:	6023      	str	r3, [r4, #0]
    5bde:	f000 f993 	bl	5f08 <_read>
    5be2:	1c43      	adds	r3, r0, #1
    5be4:	d000      	beq.n	5be8 <_read_r+0x1c>
    5be6:	bd70      	pop	{r4, r5, r6, pc}
    5be8:	6823      	ldr	r3, [r4, #0]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d0fb      	beq.n	5be6 <_read_r+0x1a>
    5bee:	6033      	str	r3, [r6, #0]
    5bf0:	bd70      	pop	{r4, r5, r6, pc}
    5bf2:	bf00      	nop
    5bf4:	20000e34 	.word	0x20000e34

00005bf8 <__aeabi_uldivmod>:
    5bf8:	b953      	cbnz	r3, 5c10 <__aeabi_uldivmod+0x18>
    5bfa:	b94a      	cbnz	r2, 5c10 <__aeabi_uldivmod+0x18>
    5bfc:	2900      	cmp	r1, #0
    5bfe:	bf08      	it	eq
    5c00:	2800      	cmpeq	r0, #0
    5c02:	bf1c      	itt	ne
    5c04:	f04f 31ff 	movne.w	r1, #4294967295
    5c08:	f04f 30ff 	movne.w	r0, #4294967295
    5c0c:	f000 b97a 	b.w	5f04 <__aeabi_idiv0>
    5c10:	f1ad 0c08 	sub.w	ip, sp, #8
    5c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5c18:	f000 f806 	bl	5c28 <__udivmoddi4>
    5c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
    5c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5c24:	b004      	add	sp, #16
    5c26:	4770      	bx	lr

00005c28 <__udivmoddi4>:
    5c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c2c:	468c      	mov	ip, r1
    5c2e:	460d      	mov	r5, r1
    5c30:	4604      	mov	r4, r0
    5c32:	9e08      	ldr	r6, [sp, #32]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d151      	bne.n	5cdc <__udivmoddi4+0xb4>
    5c38:	428a      	cmp	r2, r1
    5c3a:	4617      	mov	r7, r2
    5c3c:	d96d      	bls.n	5d1a <__udivmoddi4+0xf2>
    5c3e:	fab2 fe82 	clz	lr, r2
    5c42:	f1be 0f00 	cmp.w	lr, #0
    5c46:	d00b      	beq.n	5c60 <__udivmoddi4+0x38>
    5c48:	f1ce 0c20 	rsb	ip, lr, #32
    5c4c:	fa01 f50e 	lsl.w	r5, r1, lr
    5c50:	fa20 fc0c 	lsr.w	ip, r0, ip
    5c54:	fa02 f70e 	lsl.w	r7, r2, lr
    5c58:	ea4c 0c05 	orr.w	ip, ip, r5
    5c5c:	fa00 f40e 	lsl.w	r4, r0, lr
    5c60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    5c64:	0c25      	lsrs	r5, r4, #16
    5c66:	fbbc f8fa 	udiv	r8, ip, sl
    5c6a:	fa1f f987 	uxth.w	r9, r7
    5c6e:	fb0a cc18 	mls	ip, sl, r8, ip
    5c72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    5c76:	fb08 f309 	mul.w	r3, r8, r9
    5c7a:	42ab      	cmp	r3, r5
    5c7c:	d90a      	bls.n	5c94 <__udivmoddi4+0x6c>
    5c7e:	19ed      	adds	r5, r5, r7
    5c80:	f108 32ff 	add.w	r2, r8, #4294967295
    5c84:	f080 8123 	bcs.w	5ece <__udivmoddi4+0x2a6>
    5c88:	42ab      	cmp	r3, r5
    5c8a:	f240 8120 	bls.w	5ece <__udivmoddi4+0x2a6>
    5c8e:	f1a8 0802 	sub.w	r8, r8, #2
    5c92:	443d      	add	r5, r7
    5c94:	1aed      	subs	r5, r5, r3
    5c96:	b2a4      	uxth	r4, r4
    5c98:	fbb5 f0fa 	udiv	r0, r5, sl
    5c9c:	fb0a 5510 	mls	r5, sl, r0, r5
    5ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    5ca4:	fb00 f909 	mul.w	r9, r0, r9
    5ca8:	45a1      	cmp	r9, r4
    5caa:	d909      	bls.n	5cc0 <__udivmoddi4+0x98>
    5cac:	19e4      	adds	r4, r4, r7
    5cae:	f100 33ff 	add.w	r3, r0, #4294967295
    5cb2:	f080 810a 	bcs.w	5eca <__udivmoddi4+0x2a2>
    5cb6:	45a1      	cmp	r9, r4
    5cb8:	f240 8107 	bls.w	5eca <__udivmoddi4+0x2a2>
    5cbc:	3802      	subs	r0, #2
    5cbe:	443c      	add	r4, r7
    5cc0:	eba4 0409 	sub.w	r4, r4, r9
    5cc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    5cc8:	2100      	movs	r1, #0
    5cca:	2e00      	cmp	r6, #0
    5ccc:	d061      	beq.n	5d92 <__udivmoddi4+0x16a>
    5cce:	fa24 f40e 	lsr.w	r4, r4, lr
    5cd2:	2300      	movs	r3, #0
    5cd4:	6034      	str	r4, [r6, #0]
    5cd6:	6073      	str	r3, [r6, #4]
    5cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cdc:	428b      	cmp	r3, r1
    5cde:	d907      	bls.n	5cf0 <__udivmoddi4+0xc8>
    5ce0:	2e00      	cmp	r6, #0
    5ce2:	d054      	beq.n	5d8e <__udivmoddi4+0x166>
    5ce4:	2100      	movs	r1, #0
    5ce6:	e886 0021 	stmia.w	r6, {r0, r5}
    5cea:	4608      	mov	r0, r1
    5cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cf0:	fab3 f183 	clz	r1, r3
    5cf4:	2900      	cmp	r1, #0
    5cf6:	f040 808e 	bne.w	5e16 <__udivmoddi4+0x1ee>
    5cfa:	42ab      	cmp	r3, r5
    5cfc:	d302      	bcc.n	5d04 <__udivmoddi4+0xdc>
    5cfe:	4282      	cmp	r2, r0
    5d00:	f200 80fa 	bhi.w	5ef8 <__udivmoddi4+0x2d0>
    5d04:	1a84      	subs	r4, r0, r2
    5d06:	eb65 0503 	sbc.w	r5, r5, r3
    5d0a:	2001      	movs	r0, #1
    5d0c:	46ac      	mov	ip, r5
    5d0e:	2e00      	cmp	r6, #0
    5d10:	d03f      	beq.n	5d92 <__udivmoddi4+0x16a>
    5d12:	e886 1010 	stmia.w	r6, {r4, ip}
    5d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d1a:	b912      	cbnz	r2, 5d22 <__udivmoddi4+0xfa>
    5d1c:	2701      	movs	r7, #1
    5d1e:	fbb7 f7f2 	udiv	r7, r7, r2
    5d22:	fab7 fe87 	clz	lr, r7
    5d26:	f1be 0f00 	cmp.w	lr, #0
    5d2a:	d134      	bne.n	5d96 <__udivmoddi4+0x16e>
    5d2c:	1beb      	subs	r3, r5, r7
    5d2e:	0c3a      	lsrs	r2, r7, #16
    5d30:	fa1f fc87 	uxth.w	ip, r7
    5d34:	2101      	movs	r1, #1
    5d36:	fbb3 f8f2 	udiv	r8, r3, r2
    5d3a:	0c25      	lsrs	r5, r4, #16
    5d3c:	fb02 3318 	mls	r3, r2, r8, r3
    5d40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5d44:	fb0c f308 	mul.w	r3, ip, r8
    5d48:	42ab      	cmp	r3, r5
    5d4a:	d907      	bls.n	5d5c <__udivmoddi4+0x134>
    5d4c:	19ed      	adds	r5, r5, r7
    5d4e:	f108 30ff 	add.w	r0, r8, #4294967295
    5d52:	d202      	bcs.n	5d5a <__udivmoddi4+0x132>
    5d54:	42ab      	cmp	r3, r5
    5d56:	f200 80d1 	bhi.w	5efc <__udivmoddi4+0x2d4>
    5d5a:	4680      	mov	r8, r0
    5d5c:	1aed      	subs	r5, r5, r3
    5d5e:	b2a3      	uxth	r3, r4
    5d60:	fbb5 f0f2 	udiv	r0, r5, r2
    5d64:	fb02 5510 	mls	r5, r2, r0, r5
    5d68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    5d6c:	fb0c fc00 	mul.w	ip, ip, r0
    5d70:	45a4      	cmp	ip, r4
    5d72:	d907      	bls.n	5d84 <__udivmoddi4+0x15c>
    5d74:	19e4      	adds	r4, r4, r7
    5d76:	f100 33ff 	add.w	r3, r0, #4294967295
    5d7a:	d202      	bcs.n	5d82 <__udivmoddi4+0x15a>
    5d7c:	45a4      	cmp	ip, r4
    5d7e:	f200 80b8 	bhi.w	5ef2 <__udivmoddi4+0x2ca>
    5d82:	4618      	mov	r0, r3
    5d84:	eba4 040c 	sub.w	r4, r4, ip
    5d88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    5d8c:	e79d      	b.n	5cca <__udivmoddi4+0xa2>
    5d8e:	4631      	mov	r1, r6
    5d90:	4630      	mov	r0, r6
    5d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d96:	f1ce 0420 	rsb	r4, lr, #32
    5d9a:	fa05 f30e 	lsl.w	r3, r5, lr
    5d9e:	fa07 f70e 	lsl.w	r7, r7, lr
    5da2:	fa20 f804 	lsr.w	r8, r0, r4
    5da6:	0c3a      	lsrs	r2, r7, #16
    5da8:	fa25 f404 	lsr.w	r4, r5, r4
    5dac:	ea48 0803 	orr.w	r8, r8, r3
    5db0:	fbb4 f1f2 	udiv	r1, r4, r2
    5db4:	ea4f 4518 	mov.w	r5, r8, lsr #16
    5db8:	fb02 4411 	mls	r4, r2, r1, r4
    5dbc:	fa1f fc87 	uxth.w	ip, r7
    5dc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    5dc4:	fb01 f30c 	mul.w	r3, r1, ip
    5dc8:	42ab      	cmp	r3, r5
    5dca:	fa00 f40e 	lsl.w	r4, r0, lr
    5dce:	d909      	bls.n	5de4 <__udivmoddi4+0x1bc>
    5dd0:	19ed      	adds	r5, r5, r7
    5dd2:	f101 30ff 	add.w	r0, r1, #4294967295
    5dd6:	f080 808a 	bcs.w	5eee <__udivmoddi4+0x2c6>
    5dda:	42ab      	cmp	r3, r5
    5ddc:	f240 8087 	bls.w	5eee <__udivmoddi4+0x2c6>
    5de0:	3902      	subs	r1, #2
    5de2:	443d      	add	r5, r7
    5de4:	1aeb      	subs	r3, r5, r3
    5de6:	fa1f f588 	uxth.w	r5, r8
    5dea:	fbb3 f0f2 	udiv	r0, r3, r2
    5dee:	fb02 3310 	mls	r3, r2, r0, r3
    5df2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5df6:	fb00 f30c 	mul.w	r3, r0, ip
    5dfa:	42ab      	cmp	r3, r5
    5dfc:	d907      	bls.n	5e0e <__udivmoddi4+0x1e6>
    5dfe:	19ed      	adds	r5, r5, r7
    5e00:	f100 38ff 	add.w	r8, r0, #4294967295
    5e04:	d26f      	bcs.n	5ee6 <__udivmoddi4+0x2be>
    5e06:	42ab      	cmp	r3, r5
    5e08:	d96d      	bls.n	5ee6 <__udivmoddi4+0x2be>
    5e0a:	3802      	subs	r0, #2
    5e0c:	443d      	add	r5, r7
    5e0e:	1aeb      	subs	r3, r5, r3
    5e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    5e14:	e78f      	b.n	5d36 <__udivmoddi4+0x10e>
    5e16:	f1c1 0720 	rsb	r7, r1, #32
    5e1a:	fa22 f807 	lsr.w	r8, r2, r7
    5e1e:	408b      	lsls	r3, r1
    5e20:	fa05 f401 	lsl.w	r4, r5, r1
    5e24:	ea48 0303 	orr.w	r3, r8, r3
    5e28:	fa20 fe07 	lsr.w	lr, r0, r7
    5e2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5e30:	40fd      	lsrs	r5, r7
    5e32:	ea4e 0e04 	orr.w	lr, lr, r4
    5e36:	fbb5 f9fc 	udiv	r9, r5, ip
    5e3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    5e3e:	fb0c 5519 	mls	r5, ip, r9, r5
    5e42:	fa1f f883 	uxth.w	r8, r3
    5e46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    5e4a:	fb09 f408 	mul.w	r4, r9, r8
    5e4e:	42ac      	cmp	r4, r5
    5e50:	fa02 f201 	lsl.w	r2, r2, r1
    5e54:	fa00 fa01 	lsl.w	sl, r0, r1
    5e58:	d908      	bls.n	5e6c <__udivmoddi4+0x244>
    5e5a:	18ed      	adds	r5, r5, r3
    5e5c:	f109 30ff 	add.w	r0, r9, #4294967295
    5e60:	d243      	bcs.n	5eea <__udivmoddi4+0x2c2>
    5e62:	42ac      	cmp	r4, r5
    5e64:	d941      	bls.n	5eea <__udivmoddi4+0x2c2>
    5e66:	f1a9 0902 	sub.w	r9, r9, #2
    5e6a:	441d      	add	r5, r3
    5e6c:	1b2d      	subs	r5, r5, r4
    5e6e:	fa1f fe8e 	uxth.w	lr, lr
    5e72:	fbb5 f0fc 	udiv	r0, r5, ip
    5e76:	fb0c 5510 	mls	r5, ip, r0, r5
    5e7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    5e7e:	fb00 f808 	mul.w	r8, r0, r8
    5e82:	45a0      	cmp	r8, r4
    5e84:	d907      	bls.n	5e96 <__udivmoddi4+0x26e>
    5e86:	18e4      	adds	r4, r4, r3
    5e88:	f100 35ff 	add.w	r5, r0, #4294967295
    5e8c:	d229      	bcs.n	5ee2 <__udivmoddi4+0x2ba>
    5e8e:	45a0      	cmp	r8, r4
    5e90:	d927      	bls.n	5ee2 <__udivmoddi4+0x2ba>
    5e92:	3802      	subs	r0, #2
    5e94:	441c      	add	r4, r3
    5e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    5e9a:	eba4 0408 	sub.w	r4, r4, r8
    5e9e:	fba0 8902 	umull	r8, r9, r0, r2
    5ea2:	454c      	cmp	r4, r9
    5ea4:	46c6      	mov	lr, r8
    5ea6:	464d      	mov	r5, r9
    5ea8:	d315      	bcc.n	5ed6 <__udivmoddi4+0x2ae>
    5eaa:	d012      	beq.n	5ed2 <__udivmoddi4+0x2aa>
    5eac:	b156      	cbz	r6, 5ec4 <__udivmoddi4+0x29c>
    5eae:	ebba 030e 	subs.w	r3, sl, lr
    5eb2:	eb64 0405 	sbc.w	r4, r4, r5
    5eb6:	fa04 f707 	lsl.w	r7, r4, r7
    5eba:	40cb      	lsrs	r3, r1
    5ebc:	431f      	orrs	r7, r3
    5ebe:	40cc      	lsrs	r4, r1
    5ec0:	6037      	str	r7, [r6, #0]
    5ec2:	6074      	str	r4, [r6, #4]
    5ec4:	2100      	movs	r1, #0
    5ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5eca:	4618      	mov	r0, r3
    5ecc:	e6f8      	b.n	5cc0 <__udivmoddi4+0x98>
    5ece:	4690      	mov	r8, r2
    5ed0:	e6e0      	b.n	5c94 <__udivmoddi4+0x6c>
    5ed2:	45c2      	cmp	sl, r8
    5ed4:	d2ea      	bcs.n	5eac <__udivmoddi4+0x284>
    5ed6:	ebb8 0e02 	subs.w	lr, r8, r2
    5eda:	eb69 0503 	sbc.w	r5, r9, r3
    5ede:	3801      	subs	r0, #1
    5ee0:	e7e4      	b.n	5eac <__udivmoddi4+0x284>
    5ee2:	4628      	mov	r0, r5
    5ee4:	e7d7      	b.n	5e96 <__udivmoddi4+0x26e>
    5ee6:	4640      	mov	r0, r8
    5ee8:	e791      	b.n	5e0e <__udivmoddi4+0x1e6>
    5eea:	4681      	mov	r9, r0
    5eec:	e7be      	b.n	5e6c <__udivmoddi4+0x244>
    5eee:	4601      	mov	r1, r0
    5ef0:	e778      	b.n	5de4 <__udivmoddi4+0x1bc>
    5ef2:	3802      	subs	r0, #2
    5ef4:	443c      	add	r4, r7
    5ef6:	e745      	b.n	5d84 <__udivmoddi4+0x15c>
    5ef8:	4608      	mov	r0, r1
    5efa:	e708      	b.n	5d0e <__udivmoddi4+0xe6>
    5efc:	f1a8 0802 	sub.w	r8, r8, #2
    5f00:	443d      	add	r5, r7
    5f02:	e72b      	b.n	5d5c <__udivmoddi4+0x134>

00005f04 <__aeabi_idiv0>:
    5f04:	4770      	bx	lr
    5f06:	bf00      	nop

00005f08 <_read>:
    5f08:	4b02      	ldr	r3, [pc, #8]	; (5f14 <_read+0xc>)
    5f0a:	2258      	movs	r2, #88	; 0x58
    5f0c:	601a      	str	r2, [r3, #0]
    5f0e:	f04f 30ff 	mov.w	r0, #4294967295
    5f12:	4770      	bx	lr
    5f14:	20000e34 	.word	0x20000e34

00005f18 <_write>:
    5f18:	4b02      	ldr	r3, [pc, #8]	; (5f24 <_write+0xc>)
    5f1a:	2258      	movs	r2, #88	; 0x58
    5f1c:	601a      	str	r2, [r3, #0]
    5f1e:	f04f 30ff 	mov.w	r0, #4294967295
    5f22:	4770      	bx	lr
    5f24:	20000e34 	.word	0x20000e34
    5f28:	20746553 	.word	0x20746553
    5f2c:	206e6970 	.word	0x206e6970
    5f30:	6c6c6163 	.word	0x6c6c6163
    5f34:	6b636162 	.word	0x6b636162
    5f38:	69616620 	.word	0x69616620
    5f3c:	6572756c 	.word	0x6572756c
    5f40:	000a0d21 	.word	0x000a0d21

00005f44 <_global_impure_ptr>:
    5f44:	20000110 33323130 37363534 42413938     ... 0123456789AB
    5f54:	46454443 00000000 33323130 37363534     CDEF....01234567
    5f64:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
    5f74:	0000296c                                l)..

00005f78 <blanks.7217>:
    5f78:	20202020 20202020 20202020 20202020                     

00005f88 <zeroes.7218>:
    5f88:	30303030 30303030 30303030 30303030     0000000000000000
    5f98:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00005fa8 <_ctype_>:
    5fa8:	20202000 20202020 28282020 20282828     .         ((((( 
    5fb8:	20202020 20202020 20202020 20202020                     
    5fc8:	10108820 10101010 10101010 10101010      ...............
    5fd8:	04040410 04040404 10040404 10101010     ................
    5fe8:	41411010 41414141 01010101 01010101     ..AAAAAA........
    5ff8:	01010101 01010101 01010101 10101010     ................
    6008:	42421010 42424242 02020202 02020202     ..BBBBBB........
    6018:	02020202 02020202 02020202 10101010     ................
    6028:	00000020 00000000 00000000 00000000      ...............
	...

000060ac <_init>:
    60ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ae:	bf00      	nop
    60b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60b2:	bc08      	pop	{r3}
    60b4:	469e      	mov	lr, r3
    60b6:	4770      	bx	lr

000060b8 <__init_array_start>:
    60b8:	000041d5 	.word	0x000041d5

000060bc <__frame_dummy_init_array_entry>:
    60bc:	000001a5                                ....

000060c0 <_fini>:
    60c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60c2:	bf00      	nop
    60c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60c6:	bc08      	pop	{r3}
    60c8:	469e      	mov	lr, r3
    60ca:	4770      	bx	lr

000060cc <__fini_array_start>:
    60cc:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
	BPM_UNLOCK(PMCON);
20000000:	4a07      	ldr	r2, [pc, #28]	; (20000020 <bpm_ps_no_halt_exec+0x20>)
20000002:	4b08      	ldr	r3, [pc, #32]	; (20000024 <bpm_ps_no_halt_exec+0x24>)
20000004:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000006:	61c1      	str	r1, [r0, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000008:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000a:	4a07      	ldr	r2, [pc, #28]	; (20000028 <bpm_ps_no_halt_exec+0x28>)
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000000c:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000e:	6813      	ldr	r3, [r2, #0]
20000010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000014:	f010 0001 	ands.w	r0, r0, #1
20000018:	d101      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
2000001a:	2b00      	cmp	r3, #0
2000001c:	d0f6      	beq.n	2000000c <bpm_ps_no_halt_exec+0xc>
}
2000001e:	4770      	bx	lr
20000020:	aa00001c 	.word	0xaa00001c
20000024:	400f0000 	.word	0x400f0000
20000028:	e000e010 	.word	0xe000e010

2000002c <udi_api_hid_generic>:
2000002c:	00000269 000001ed 000002b5 000001ef     i...............
2000003c:	00000000                                ....

20000040 <udi_hid_generic_report_desc>:
20000040:	08090105 0b8501a1 21090d05 090500a1     ...........!....
20000050:	01950109 00151075 02810125 37090105     ....u...%......7
20000060:	10750195 26f1f016 06810e10 37090105     ..u....&.......7
20000070:	08750195 7f258115 c0c00681              ..u...%.....

2000007c <udc_string_desc>:
2000007c:	00000300 00000000 00000000 00000000     ................
2000008c:	00000000                                ....

20000090 <udc_string_desc_languageid>:
20000090:	04090304                                ....

20000094 <udc_string_manufacturer_name>:
20000094:	52504150 00005453                       PAPRST..

2000009c <udc_string_product_name>:
2000009c:	204f4656 6c616944 00000000              VFO Dial....

200000a8 <udc_config>:
200000a8:	200000e8 200000b4 00000000              ... ... ....

200000b4 <udc_config_fshs>:
200000b4:	200000bc 200000fc                       ... ... 

200000bc <udc_desc>:
200000bc:	00290209 80000101 00040932 00030200     ..).....2.......
200000cc:	21090000 01000111 07003c22 40038105     ...!...."<.....@
200000dc:	05070400 00400302 00000004              ......@.....

200000e8 <udc_device_desc>:
200000e8:	02000112 08000000 240203eb 02010100     ...........$....
200000f8:	00000100                                ....

200000fc <udi_apis>:
200000fc:	2000002c                                ,.. 

20000100 <flashcalw_wait_until_ready>:
20000100:	000023b9                                .#..

20000104 <g_interrupt_enabled>:
20000104:	00000001                                ....

20000108 <_impure_ptr>:
20000108:	20000110 00000000                       ... ....

20000110 <impure_data>:
20000110:	00000000 200003fc 20000464 200004cc     ....... d.. ... 
	...
200001b8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001c8:	0005deec 0000000b 00000000 00000000     ................
	...

20000538 <__atexit_recursive_mutex>:
20000538:	20000e10                                ... 

2000053c <__global_locale>:
2000053c:	00000043 00000000 00000000 00000000     C...............
	...
2000055c:	00000043 00000000 00000000 00000000     C...............
	...
2000057c:	00000043 00000000 00000000 00000000     C...............
	...
2000059c:	00000043 00000000 00000000 00000000     C...............
	...
200005bc:	00000043 00000000 00000000 00000000     C...............
	...
200005dc:	00000043 00000000 00000000 00000000     C...............
	...
200005fc:	00000043 00000000 00000000 00000000     C...............
	...
2000061c:	00005961 000051bd 00000000 00005fa8     aY...Q......._..
2000062c:	00005fa4 00005f58 00005f58 00005f58     ._..X_..X_..X_..
2000063c:	00005f58 00005f58 00005f58 00005f58     X_..X_..X_..X_..
2000064c:	00005f58 00005f58 ffffffff ffffffff     X_..X_..........
2000065c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000684:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200006a8 <__malloc_av_>:
	...
200006b0:	200006a8 200006a8 200006b0 200006b0     ... ... ... ... 
200006c0:	200006b8 200006b8 200006c0 200006c0     ... ... ... ... 
200006d0:	200006c8 200006c8 200006d0 200006d0     ... ... ... ... 
200006e0:	200006d8 200006d8 200006e0 200006e0     ... ... ... ... 
200006f0:	200006e8 200006e8 200006f0 200006f0     ... ... ... ... 
20000700:	200006f8 200006f8 20000700 20000700     ... ... ... ... 
20000710:	20000708 20000708 20000710 20000710     ... ... ... ... 
20000720:	20000718 20000718 20000720 20000720     ... ...  ..  .. 
20000730:	20000728 20000728 20000730 20000730     (.. (.. 0.. 0.. 
20000740:	20000738 20000738 20000740 20000740     8.. 8.. @.. @.. 
20000750:	20000748 20000748 20000750 20000750     H.. H.. P.. P.. 
20000760:	20000758 20000758 20000760 20000760     X.. X.. `.. `.. 
20000770:	20000768 20000768 20000770 20000770     h.. h.. p.. p.. 
20000780:	20000778 20000778 20000780 20000780     x.. x.. ... ... 
20000790:	20000788 20000788 20000790 20000790     ... ... ... ... 
200007a0:	20000798 20000798 200007a0 200007a0     ... ... ... ... 
200007b0:	200007a8 200007a8 200007b0 200007b0     ... ... ... ... 
200007c0:	200007b8 200007b8 200007c0 200007c0     ... ... ... ... 
200007d0:	200007c8 200007c8 200007d0 200007d0     ... ... ... ... 
200007e0:	200007d8 200007d8 200007e0 200007e0     ... ... ... ... 
200007f0:	200007e8 200007e8 200007f0 200007f0     ... ... ... ... 
20000800:	200007f8 200007f8 20000800 20000800     ... ... ... ... 
20000810:	20000808 20000808 20000810 20000810     ... ... ... ... 
20000820:	20000818 20000818 20000820 20000820     ... ...  ..  .. 
20000830:	20000828 20000828 20000830 20000830     (.. (.. 0.. 0.. 
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 
20000940:	20000938 20000938 20000940 20000940     8.. 8.. @.. @.. 
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 

20000ab0 <__malloc_sbrk_base>:
20000ab0:	ffffffff                                ....

20000ab4 <__malloc_trim_threshold>:
20000ab4:	00020000                                ....
