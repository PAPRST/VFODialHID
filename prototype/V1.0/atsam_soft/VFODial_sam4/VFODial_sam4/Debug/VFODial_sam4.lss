
VFODial_sam4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006410  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006410  00006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ab8  20000000  00006418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000390  20000ac0  00006ee0  00020ac0  2**5
                  ALLOC
  4 .stack        00001000  20000e50  00007270  00020ac0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020ab8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ae2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021f5d  00000000  00000000  00020b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000453f  00000000  00000000  00042a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b38  00000000  00000000  00046fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00030d1b  00000000  00000000  00047b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013eb0  00000000  00000000  0007882a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e1ef6  00000000  00000000  0008c6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008779  00000000  00000000  0016e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ba0  00000000  00000000  00176d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029cc  00000000  00000000  001778ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0017a2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000072  00000000  00000000  0017a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	50 1e 00 20 3d 30 00 00 51 25 00 00 39 30 00 00     P.. =0..Q%..90..
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      10:	39 30 00 00 39 30 00 00 39 30 00 00 00 00 00 00     90..90..90......
	...
			cpu_irq_prev_interrupt_state = true;
      2c:	39 30 00 00 39 30 00 00 00 00 00 00 39 30 00 00     90..90......90..
      3c:	39 30 00 00 39 30 00 00 75 29 00 00 85 29 00 00     90..90..u)...)..
      4c:	95 29 00 00 a5 29 00 00 b5 29 00 00 c5 29 00 00     .)...)...)...)..
      5c:	d5 29 00 00 e5 29 00 00 f5 29 00 00 05 2a 00 00     .)...)...)...*..
      6c:	15 2a 00 00 25 2a 00 00 35 2a 00 00 45 2a 00 00     .*..%*..5*..E*..
      7c:	55 2a 00 00 65 2a 00 00 39 30 00 00 d9 17 00 00     U*..e*..90......
      8c:	39 30 00 00 39 30 00 00 39 30 00 00 39 30 00 00     90..90..90..90..
      9c:	39 30 00 00 39 30 00 00 25 28 00 00 35 28 00 00     90..90..%(..5(..
      ac:	49 28 00 00 5d 28 00 00 71 28 00 00 81 28 00 00     I(..](..q(...(..
      bc:	95 28 00 00 a9 28 00 00 bd 28 00 00 cd 28 00 00     .(...(...(...(..
      cc:	e1 28 00 00 f5 28 00 00 39 30 00 00 39 30 00 00     .(...(..90..90..
      dc:	39 30 00 00 49 0c 00 00 39 30 00 00 39 30 00 00     90..I...90..90..
      ec:	39 30 00 00 39 30 00 00 61 25 00 00 71 25 00 00     90..90..a%..q%..
      fc:	81 25 00 00 91 25 00 00 a1 25 00 00 b1 25 00 00     .%...%...%...%..
     10c:	c1 25 00 00 d1 25 00 00 39 30 00 00 39 30 00 00     .%...%..90..90..
     11c:	39 30 00 00 39 30 00 00 39 30 00 00 39 30 00 00     90..90..90..90..
     12c:	39 30 00 00 39 30 00 00 e9 2f 00 00 39 30 00 00     90..90.../..90..
     13c:	fd 2f 00 00 39 30 00 00 39 30 00 00 39 30 00 00     ./..90..90..90..
     14c:	39 30 00 00 39 30 00 00 39 30 00 00 39 30 00 00     90..90..90..90..
     15c:	39 30 00 00 39 30 00 00 39 30 00 00 39 30 00 00     90..90..90..90..
     16c:	39 30 00 00 39 30 00 00 11 30 00 00 25 30 00 00     90..90...0..%0..
     17c:	39 30 00 00                                         90..

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	20000ac0 	.word	0x20000ac0
     19c:	00000000 	.word	0x00000000
     1a0:	00006418 	.word	0x00006418

000001a4 <frame_dummy>:
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <frame_dummy+0x34>)
     1a6:	b143      	cbz	r3, 1ba <frame_dummy+0x16>
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <frame_dummy+0x38>)
     1aa:	490d      	ldr	r1, [pc, #52]	; (1e0 <frame_dummy+0x3c>)
     1ac:	b510      	push	{r4, lr}
     1ae:	f3af 8000 	nop.w
     1b2:	480c      	ldr	r0, [pc, #48]	; (1e4 <frame_dummy+0x40>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b923      	cbnz	r3, 1c2 <frame_dummy+0x1e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	480a      	ldr	r0, [pc, #40]	; (1e4 <frame_dummy+0x40>)
     1bc:	6803      	ldr	r3, [r0, #0]
     1be:	b933      	cbnz	r3, 1ce <frame_dummy+0x2a>
     1c0:	4770      	bx	lr
     1c2:	4b09      	ldr	r3, [pc, #36]	; (1e8 <frame_dummy+0x44>)
     1c4:	2b00      	cmp	r3, #0
     1c6:	d0f7      	beq.n	1b8 <frame_dummy+0x14>
     1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1cc:	4718      	bx	r3
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <frame_dummy+0x44>)
     1d0:	2b00      	cmp	r3, #0
     1d2:	d0f5      	beq.n	1c0 <frame_dummy+0x1c>
     1d4:	4718      	bx	r3
     1d6:	bf00      	nop
     1d8:	00000000 	.word	0x00000000
     1dc:	00006418 	.word	0x00006418
     1e0:	20000ac4 	.word	0x20000ac4
     1e4:	00006418 	.word	0x00006418
     1e8:	00000000 	.word	0x00000000

000001ec <udi_hid_generic_disable>:
	return UDI_HID_GENERIC_ENABLE_EXT();
}


void udi_hid_generic_disable(void)
{
     1ec:	4770      	bx	lr

000001ee <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     1ee:	2000      	movs	r0, #0
     1f0:	4770      	bx	lr
	...

000001f4 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <udi_hid_generic_setreport+0x38>)
     1f6:	885b      	ldrh	r3, [r3, #2]
     1f8:	0a1a      	lsrs	r2, r3, #8
     1fa:	2a03      	cmp	r2, #3
     1fc:	d001      	beq.n	202 <udi_hid_generic_setreport+0xe>
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
     1fe:	2000      	movs	r0, #0
     200:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     202:	f013 0fff 	tst.w	r3, #255	; 0xff
     206:	d10e      	bne.n	226 <udi_hid_generic_setreport+0x32>
					udd_g_ctrlreq.req.wLength)) {
     208:	4b08      	ldr	r3, [pc, #32]	; (22c <udi_hid_generic_setreport+0x38>)
			&& (sizeof(udi_hid_generic_report_feature) ==
     20a:	88db      	ldrh	r3, [r3, #6]
     20c:	2b04      	cmp	r3, #4
     20e:	d001      	beq.n	214 <udi_hid_generic_setreport+0x20>
	return false;
     210:	2000      	movs	r0, #0
}
     212:	4770      	bx	lr
		udd_g_ctrlreq.payload =
     214:	4b05      	ldr	r3, [pc, #20]	; (22c <udi_hid_generic_setreport+0x38>)
     216:	4a06      	ldr	r2, [pc, #24]	; (230 <udi_hid_generic_setreport+0x3c>)
     218:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     21a:	4a06      	ldr	r2, [pc, #24]	; (234 <udi_hid_generic_setreport+0x40>)
     21c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     21e:	2204      	movs	r2, #4
     220:	819a      	strh	r2, [r3, #12]
		return true;
     222:	2001      	movs	r0, #1
     224:	4770      	bx	lr
	return false;
     226:	2000      	movs	r0, #0
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20000d94 	.word	0x20000d94
     230:	20000ae8 	.word	0x20000ae8
     234:	000002d9 	.word	0x000002d9

00000238 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     238:	2201      	movs	r2, #1
     23a:	4b01      	ldr	r3, [pc, #4]	; (240 <udi_hid_generic_report_in_sent+0x8>)
     23c:	701a      	strb	r2, [r3, #0]
     23e:	4770      	bx	lr
     240:	20000adc 	.word	0x20000adc

00000244 <udi_hid_generic_report_out_enable>:
{
     244:	b510      	push	{r4, lr}
     246:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <udi_hid_generic_report_out_enable+0x18>)
     24a:	9300      	str	r3, [sp, #0]
     24c:	2340      	movs	r3, #64	; 0x40
     24e:	4a04      	ldr	r2, [pc, #16]	; (260 <udi_hid_generic_report_out_enable+0x1c>)
     250:	2100      	movs	r1, #0
     252:	2002      	movs	r0, #2
     254:	4c03      	ldr	r4, [pc, #12]	; (264 <udi_hid_generic_report_out_enable+0x20>)
     256:	47a0      	blx	r4
}
     258:	b002      	add	sp, #8
     25a:	bd10      	pop	{r4, pc}
     25c:	00000291 	.word	0x00000291
     260:	20000af4 	.word	0x20000af4
     264:	000015f5 	.word	0x000015f5

00000268 <udi_hid_generic_enable>:
{
     268:	b508      	push	{r3, lr}
	udi_hid_generic_rate = 0;
     26a:	2300      	movs	r3, #0
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <udi_hid_generic_enable+0x18>)
     26e:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
     270:	4a04      	ldr	r2, [pc, #16]	; (284 <udi_hid_generic_enable+0x1c>)
     272:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
     274:	2201      	movs	r2, #1
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <udi_hid_generic_enable+0x20>)
     278:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     27a:	4b04      	ldr	r3, [pc, #16]	; (28c <udi_hid_generic_enable+0x24>)
     27c:	4798      	blx	r3
}
     27e:	bd08      	pop	{r3, pc}
     280:	20000ae4 	.word	0x20000ae4
     284:	20000ae0 	.word	0x20000ae0
     288:	20000adc 	.word	0x20000adc
     28c:	00000245 	.word	0x00000245

00000290 <udi_hid_generic_report_out_received>:
	if (UDD_EP_TRANSFER_OK != status)
     290:	b948      	cbnz	r0, 2a6 <udi_hid_generic_report_out_received+0x16>
{
     292:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     294:	2940      	cmp	r1, #64	; 0x40
     296:	d002      	beq.n	29e <udi_hid_generic_report_out_received+0xe>
	udi_hid_generic_report_out_enable();
     298:	4b03      	ldr	r3, [pc, #12]	; (2a8 <udi_hid_generic_report_out_received+0x18>)
     29a:	4798      	blx	r3
     29c:	bd08      	pop	{r3, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     29e:	4803      	ldr	r0, [pc, #12]	; (2ac <udi_hid_generic_report_out_received+0x1c>)
     2a0:	4b03      	ldr	r3, [pc, #12]	; (2b0 <udi_hid_generic_report_out_received+0x20>)
     2a2:	4798      	blx	r3
     2a4:	e7f8      	b.n	298 <udi_hid_generic_report_out_received+0x8>
     2a6:	4770      	bx	lr
     2a8:	00000245 	.word	0x00000245
     2ac:	20000af4 	.word	0x20000af4
     2b0:	0000341b 	.word	0x0000341b

000002b4 <udi_hid_generic_setup>:
{
     2b4:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <udi_hid_generic_setup+0x10>)
     2b8:	4a03      	ldr	r2, [pc, #12]	; (2c8 <udi_hid_generic_setup+0x14>)
     2ba:	4904      	ldr	r1, [pc, #16]	; (2cc <udi_hid_generic_setup+0x18>)
     2bc:	4804      	ldr	r0, [pc, #16]	; (2d0 <udi_hid_generic_setup+0x1c>)
     2be:	4c05      	ldr	r4, [pc, #20]	; (2d4 <udi_hid_generic_setup+0x20>)
     2c0:	47a0      	blx	r4
}
     2c2:	bd10      	pop	{r4, pc}
     2c4:	000001f5 	.word	0x000001f5
     2c8:	20000040 	.word	0x20000040
     2cc:	20000ae0 	.word	0x20000ae0
     2d0:	20000ae4 	.word	0x20000ae4
     2d4:	00001cdd 	.word	0x00001cdd

000002d8 <udi_hid_generic_setfeature_valid>:
{
     2d8:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <udi_hid_generic_setfeature_valid+0x14>)
     2dc:	899b      	ldrh	r3, [r3, #12]
     2de:	2b04      	cmp	r3, #4
     2e0:	d000      	beq.n	2e4 <udi_hid_generic_setfeature_valid+0xc>
     2e2:	bd08      	pop	{r3, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     2e4:	4802      	ldr	r0, [pc, #8]	; (2f0 <udi_hid_generic_setfeature_valid+0x18>)
     2e6:	4b03      	ldr	r3, [pc, #12]	; (2f4 <udi_hid_generic_setfeature_valid+0x1c>)
     2e8:	4798      	blx	r3
     2ea:	e7fa      	b.n	2e2 <udi_hid_generic_setfeature_valid+0xa>
     2ec:	20000d94 	.word	0x20000d94
     2f0:	20000ae8 	.word	0x20000ae8
     2f4:	0000341d 	.word	0x0000341d

000002f8 <udi_hid_generic_send_report_in>:
	if (!udi_hid_generic_b_report_in_free)
     2f8:	4b19      	ldr	r3, [pc, #100]	; (360 <udi_hid_generic_send_report_in+0x68>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	b90b      	cbnz	r3, 302 <udi_hid_generic_send_report_in+0xa>
}
     2fe:	4618      	mov	r0, r3
     300:	4770      	bx	lr
{
     302:	b530      	push	{r4, r5, lr}
     304:	b085      	sub	sp, #20
     306:	4603      	mov	r3, r0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     308:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     30c:	fab2 f282 	clz	r2, r2
     310:	0952      	lsrs	r2, r2, #5
     312:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     314:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     316:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     31a:	2100      	movs	r1, #0
     31c:	4a11      	ldr	r2, [pc, #68]	; (364 <udi_hid_generic_send_report_in+0x6c>)
     31e:	7011      	strb	r1, [r2, #0]
	return flags;
     320:	9c03      	ldr	r4, [sp, #12]
	memset(&udi_hid_generic_report_in, 0,
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <udi_hid_generic_send_report_in+0x70>)
     324:	6011      	str	r1, [r2, #0]
     326:	7111      	strb	r1, [r2, #4]
	memcpy(&udi_hid_generic_report_in, data,
     328:	6800      	ldr	r0, [r0, #0]
     32a:	6010      	str	r0, [r2, #0]
     32c:	791b      	ldrb	r3, [r3, #4]
     32e:	7113      	strb	r3, [r2, #4]
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     330:	4b0e      	ldr	r3, [pc, #56]	; (36c <udi_hid_generic_send_report_in+0x74>)
     332:	9300      	str	r3, [sp, #0]
     334:	2305      	movs	r3, #5
     336:	2081      	movs	r0, #129	; 0x81
     338:	4d0d      	ldr	r5, [pc, #52]	; (370 <udi_hid_generic_send_report_in+0x78>)
     33a:	47a8      	blx	r5
							udi_hid_generic_report_in_sent);
     33c:	f080 0001 	eor.w	r0, r0, #1
	udi_hid_generic_b_report_in_free =
     340:	4b07      	ldr	r3, [pc, #28]	; (360 <udi_hid_generic_send_report_in+0x68>)
     342:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     344:	b12c      	cbz	r4, 352 <udi_hid_generic_send_report_in+0x5a>
		cpu_irq_enable();
     346:	2201      	movs	r2, #1
     348:	4b06      	ldr	r3, [pc, #24]	; (364 <udi_hid_generic_send_report_in+0x6c>)
     34a:	701a      	strb	r2, [r3, #0]
     34c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     350:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <udi_hid_generic_send_report_in+0x68>)
     354:	781b      	ldrb	r3, [r3, #0]
     356:	f083 0301 	eor.w	r3, r3, #1
}
     35a:	4618      	mov	r0, r3
     35c:	b005      	add	sp, #20
     35e:	bd30      	pop	{r4, r5, pc}
     360:	20000adc 	.word	0x20000adc
     364:	20000104 	.word	0x20000104
     368:	20000aec 	.word	0x20000aec
     36c:	00000239 	.word	0x00000239
     370:	000015f5 	.word	0x000015f5

00000374 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     374:	4b10      	ldr	r3, [pc, #64]	; (3b8 <udc_next_desc_in_iface+0x44>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     37a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     37c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     37e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     380:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     382:	4290      	cmp	r0, r2
     384:	d211      	bcs.n	3aa <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     386:	7843      	ldrb	r3, [r0, #1]
     388:	2b04      	cmp	r3, #4
     38a:	d010      	beq.n	3ae <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     38c:	428b      	cmp	r3, r1
     38e:	d009      	beq.n	3a4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     390:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     392:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
     394:	4290      	cmp	r0, r2
     396:	d206      	bcs.n	3a6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     398:	7843      	ldrb	r3, [r0, #1]
     39a:	2b04      	cmp	r3, #4
     39c:	d009      	beq.n	3b2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
     39e:	428b      	cmp	r3, r1
     3a0:	d1f6      	bne.n	390 <udc_next_desc_in_iface+0x1c>
     3a2:	e007      	b.n	3b4 <udc_next_desc_in_iface+0x40>
     3a4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
     3a6:	2000      	movs	r0, #0
     3a8:	4770      	bx	lr
     3aa:	2000      	movs	r0, #0
     3ac:	4770      	bx	lr
     3ae:	2000      	movs	r0, #0
     3b0:	4770      	bx	lr
     3b2:	2000      	movs	r0, #0
}
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop
     3b8:	20000b40 	.word	0x20000b40

000003bc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     3bc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     3be:	4b03      	ldr	r3, [pc, #12]	; (3cc <udc_valid_address+0x10>)
     3c0:	7898      	ldrb	r0, [r3, #2]
     3c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     3c6:	4b02      	ldr	r3, [pc, #8]	; (3d0 <udc_valid_address+0x14>)
     3c8:	4798      	blx	r3
     3ca:	bd08      	pop	{r3, pc}
     3cc:	20000d94 	.word	0x20000d94
     3d0:	00001475 	.word	0x00001475

000003d4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
     3d4:	4b19      	ldr	r3, [pc, #100]	; (43c <udc_update_iface_desc+0x68>)
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	b34b      	cbz	r3, 42e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     3da:	4b19      	ldr	r3, [pc, #100]	; (440 <udc_update_iface_desc+0x6c>)
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	791a      	ldrb	r2, [r3, #4]
     3e2:	4282      	cmp	r2, r0
     3e4:	d925      	bls.n	432 <udc_update_iface_desc+0x5e>
{
     3e6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     3e8:	4a16      	ldr	r2, [pc, #88]	; (444 <udc_update_iface_desc+0x70>)
     3ea:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     3ec:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     3ee:	441c      	add	r4, r3
	while (ptr_end_desc >
     3f0:	42a3      	cmp	r3, r4
     3f2:	d220      	bcs.n	436 <udc_update_iface_desc+0x62>
     3f4:	2500      	movs	r5, #0
     3f6:	2601      	movs	r6, #1
     3f8:	e007      	b.n	40a <udc_update_iface_desc+0x36>
     3fa:	4a12      	ldr	r2, [pc, #72]	; (444 <udc_update_iface_desc+0x70>)
     3fc:	6013      	str	r3, [r2, #0]
     3fe:	e00f      	b.n	420 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
     400:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     402:	4413      	add	r3, r2
     404:	4635      	mov	r5, r6
	while (ptr_end_desc >
     406:	42a3      	cmp	r3, r4
     408:	d20c      	bcs.n	424 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     40a:	785a      	ldrb	r2, [r3, #1]
     40c:	2a04      	cmp	r2, #4
     40e:	d1f7      	bne.n	400 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     410:	789a      	ldrb	r2, [r3, #2]
     412:	4282      	cmp	r2, r0
     414:	d1f4      	bne.n	400 <udc_update_iface_desc+0x2c>
     416:	78da      	ldrb	r2, [r3, #3]
     418:	428a      	cmp	r2, r1
     41a:	d1f1      	bne.n	400 <udc_update_iface_desc+0x2c>
     41c:	2d00      	cmp	r5, #0
     41e:	d1ec      	bne.n	3fa <udc_update_iface_desc+0x26>
				return true; // Interface found
     420:	2001      	movs	r0, #1
     422:	e002      	b.n	42a <udc_update_iface_desc+0x56>
     424:	4a07      	ldr	r2, [pc, #28]	; (444 <udc_update_iface_desc+0x70>)
     426:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     428:	2000      	movs	r0, #0
}
     42a:	bc70      	pop	{r4, r5, r6}
     42c:	4770      	bx	lr
		return false;
     42e:	2000      	movs	r0, #0
     430:	4770      	bx	lr
		return false;
     432:	2000      	movs	r0, #0
     434:	4770      	bx	lr
	return false; // Interface not found
     436:	2000      	movs	r0, #0
     438:	e7f7      	b.n	42a <udc_update_iface_desc+0x56>
     43a:	bf00      	nop
     43c:	20000b3c 	.word	0x20000b3c
     440:	20000b40 	.word	0x20000b40
     444:	20000b44 	.word	0x20000b44

00000448 <udc_iface_disable>:
{
     448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     44c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     44e:	2100      	movs	r1, #0
     450:	4b13      	ldr	r3, [pc, #76]	; (4a0 <udc_iface_disable+0x58>)
     452:	4798      	blx	r3
     454:	4680      	mov	r8, r0
     456:	b910      	cbnz	r0, 45e <udc_iface_disable+0x16>
}
     458:	4640      	mov	r0, r8
     45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     45e:	4b11      	ldr	r3, [pc, #68]	; (4a4 <udc_iface_disable+0x5c>)
     460:	681b      	ldr	r3, [r3, #0]
     462:	685b      	ldr	r3, [r3, #4]
     464:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     468:	f8d9 300c 	ldr.w	r3, [r9, #12]
     46c:	4798      	blx	r3
     46e:	4601      	mov	r1, r0
     470:	4620      	mov	r0, r4
     472:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <udc_iface_disable+0x58>)
     474:	4798      	blx	r3
     476:	4680      	mov	r8, r0
     478:	2800      	cmp	r0, #0
     47a:	d0ed      	beq.n	458 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     47c:	4b0a      	ldr	r3, [pc, #40]	; (4a8 <udc_iface_disable+0x60>)
     47e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     480:	2605      	movs	r6, #5
     482:	4d0a      	ldr	r5, [pc, #40]	; (4ac <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     484:	4f0a      	ldr	r7, [pc, #40]	; (4b0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     486:	4631      	mov	r1, r6
     488:	4620      	mov	r0, r4
     48a:	47a8      	blx	r5
			if (NULL == ep_desc) {
     48c:	4604      	mov	r4, r0
     48e:	b110      	cbz	r0, 496 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     490:	7880      	ldrb	r0, [r0, #2]
     492:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     494:	e7f7      	b.n	486 <udc_iface_disable+0x3e>
	udi_api->disable();
     496:	f8d9 3004 	ldr.w	r3, [r9, #4]
     49a:	4798      	blx	r3
	return true;
     49c:	e7dc      	b.n	458 <udc_iface_disable+0x10>
     49e:	bf00      	nop
     4a0:	000003d5 	.word	0x000003d5
     4a4:	20000b40 	.word	0x20000b40
     4a8:	20000b44 	.word	0x20000b44
     4ac:	00000375 	.word	0x00000375
     4b0:	00001c91 	.word	0x00001c91

000004b4 <udc_iface_enable>:
{
     4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4b8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     4ba:	4b10      	ldr	r3, [pc, #64]	; (4fc <udc_iface_enable+0x48>)
     4bc:	4798      	blx	r3
     4be:	4603      	mov	r3, r0
     4c0:	b1c8      	cbz	r0, 4f6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     4c2:	4b0f      	ldr	r3, [pc, #60]	; (500 <udc_iface_enable+0x4c>)
     4c4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4c6:	2605      	movs	r6, #5
     4c8:	4d0e      	ldr	r5, [pc, #56]	; (504 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     4ca:	4f0f      	ldr	r7, [pc, #60]	; (508 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     4cc:	4631      	mov	r1, r6
     4ce:	4620      	mov	r0, r4
     4d0:	47a8      	blx	r5
		if (NULL == ep_desc)
     4d2:	4604      	mov	r4, r0
     4d4:	b138      	cbz	r0, 4e6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     4d6:	8882      	ldrh	r2, [r0, #4]
     4d8:	78c1      	ldrb	r1, [r0, #3]
     4da:	7880      	ldrb	r0, [r0, #2]
     4dc:	47b8      	blx	r7
     4de:	4603      	mov	r3, r0
     4e0:	2800      	cmp	r0, #0
     4e2:	d1f3      	bne.n	4cc <udc_iface_enable+0x18>
     4e4:	e007      	b.n	4f6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <udc_iface_enable+0x58>)
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	685b      	ldr	r3, [r3, #4]
     4ec:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	4798      	blx	r3
     4f4:	4603      	mov	r3, r0
}
     4f6:	4618      	mov	r0, r3
     4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4fc:	000003d5 	.word	0x000003d5
     500:	20000b44 	.word	0x20000b44
     504:	00000375 	.word	0x00000375
     508:	000014b9 	.word	0x000014b9
     50c:	20000b40 	.word	0x20000b40

00000510 <udc_get_interface_desc>:
}
     510:	4b01      	ldr	r3, [pc, #4]	; (518 <udc_get_interface_desc+0x8>)
     512:	6818      	ldr	r0, [r3, #0]
     514:	4770      	bx	lr
     516:	bf00      	nop
     518:	20000b44 	.word	0x20000b44

0000051c <udc_start>:
{
     51c:	b508      	push	{r3, lr}
	udd_enable();
     51e:	4b01      	ldr	r3, [pc, #4]	; (524 <udc_start+0x8>)
     520:	4798      	blx	r3
     522:	bd08      	pop	{r3, pc}
     524:	00001335 	.word	0x00001335

00000528 <udc_reset>:
{
     528:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     52a:	4b0d      	ldr	r3, [pc, #52]	; (560 <udc_reset+0x38>)
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	b183      	cbz	r3, 552 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     530:	4b0c      	ldr	r3, [pc, #48]	; (564 <udc_reset+0x3c>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     536:	791b      	ldrb	r3, [r3, #4]
     538:	b15b      	cbz	r3, 552 <udc_reset+0x2a>
     53a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     53c:	4e0a      	ldr	r6, [pc, #40]	; (568 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     53e:	4d09      	ldr	r5, [pc, #36]	; (564 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
     540:	4620      	mov	r0, r4
     542:	47b0      	blx	r6
				iface_num++) {
     544:	3401      	adds	r4, #1
     546:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     548:	682b      	ldr	r3, [r5, #0]
     54a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     54c:	791b      	ldrb	r3, [r3, #4]
     54e:	42a3      	cmp	r3, r4
     550:	d8f6      	bhi.n	540 <udc_reset+0x18>
	udc_num_configuration = 0;
     552:	2300      	movs	r3, #0
     554:	4a02      	ldr	r2, [pc, #8]	; (560 <udc_reset+0x38>)
     556:	7013      	strb	r3, [r2, #0]
	udc_device_status =
     558:	4a04      	ldr	r2, [pc, #16]	; (56c <udc_reset+0x44>)
     55a:	8013      	strh	r3, [r2, #0]
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	bf00      	nop
     560:	20000b3c 	.word	0x20000b3c
     564:	20000b40 	.word	0x20000b40
     568:	00000449 	.word	0x00000449
     56c:	20000b34 	.word	0x20000b34

00000570 <udc_sof_notify>:
{
     570:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
     572:	4b0d      	ldr	r3, [pc, #52]	; (5a8 <udc_sof_notify+0x38>)
     574:	781b      	ldrb	r3, [r3, #0]
     576:	b1b3      	cbz	r3, 5a6 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     578:	4b0c      	ldr	r3, [pc, #48]	; (5ac <udc_sof_notify+0x3c>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
     57e:	7912      	ldrb	r2, [r2, #4]
     580:	b18a      	cbz	r2, 5a6 <udc_sof_notify+0x36>
     582:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     584:	4d09      	ldr	r5, [pc, #36]	; (5ac <udc_sof_notify+0x3c>)
     586:	e006      	b.n	596 <udc_sof_notify+0x26>
				iface_num++) {
     588:	3401      	adds	r4, #1
     58a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     58c:	682b      	ldr	r3, [r5, #0]
     58e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
     590:	7912      	ldrb	r2, [r2, #4]
     592:	42a2      	cmp	r2, r4
     594:	d907      	bls.n	5a6 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     596:	685b      	ldr	r3, [r3, #4]
     598:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     59c:	691b      	ldr	r3, [r3, #16]
     59e:	2b00      	cmp	r3, #0
     5a0:	d0f2      	beq.n	588 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     5a2:	4798      	blx	r3
     5a4:	e7f0      	b.n	588 <udc_sof_notify+0x18>
     5a6:	bd38      	pop	{r3, r4, r5, pc}
     5a8:	20000b3c 	.word	0x20000b3c
     5ac:	20000b40 	.word	0x20000b40

000005b0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     5b2:	4b88      	ldr	r3, [pc, #544]	; (7d4 <udc_process_setup+0x224>)
     5b4:	2200      	movs	r2, #0
     5b6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     5b8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     5ba:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     5bc:	781b      	ldrb	r3, [r3, #0]
     5be:	f013 0f80 	tst.w	r3, #128	; 0x80
     5c2:	d114      	bne.n	5ee <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     5c4:	f013 0f60 	tst.w	r3, #96	; 0x60
     5c8:	f000 80d5 	beq.w	776 <udc_process_setup+0x1c6>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     5cc:	4b81      	ldr	r3, [pc, #516]	; (7d4 <udc_process_setup+0x224>)
     5ce:	781b      	ldrb	r3, [r3, #0]
     5d0:	f003 031f 	and.w	r3, r3, #31
     5d4:	2b01      	cmp	r3, #1
     5d6:	f000 816e 	beq.w	8b6 <udc_process_setup+0x306>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     5da:	4b7e      	ldr	r3, [pc, #504]	; (7d4 <udc_process_setup+0x224>)
     5dc:	781b      	ldrb	r3, [r3, #0]
     5de:	f003 031f 	and.w	r3, r3, #31
     5e2:	2b02      	cmp	r3, #2
     5e4:	f000 81c9 	beq.w	97a <udc_process_setup+0x3ca>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     5e8:	2300      	movs	r3, #0
#endif
}
     5ea:	4618      	mov	r0, r3
     5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     5ee:	4a79      	ldr	r2, [pc, #484]	; (7d4 <udc_process_setup+0x224>)
     5f0:	88d2      	ldrh	r2, [r2, #6]
     5f2:	2a00      	cmp	r2, #0
     5f4:	f000 81ea 	beq.w	9cc <udc_process_setup+0x41c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     5f8:	f013 0f60 	tst.w	r3, #96	; 0x60
     5fc:	d1e6      	bne.n	5cc <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     5fe:	f013 031f 	ands.w	r3, r3, #31
     602:	d106      	bne.n	612 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
     604:	4973      	ldr	r1, [pc, #460]	; (7d4 <udc_process_setup+0x224>)
     606:	7849      	ldrb	r1, [r1, #1]
     608:	2906      	cmp	r1, #6
     60a:	d014      	beq.n	636 <udc_process_setup+0x86>
     60c:	2908      	cmp	r1, #8
     60e:	d074      	beq.n	6fa <udc_process_setup+0x14a>
     610:	b151      	cbz	r1, 628 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     612:	2b01      	cmp	r3, #1
     614:	d079      	beq.n	70a <udc_process_setup+0x15a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     616:	2b02      	cmp	r3, #2
     618:	d1d8      	bne.n	5cc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     61a:	4b6e      	ldr	r3, [pc, #440]	; (7d4 <udc_process_setup+0x224>)
     61c:	785b      	ldrb	r3, [r3, #1]
     61e:	2b00      	cmp	r3, #0
     620:	f000 809b 	beq.w	75a <udc_process_setup+0x1aa>
	return false;
     624:	2300      	movs	r3, #0
     626:	e18a      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     628:	2a02      	cmp	r2, #2
     62a:	d1d6      	bne.n	5da <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     62c:	2102      	movs	r1, #2
     62e:	486a      	ldr	r0, [pc, #424]	; (7d8 <udc_process_setup+0x228>)
     630:	4b6a      	ldr	r3, [pc, #424]	; (7dc <udc_process_setup+0x22c>)
     632:	4798      	blx	r3
     634:	e0bb      	b.n	7ae <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     636:	4b67      	ldr	r3, [pc, #412]	; (7d4 <udc_process_setup+0x224>)
     638:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     63a:	0a13      	lsrs	r3, r2, #8
     63c:	3b01      	subs	r3, #1
     63e:	2b0e      	cmp	r3, #14
     640:	f200 817a 	bhi.w	938 <udc_process_setup+0x388>
     644:	e8df f013 	tbh	[pc, r3, lsl #1]
     648:	001d000f 	.word	0x001d000f
     64c:	01780037 	.word	0x01780037
     650:	01780178 	.word	0x01780178
     654:	01780178 	.word	0x01780178
     658:	01780178 	.word	0x01780178
     65c:	01780178 	.word	0x01780178
     660:	01780178 	.word	0x01780178
     664:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
     666:	4b5e      	ldr	r3, [pc, #376]	; (7e0 <udc_process_setup+0x230>)
     668:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     66a:	7801      	ldrb	r1, [r0, #0]
     66c:	4b5b      	ldr	r3, [pc, #364]	; (7dc <udc_process_setup+0x22c>)
     66e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     670:	4b58      	ldr	r3, [pc, #352]	; (7d4 <udc_process_setup+0x224>)
     672:	88da      	ldrh	r2, [r3, #6]
     674:	899b      	ldrh	r3, [r3, #12]
     676:	4293      	cmp	r3, r2
     678:	f240 8099 	bls.w	7ae <udc_process_setup+0x1fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     67c:	4b55      	ldr	r3, [pc, #340]	; (7d4 <udc_process_setup+0x224>)
     67e:	819a      	strh	r2, [r3, #12]
     680:	e095      	b.n	7ae <udc_process_setup+0x1fe>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     682:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     684:	4b56      	ldr	r3, [pc, #344]	; (7e0 <udc_process_setup+0x230>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	7c5b      	ldrb	r3, [r3, #17]
     68a:	4293      	cmp	r3, r2
     68c:	d9a5      	bls.n	5da <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     68e:	4b54      	ldr	r3, [pc, #336]	; (7e0 <udc_process_setup+0x230>)
     690:	685b      	ldr	r3, [r3, #4]
     692:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
     696:	8841      	ldrh	r1, [r0, #2]
     698:	4b50      	ldr	r3, [pc, #320]	; (7dc <udc_process_setup+0x22c>)
     69a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     69c:	4b4d      	ldr	r3, [pc, #308]	; (7d4 <udc_process_setup+0x224>)
     69e:	689b      	ldr	r3, [r3, #8]
     6a0:	2202      	movs	r2, #2
     6a2:	705a      	strb	r2, [r3, #1]
     6a4:	e7e4      	b.n	670 <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
     6a6:	4b4e      	ldr	r3, [pc, #312]	; (7e0 <udc_process_setup+0x230>)
     6a8:	6898      	ldr	r0, [r3, #8]
     6aa:	2800      	cmp	r0, #0
     6ac:	d095      	beq.n	5da <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     6ae:	8841      	ldrh	r1, [r0, #2]
     6b0:	4b4a      	ldr	r3, [pc, #296]	; (7dc <udc_process_setup+0x22c>)
     6b2:	4798      	blx	r3
     6b4:	e7dc      	b.n	670 <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     6b6:	b2d2      	uxtb	r2, r2
     6b8:	2a01      	cmp	r2, #1
     6ba:	d01b      	beq.n	6f4 <udc_process_setup+0x144>
     6bc:	b1aa      	cbz	r2, 6ea <udc_process_setup+0x13a>
     6be:	2a02      	cmp	r2, #2
     6c0:	d184      	bne.n	5cc <udc_process_setup+0x1c>
		str = udc_string_product_name;
     6c2:	4948      	ldr	r1, [pc, #288]	; (7e4 <udc_process_setup+0x234>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     6c4:	2208      	movs	r2, #8
     6c6:	3901      	subs	r1, #1
     6c8:	4847      	ldr	r0, [pc, #284]	; (7e8 <udc_process_setup+0x238>)
     6ca:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     6cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     6d0:	f820 4b02 	strh.w	r4, [r0], #2
		for(i = 0; i < str_length; i++) {
     6d4:	3301      	adds	r3, #1
     6d6:	b2db      	uxtb	r3, r3
     6d8:	4293      	cmp	r3, r2
     6da:	d3f7      	bcc.n	6cc <udc_process_setup+0x11c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     6dc:	0052      	lsls	r2, r2, #1
     6de:	1c91      	adds	r1, r2, #2
     6e0:	4842      	ldr	r0, [pc, #264]	; (7ec <udc_process_setup+0x23c>)
     6e2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     6e4:	4b3d      	ldr	r3, [pc, #244]	; (7dc <udc_process_setup+0x22c>)
     6e6:	4798      	blx	r3
     6e8:	e7c2      	b.n	670 <udc_process_setup+0xc0>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     6ea:	2104      	movs	r1, #4
     6ec:	4840      	ldr	r0, [pc, #256]	; (7f0 <udc_process_setup+0x240>)
     6ee:	4b3b      	ldr	r3, [pc, #236]	; (7dc <udc_process_setup+0x22c>)
     6f0:	4798      	blx	r3
     6f2:	e7bd      	b.n	670 <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
     6f4:	493f      	ldr	r1, [pc, #252]	; (7f4 <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     6f6:	2206      	movs	r2, #6
     6f8:	e7e5      	b.n	6c6 <udc_process_setup+0x116>
	if (udd_g_ctrlreq.req.wLength != 1) {
     6fa:	2a01      	cmp	r2, #1
     6fc:	f47f af6d 	bne.w	5da <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     700:	2101      	movs	r1, #1
     702:	483d      	ldr	r0, [pc, #244]	; (7f8 <udc_process_setup+0x248>)
     704:	4b35      	ldr	r3, [pc, #212]	; (7dc <udc_process_setup+0x22c>)
     706:	4798      	blx	r3
     708:	e051      	b.n	7ae <udc_process_setup+0x1fe>
			switch (udd_g_ctrlreq.req.bRequest) {
     70a:	4932      	ldr	r1, [pc, #200]	; (7d4 <udc_process_setup+0x224>)
     70c:	7849      	ldrb	r1, [r1, #1]
     70e:	290a      	cmp	r1, #10
     710:	d181      	bne.n	616 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
     712:	2a01      	cmp	r2, #1
     714:	f040 80cf 	bne.w	8b6 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
     718:	4b37      	ldr	r3, [pc, #220]	; (7f8 <udc_process_setup+0x248>)
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	2b00      	cmp	r3, #0
     71e:	f000 80ca 	beq.w	8b6 <udc_process_setup+0x306>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     722:	4b2c      	ldr	r3, [pc, #176]	; (7d4 <udc_process_setup+0x224>)
     724:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     726:	4b35      	ldr	r3, [pc, #212]	; (7fc <udc_process_setup+0x24c>)
     728:	681d      	ldr	r5, [r3, #0]
     72a:	682b      	ldr	r3, [r5, #0]
     72c:	791b      	ldrb	r3, [r3, #4]
     72e:	42a3      	cmp	r3, r4
     730:	f240 80c1 	bls.w	8b6 <udc_process_setup+0x306>
	if (!udc_update_iface_desc(iface_num, 0)) {
     734:	2100      	movs	r1, #0
     736:	4620      	mov	r0, r4
     738:	4b31      	ldr	r3, [pc, #196]	; (800 <udc_process_setup+0x250>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	f43f af45 	beq.w	5cc <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     742:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
     744:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     748:	68db      	ldr	r3, [r3, #12]
     74a:	4798      	blx	r3
     74c:	4b2d      	ldr	r3, [pc, #180]	; (804 <udc_process_setup+0x254>)
     74e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     750:	2101      	movs	r1, #1
     752:	4618      	mov	r0, r3
     754:	4b21      	ldr	r3, [pc, #132]	; (7dc <udc_process_setup+0x22c>)
     756:	4798      	blx	r3
     758:	e029      	b.n	7ae <udc_process_setup+0x1fe>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     75a:	2a02      	cmp	r2, #2
     75c:	f47f af3d 	bne.w	5da <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     760:	4b1c      	ldr	r3, [pc, #112]	; (7d4 <udc_process_setup+0x224>)
     762:	7918      	ldrb	r0, [r3, #4]
     764:	4b28      	ldr	r3, [pc, #160]	; (808 <udc_process_setup+0x258>)
     766:	4798      	blx	r3
     768:	4b28      	ldr	r3, [pc, #160]	; (80c <udc_process_setup+0x25c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     76a:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     76c:	2102      	movs	r1, #2
     76e:	4618      	mov	r0, r3
     770:	4b1a      	ldr	r3, [pc, #104]	; (7dc <udc_process_setup+0x22c>)
     772:	4798      	blx	r3
     774:	e01b      	b.n	7ae <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     776:	f013 031f 	ands.w	r3, r3, #31
     77a:	f040 8085 	bne.w	888 <udc_process_setup+0x2d8>
			switch (udd_g_ctrlreq.req.bRequest) {
     77e:	4a15      	ldr	r2, [pc, #84]	; (7d4 <udc_process_setup+0x224>)
     780:	7852      	ldrb	r2, [r2, #1]
     782:	3a01      	subs	r2, #1
     784:	2a08      	cmp	r2, #8
     786:	d87f      	bhi.n	888 <udc_process_setup+0x2d8>
     788:	e8df f012 	tbh	[pc, r2, lsl #1]
     78c:	007e0013 	.word	0x007e0013
     790:	007e00d8 	.word	0x007e00d8
     794:	007e0009 	.word	0x007e0009
     798:	007e007e 	.word	0x007e007e
     79c:	0044      	.short	0x0044
	if (udd_g_ctrlreq.req.wLength) {
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <udc_process_setup+0x224>)
     7a0:	88db      	ldrh	r3, [r3, #6]
     7a2:	2b00      	cmp	r3, #0
     7a4:	f47f af19 	bne.w	5da <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     7a8:	4a19      	ldr	r2, [pc, #100]	; (810 <udc_process_setup+0x260>)
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <udc_process_setup+0x224>)
     7ac:	611a      	str	r2, [r3, #16]
			return true;
     7ae:	2301      	movs	r3, #1
     7b0:	e71b      	b.n	5ea <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     7b2:	4b08      	ldr	r3, [pc, #32]	; (7d4 <udc_process_setup+0x224>)
     7b4:	88db      	ldrh	r3, [r3, #6]
     7b6:	2b00      	cmp	r3, #0
     7b8:	f47f af0f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     7bc:	4b05      	ldr	r3, [pc, #20]	; (7d4 <udc_process_setup+0x224>)
     7be:	885b      	ldrh	r3, [r3, #2]
     7c0:	2b01      	cmp	r3, #1
     7c2:	f47f af0a 	bne.w	5da <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     7c6:	4a04      	ldr	r2, [pc, #16]	; (7d8 <udc_process_setup+0x228>)
     7c8:	8813      	ldrh	r3, [r2, #0]
     7ca:	f023 0302 	bic.w	r3, r3, #2
     7ce:	8013      	strh	r3, [r2, #0]
     7d0:	e7ed      	b.n	7ae <udc_process_setup+0x1fe>
     7d2:	bf00      	nop
     7d4:	20000d94 	.word	0x20000d94
     7d8:	20000b34 	.word	0x20000b34
     7dc:	000014ad 	.word	0x000014ad
     7e0:	200000a8 	.word	0x200000a8
     7e4:	2000009c 	.word	0x2000009c
     7e8:	2000007e 	.word	0x2000007e
     7ec:	2000007c 	.word	0x2000007c
     7f0:	20000090 	.word	0x20000090
     7f4:	20000094 	.word	0x20000094
     7f8:	20000b3c 	.word	0x20000b3c
     7fc:	20000b40 	.word	0x20000b40
     800:	000003d5 	.word	0x000003d5
     804:	20000b38 	.word	0x20000b38
     808:	00001555 	.word	0x00001555
     80c:	20000b36 	.word	0x20000b36
     810:	000003bd 	.word	0x000003bd
	if (udd_g_ctrlreq.req.wLength) {
     814:	4b6f      	ldr	r3, [pc, #444]	; (9d4 <udc_process_setup+0x424>)
     816:	88db      	ldrh	r3, [r3, #6]
     818:	2b00      	cmp	r3, #0
     81a:	f47f aede 	bne.w	5da <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     81e:	4b6e      	ldr	r3, [pc, #440]	; (9d8 <udc_process_setup+0x428>)
     820:	4798      	blx	r3
     822:	2800      	cmp	r0, #0
     824:	f43f aed2 	beq.w	5cc <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     828:	4b6a      	ldr	r3, [pc, #424]	; (9d4 <udc_process_setup+0x424>)
     82a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     82c:	4b6b      	ldr	r3, [pc, #428]	; (9dc <udc_process_setup+0x42c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     832:	429a      	cmp	r2, r3
     834:	f73f aeca 	bgt.w	5cc <udc_process_setup+0x1c>
	udc_reset();
     838:	4b69      	ldr	r3, [pc, #420]	; (9e0 <udc_process_setup+0x430>)
     83a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     83c:	4b65      	ldr	r3, [pc, #404]	; (9d4 <udc_process_setup+0x424>)
     83e:	789b      	ldrb	r3, [r3, #2]
     840:	4a68      	ldr	r2, [pc, #416]	; (9e4 <udc_process_setup+0x434>)
     842:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     844:	2b00      	cmp	r3, #0
     846:	d0b2      	beq.n	7ae <udc_process_setup+0x1fe>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     848:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     84c:	3b01      	subs	r3, #1
     84e:	4a63      	ldr	r2, [pc, #396]	; (9dc <udc_process_setup+0x42c>)
     850:	6852      	ldr	r2, [r2, #4]
     852:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
     856:	4964      	ldr	r1, [pc, #400]	; (9e8 <udc_process_setup+0x438>)
     858:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     85a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     85e:	791b      	ldrb	r3, [r3, #4]
     860:	2b00      	cmp	r3, #0
     862:	d0a4      	beq.n	7ae <udc_process_setup+0x1fe>
     864:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     866:	4626      	mov	r6, r4
     868:	4d60      	ldr	r5, [pc, #384]	; (9ec <udc_process_setup+0x43c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     86a:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
     86c:	4631      	mov	r1, r6
     86e:	4620      	mov	r0, r4
     870:	47a8      	blx	r5
     872:	2800      	cmp	r0, #0
     874:	f43f aeaa 	beq.w	5cc <udc_process_setup+0x1c>
			iface_num++) {
     878:	3401      	adds	r4, #1
     87a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	681b      	ldr	r3, [r3, #0]
     880:	791b      	ldrb	r3, [r3, #4]
     882:	42a3      	cmp	r3, r4
     884:	d8f2      	bhi.n	86c <udc_process_setup+0x2bc>
     886:	e792      	b.n	7ae <udc_process_setup+0x1fe>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     888:	2b01      	cmp	r3, #1
     88a:	d00a      	beq.n	8a2 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     88c:	2b02      	cmp	r3, #2
     88e:	f47f ae9d 	bne.w	5cc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     892:	4b50      	ldr	r3, [pc, #320]	; (9d4 <udc_process_setup+0x424>)
     894:	785b      	ldrb	r3, [r3, #1]
     896:	2b01      	cmp	r3, #1
     898:	d02b      	beq.n	8f2 <udc_process_setup+0x342>
     89a:	2b03      	cmp	r3, #3
     89c:	d039      	beq.n	912 <udc_process_setup+0x362>
	return false;
     89e:	2300      	movs	r3, #0
     8a0:	e04d      	b.n	93e <udc_process_setup+0x38e>
			switch (udd_g_ctrlreq.req.bRequest) {
     8a2:	4a4c      	ldr	r2, [pc, #304]	; (9d4 <udc_process_setup+0x424>)
     8a4:	7852      	ldrb	r2, [r2, #1]
     8a6:	2a0b      	cmp	r2, #11
     8a8:	d1f0      	bne.n	88c <udc_process_setup+0x2dc>
	if (udd_g_ctrlreq.req.wLength) {
     8aa:	4b4a      	ldr	r3, [pc, #296]	; (9d4 <udc_process_setup+0x424>)
     8ac:	88db      	ldrh	r3, [r3, #6]
     8ae:	b913      	cbnz	r3, 8b6 <udc_process_setup+0x306>
	if (!udc_num_configuration) {
     8b0:	4b4c      	ldr	r3, [pc, #304]	; (9e4 <udc_process_setup+0x434>)
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	b973      	cbnz	r3, 8d4 <udc_process_setup+0x324>
	if (0 == udc_num_configuration) {
     8b6:	4b4b      	ldr	r3, [pc, #300]	; (9e4 <udc_process_setup+0x434>)
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	f000 8088 	beq.w	9d0 <udc_process_setup+0x420>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     8c0:	4b44      	ldr	r3, [pc, #272]	; (9d4 <udc_process_setup+0x424>)
     8c2:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     8c4:	4b48      	ldr	r3, [pc, #288]	; (9e8 <udc_process_setup+0x438>)
     8c6:	681d      	ldr	r5, [r3, #0]
     8c8:	682b      	ldr	r3, [r5, #0]
     8ca:	791b      	ldrb	r3, [r3, #4]
     8cc:	42a3      	cmp	r3, r4
     8ce:	d83a      	bhi.n	946 <udc_process_setup+0x396>
	return false;
     8d0:	2300      	movs	r3, #0
     8d2:	e68a      	b.n	5ea <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     8d4:	4b3f      	ldr	r3, [pc, #252]	; (9d4 <udc_process_setup+0x424>)
     8d6:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     8d8:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     8da:	4620      	mov	r0, r4
     8dc:	4b44      	ldr	r3, [pc, #272]	; (9f0 <udc_process_setup+0x440>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	f43f ae73 	beq.w	5cc <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     8e6:	b2e9      	uxtb	r1, r5
     8e8:	4620      	mov	r0, r4
     8ea:	4b40      	ldr	r3, [pc, #256]	; (9ec <udc_process_setup+0x43c>)
     8ec:	4798      	blx	r3
     8ee:	4603      	mov	r3, r0
     8f0:	e025      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
     8f2:	4b38      	ldr	r3, [pc, #224]	; (9d4 <udc_process_setup+0x424>)
     8f4:	88db      	ldrh	r3, [r3, #6]
     8f6:	2b00      	cmp	r3, #0
     8f8:	f47f ae6f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     8fc:	4b35      	ldr	r3, [pc, #212]	; (9d4 <udc_process_setup+0x424>)
     8fe:	885b      	ldrh	r3, [r3, #2]
     900:	2b00      	cmp	r3, #0
     902:	f47f ae6a 	bne.w	5da <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     906:	4b33      	ldr	r3, [pc, #204]	; (9d4 <udc_process_setup+0x424>)
     908:	7918      	ldrb	r0, [r3, #4]
     90a:	4b3a      	ldr	r3, [pc, #232]	; (9f4 <udc_process_setup+0x444>)
     90c:	4798      	blx	r3
     90e:	4603      	mov	r3, r0
     910:	e015      	b.n	93e <udc_process_setup+0x38e>
	if (udd_g_ctrlreq.req.wLength) {
     912:	4b30      	ldr	r3, [pc, #192]	; (9d4 <udc_process_setup+0x424>)
     914:	88db      	ldrh	r3, [r3, #6]
     916:	2b00      	cmp	r3, #0
     918:	f47f ae5f 	bne.w	5da <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     91c:	4b2d      	ldr	r3, [pc, #180]	; (9d4 <udc_process_setup+0x424>)
     91e:	885b      	ldrh	r3, [r3, #2]
     920:	2b00      	cmp	r3, #0
     922:	f47f ae5a 	bne.w	5da <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     926:	4c2b      	ldr	r4, [pc, #172]	; (9d4 <udc_process_setup+0x424>)
     928:	7920      	ldrb	r0, [r4, #4]
     92a:	4b33      	ldr	r3, [pc, #204]	; (9f8 <udc_process_setup+0x448>)
     92c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     92e:	7920      	ldrb	r0, [r4, #4]
     930:	4b32      	ldr	r3, [pc, #200]	; (9fc <udc_process_setup+0x44c>)
     932:	4798      	blx	r3
     934:	4603      	mov	r3, r0
     936:	e002      	b.n	93e <udc_process_setup+0x38e>
		return false;
     938:	2300      	movs	r3, #0
     93a:	e000      	b.n	93e <udc_process_setup+0x38e>
				return udc_req_std_dev_set_feature();
     93c:	2300      	movs	r3, #0
		if (udc_reqstd()) {
     93e:	2b00      	cmp	r3, #0
     940:	f47f ae53 	bne.w	5ea <udc_process_setup+0x3a>
     944:	e642      	b.n	5cc <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
     946:	2100      	movs	r1, #0
     948:	4620      	mov	r0, r4
     94a:	4b2d      	ldr	r3, [pc, #180]	; (a00 <udc_process_setup+0x450>)
     94c:	4798      	blx	r3
     94e:	2800      	cmp	r0, #0
     950:	f43f ae43 	beq.w	5da <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     954:	686b      	ldr	r3, [r5, #4]
     956:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     95a:	68eb      	ldr	r3, [r5, #12]
     95c:	4798      	blx	r3
     95e:	4601      	mov	r1, r0
     960:	4620      	mov	r0, r4
     962:	4b27      	ldr	r3, [pc, #156]	; (a00 <udc_process_setup+0x450>)
     964:	4798      	blx	r3
     966:	2800      	cmp	r0, #0
     968:	f43f ae37 	beq.w	5da <udc_process_setup+0x2a>
	return udi_api->setup();
     96c:	68ab      	ldr	r3, [r5, #8]
     96e:	4798      	blx	r3
		if (udc_req_iface()) {
     970:	4603      	mov	r3, r0
     972:	2800      	cmp	r0, #0
     974:	f47f ae39 	bne.w	5ea <udc_process_setup+0x3a>
     978:	e62f      	b.n	5da <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <udc_process_setup+0x434>)
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	b30b      	cbz	r3, 9c4 <udc_process_setup+0x414>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     980:	4b19      	ldr	r3, [pc, #100]	; (9e8 <udc_process_setup+0x438>)
     982:	681a      	ldr	r2, [r3, #0]
     984:	6813      	ldr	r3, [r2, #0]
     986:	791b      	ldrb	r3, [r3, #4]
     988:	b1f3      	cbz	r3, 9c8 <udc_process_setup+0x418>
     98a:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     98c:	4e1c      	ldr	r6, [pc, #112]	; (a00 <udc_process_setup+0x450>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     98e:	4f16      	ldr	r7, [pc, #88]	; (9e8 <udc_process_setup+0x438>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     990:	6853      	ldr	r3, [r2, #4]
     992:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     996:	68eb      	ldr	r3, [r5, #12]
     998:	4798      	blx	r3
     99a:	4601      	mov	r1, r0
     99c:	4620      	mov	r0, r4
     99e:	47b0      	blx	r6
     9a0:	4603      	mov	r3, r0
     9a2:	2800      	cmp	r0, #0
     9a4:	f43f ae21 	beq.w	5ea <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     9a8:	68ab      	ldr	r3, [r5, #8]
     9aa:	4798      	blx	r3
     9ac:	4603      	mov	r3, r0
     9ae:	2800      	cmp	r0, #0
     9b0:	f47f ae1b 	bne.w	5ea <udc_process_setup+0x3a>
			iface_num++) {
     9b4:	3401      	adds	r4, #1
     9b6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9b8:	683a      	ldr	r2, [r7, #0]
     9ba:	6811      	ldr	r1, [r2, #0]
     9bc:	7909      	ldrb	r1, [r1, #4]
     9be:	42a1      	cmp	r1, r4
     9c0:	d8e6      	bhi.n	990 <udc_process_setup+0x3e0>
     9c2:	e612      	b.n	5ea <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
     9c4:	2300      	movs	r3, #0
     9c6:	e610      	b.n	5ea <udc_process_setup+0x3a>
	return false;
     9c8:	2300      	movs	r3, #0
     9ca:	e60e      	b.n	5ea <udc_process_setup+0x3a>
			return false; // Error from USB host
     9cc:	2300      	movs	r3, #0
     9ce:	e60c      	b.n	5ea <udc_process_setup+0x3a>
	return false;
     9d0:	2300      	movs	r3, #0
     9d2:	e60a      	b.n	5ea <udc_process_setup+0x3a>
     9d4:	20000d94 	.word	0x20000d94
     9d8:	0000149d 	.word	0x0000149d
     9dc:	200000a8 	.word	0x200000a8
     9e0:	00000529 	.word	0x00000529
     9e4:	20000b3c 	.word	0x20000b3c
     9e8:	20000b40 	.word	0x20000b40
     9ec:	000004b5 	.word	0x000004b5
     9f0:	00000449 	.word	0x00000449
     9f4:	00001569 	.word	0x00001569
     9f8:	00001731 	.word	0x00001731
     9fc:	00001cb5 	.word	0x00001cb5
     a00:	000003d5 	.word	0x000003d5

00000a04 <ast_enable>:
 *
 * \param[in] ast Module hardware register base address pointer
 */
void ast_enable(
		Ast *ast)
{
     a04:	b500      	push	{lr}
     a06:	b083      	sub	sp, #12
	sysclk_enable_peripheral_clock(ast);
     a08:	4b10      	ldr	r3, [pc, #64]	; (a4c <ast_enable+0x48>)
     a0a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     a0c:	4b10      	ldr	r3, [pc, #64]	; (a50 <ast_enable+0x4c>)
     a0e:	79db      	ldrb	r3, [r3, #7]
     a10:	2bff      	cmp	r3, #255	; 0xff
     a12:	d01a      	beq.n	a4a <ast_enable+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a14:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a18:	fab3 f383 	clz	r3, r3
     a1c:	095b      	lsrs	r3, r3, #5
     a1e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a20:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a26:	2200      	movs	r2, #0
     a28:	4b0a      	ldr	r3, [pc, #40]	; (a54 <ast_enable+0x50>)
     a2a:	701a      	strb	r2, [r3, #0]
	return flags;
     a2c:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     a2e:	4a08      	ldr	r2, [pc, #32]	; (a50 <ast_enable+0x4c>)
     a30:	79d3      	ldrb	r3, [r2, #7]
     a32:	3301      	adds	r3, #1
     a34:	71d3      	strb	r3, [r2, #7]
	if (cpu_irq_is_enabled_flags(flags))
     a36:	b129      	cbz	r1, a44 <ast_enable+0x40>
		cpu_irq_enable();
     a38:	2201      	movs	r2, #1
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <ast_enable+0x50>)
     a3c:	701a      	strb	r2, [r3, #0]
     a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a42:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
}
     a44:	b003      	add	sp, #12
     a46:	f85d fb04 	ldr.w	pc, [sp], #4
     a4a:	e7fe      	b.n	a4a <ast_enable+0x46>
     a4c:	00001f7d 	.word	0x00001f7d
     a50:	20000cf0 	.word	0x20000cf0
     a54:	20000104 	.word	0x20000104

00000a58 <ast_write_calendar_value>:
 * \retval true AST is busy
 */
static inline bool ast_is_busy(
		Ast *ast)
{
	return (ast->AST_SR & AST_SR_BUSY) != 0;
     a58:	6883      	ldr	r3, [r0, #8]
void ast_write_calendar_value(
		Ast *ast,
		struct ast_calendar calendar)
{
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     a5a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     a5e:	d1fb      	bne.n	a58 <ast_write_calendar_value>
	}
	/* Set the new value */
	ast->AST_CALV = calendar.field;
     a60:	6541      	str	r1, [r0, #84]	; 0x54
     a62:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     a64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     a68:	d1fb      	bne.n	a62 <ast_write_calendar_value+0xa>
	}
}
     a6a:	4770      	bx	lr

00000a6c <ast_write_counter_value>:
     a6c:	6883      	ldr	r3, [r0, #8]
void ast_write_counter_value(
		Ast *ast,
		uint32_t ast_counter)
{
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     a6e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     a72:	d1fb      	bne.n	a6c <ast_write_counter_value>
	}
	/* Set the new val value */
	ast->AST_CV = ast_counter;
     a74:	6041      	str	r1, [r0, #4]
     a76:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     a7c:	d1fb      	bne.n	a76 <ast_write_counter_value+0xa>
	}
}
     a7e:	4770      	bx	lr

00000a80 <ast_set_config>:
{
     a80:	b538      	push	{r3, r4, r5, lr}
	while (ast_is_clkbusy(ast)) {
     a82:	f242 7310 	movw	r3, #10000	; 0x2710
	return (ast->AST_SR & AST_SR_CLKBUSY) != 0;
     a86:	6882      	ldr	r2, [r0, #8]
     a88:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     a8c:	d003      	beq.n	a96 <ast_set_config+0x16>
		if (--time_out == 0) {
     a8e:	3b01      	subs	r3, #1
     a90:	d1f9      	bne.n	a86 <ast_set_config+0x6>
			return 0;
     a92:	2000      	movs	r0, #0
     a94:	bd38      	pop	{r3, r4, r5, pc}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
     a96:	784b      	ldrb	r3, [r1, #1]
     a98:	021b      	lsls	r3, r3, #8
     a9a:	6403      	str	r3, [r0, #64]	; 0x40
	while (ast_is_clkbusy(ast)) {
     a9c:	f242 7310 	movw	r3, #10000	; 0x2710
     aa0:	6882      	ldr	r2, [r0, #8]
     aa2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     aa6:	d003      	beq.n	ab0 <ast_set_config+0x30>
		if (--time_out == 0) {
     aa8:	3b01      	subs	r3, #1
     aaa:	d1f9      	bne.n	aa0 <ast_set_config+0x20>
			return 0;
     aac:	2000      	movs	r0, #0
     aae:	bd38      	pop	{r3, r4, r5, pc}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
     ab0:	6c03      	ldr	r3, [r0, #64]	; 0x40
     ab2:	f043 0301 	orr.w	r3, r3, #1
     ab6:	6403      	str	r3, [r0, #64]	; 0x40
	while (ast_is_clkbusy(ast)) {
     ab8:	f242 7310 	movw	r3, #10000	; 0x2710
     abc:	6882      	ldr	r2, [r0, #8]
     abe:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     ac2:	d003      	beq.n	acc <ast_set_config+0x4c>
		if (--time_out == 0) {
     ac4:	3b01      	subs	r3, #1
     ac6:	d1f9      	bne.n	abc <ast_set_config+0x3c>
			return 0;
     ac8:	2000      	movs	r0, #0
}
     aca:	bd38      	pop	{r3, r4, r5, pc}
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     acc:	780b      	ldrb	r3, [r1, #0]
     ace:	2b01      	cmp	r3, #1
     ad0:	d01d      	beq.n	b0e <ast_set_config+0x8e>
	if (ast_conf->mode == AST_COUNTER_MODE) {
     ad2:	780b      	ldrb	r3, [r1, #0]
     ad4:	b913      	cbnz	r3, adc <ast_set_config+0x5c>
		ast->AST_CR = ast_conf->psel << AST_CR_PSEL_Pos;
     ad6:	788b      	ldrb	r3, [r1, #2]
     ad8:	041b      	lsls	r3, r3, #16
     ada:	6003      	str	r3, [r0, #0]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
     adc:	6883      	ldr	r3, [r0, #8]
	while (ast_is_busy(ast)) {
     ade:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     ae2:	d1fb      	bne.n	adc <ast_set_config+0x5c>
     ae4:	460d      	mov	r5, r1
     ae6:	4604      	mov	r4, r0
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     ae8:	780b      	ldrb	r3, [r1, #0]
     aea:	2b01      	cmp	r3, #1
     aec:	d015      	beq.n	b1a <ast_set_config+0x9a>
	if (ast_conf->mode == AST_COUNTER_MODE) {
     aee:	782b      	ldrb	r3, [r5, #0]
     af0:	b1bb      	cbz	r3, b22 <ast_set_config+0xa2>
     af2:	68a3      	ldr	r3, [r4, #8]
	while (ast_is_busy(ast)) {
     af4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     af8:	d1fb      	bne.n	af2 <ast_set_config+0x72>
	ast->AST_CR |= AST_CR_EN;
     afa:	6823      	ldr	r3, [r4, #0]
     afc:	f043 0301 	orr.w	r3, r3, #1
     b00:	6023      	str	r3, [r4, #0]
     b02:	68a3      	ldr	r3, [r4, #8]
	while (ast_is_busy(ast)) {
     b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     b08:	d1fb      	bne.n	b02 <ast_set_config+0x82>
	return 1;
     b0a:	2001      	movs	r0, #1
     b0c:	bd38      	pop	{r3, r4, r5, pc}
		ast->AST_CR = AST_CR_CAL | ast_conf->psel << AST_CR_PSEL_Pos;
     b0e:	788b      	ldrb	r3, [r1, #2]
     b10:	041b      	lsls	r3, r3, #16
     b12:	f043 0304 	orr.w	r3, r3, #4
     b16:	6003      	str	r3, [r0, #0]
     b18:	e7db      	b.n	ad2 <ast_set_config+0x52>
		ast_write_calendar_value(ast, ast_conf->calendar);
     b1a:	6889      	ldr	r1, [r1, #8]
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <ast_set_config+0xac>)
     b1e:	4798      	blx	r3
     b20:	e7e5      	b.n	aee <ast_set_config+0x6e>
		ast_write_counter_value(ast, ast_conf->counter);
     b22:	6869      	ldr	r1, [r5, #4]
     b24:	4620      	mov	r0, r4
     b26:	4b02      	ldr	r3, [pc, #8]	; (b30 <ast_set_config+0xb0>)
     b28:	4798      	blx	r3
     b2a:	e7e2      	b.n	af2 <ast_set_config+0x72>
     b2c:	00000a59 	.word	0x00000a59
     b30:	00000a6d 	.word	0x00000a6d

00000b34 <ast_write_periodic0_value>:
     b34:	6883      	ldr	r3, [r0, #8]
void ast_write_periodic0_value(
		Ast *ast,
		uint32_t pir)
{
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     b36:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     b3a:	d1fb      	bne.n	b34 <ast_write_periodic0_value>
	}
	/* Set the periodic prescaler value */
	ast->AST_PIR0 = pir;
     b3c:	6301      	str	r1, [r0, #48]	; 0x30
     b3e:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     b40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     b44:	d1fb      	bne.n	b3e <ast_write_periodic0_value+0xa>
	}
}
     b46:	4770      	bx	lr

00000b48 <ast_enable_interrupt>:
		Ast *ast,
		ast_interrupt_source_t source)
{
	uint32_t cnt = 0;
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     b48:	4b16      	ldr	r3, [pc, #88]	; (ba4 <ast_enable_interrupt+0x5c>)
     b4a:	6882      	ldr	r2, [r0, #8]
     b4c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
     b50:	d003      	beq.n	b5a <ast_enable_interrupt+0x12>
		cnt++;
		if(cnt >= 10000000) {
     b52:	3b01      	subs	r3, #1
     b54:	d1f9      	bne.n	b4a <ast_enable_interrupt+0x2>
			return 1;
     b56:	2001      	movs	r0, #1
     b58:	4770      	bx	lr
		}
	}
	
	cnt = 0;

	switch (source) {
     b5a:	2904      	cmp	r1, #4
     b5c:	d807      	bhi.n	b6e <ast_enable_interrupt+0x26>
     b5e:	e8df f001 	tbb	[pc, r1]
     b62:	0f03      	.short	0x0f03
     b64:	1613      	.short	0x1613
     b66:	1a          	.byte	0x1a
     b67:	00          	.byte	0x00
	case AST_INTERRUPT_ALARM:
		ast->AST_IER = AST_IER_ALARM0_1;
     b68:	f44f 7380 	mov.w	r3, #256	; 0x100
     b6c:	6103      	str	r3, [r0, #16]
	while (ast_is_busy(ast)) {
     b6e:	4b0d      	ldr	r3, [pc, #52]	; (ba4 <ast_enable_interrupt+0x5c>)
     b70:	6882      	ldr	r2, [r0, #8]
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     b72:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
     b76:	d012      	beq.n	b9e <ast_enable_interrupt+0x56>
		cnt++;
		if(cnt >= 10000000) {
     b78:	3b01      	subs	r3, #1
     b7a:	d1f9      	bne.n	b70 <ast_enable_interrupt+0x28>
			return 2;
     b7c:	2002      	movs	r0, #2
		}
	}
	return 0;
}
     b7e:	4770      	bx	lr
		ast->AST_IER = AST_IER_PER0_1;
     b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     b84:	6103      	str	r3, [r0, #16]
		break;
     b86:	e7f2      	b.n	b6e <ast_enable_interrupt+0x26>
		ast->AST_IER = AST_IER_OVF_1;
     b88:	2301      	movs	r3, #1
     b8a:	6103      	str	r3, [r0, #16]
		break;
     b8c:	e7ef      	b.n	b6e <ast_enable_interrupt+0x26>
		ast->AST_IER = AST_IER_READY_1;
     b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     b92:	6103      	str	r3, [r0, #16]
		break;
     b94:	e7eb      	b.n	b6e <ast_enable_interrupt+0x26>
		ast->AST_IER = AST_IER_CLKRDY_1;
     b96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     b9a:	6103      	str	r3, [r0, #16]
		break;
     b9c:	e7e7      	b.n	b6e <ast_enable_interrupt+0x26>
	return 0;
     b9e:	2000      	movs	r0, #0
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop
     ba4:	00989680 	.word	0x00989680

00000ba8 <ast_clear_interrupt_flag>:
     ba8:	6883      	ldr	r3, [r0, #8]
void ast_clear_interrupt_flag(
		Ast *ast,
		ast_interrupt_source_t source)
{
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     baa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     bae:	d1fb      	bne.n	ba8 <ast_clear_interrupt_flag>
	}

	switch (source) {
     bb0:	2904      	cmp	r1, #4
     bb2:	d807      	bhi.n	bc4 <ast_clear_interrupt_flag+0x1c>
     bb4:	e8df f001 	tbb	[pc, r1]
     bb8:	120f0b03 	.word	0x120f0b03
     bbc:	16          	.byte	0x16
     bbd:	00          	.byte	0x00
	case AST_INTERRUPT_ALARM:
		ast->AST_SCR = AST_SCR_ALARM0;
     bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
     bc2:	60c3      	str	r3, [r0, #12]
     bc4:	6883      	ldr	r3, [r0, #8]
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     bc6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     bca:	d1fb      	bne.n	bc4 <ast_clear_interrupt_flag+0x1c>
	}
}
     bcc:	4770      	bx	lr
		ast->AST_SCR = AST_SCR_PER0;
     bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     bd2:	60c3      	str	r3, [r0, #12]
		break;
     bd4:	e7f6      	b.n	bc4 <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_OVF;
     bd6:	2301      	movs	r3, #1
     bd8:	60c3      	str	r3, [r0, #12]
		break;
     bda:	e7f3      	b.n	bc4 <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_READY;
     bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     be0:	60c3      	str	r3, [r0, #12]
		break;
     be2:	e7ef      	b.n	bc4 <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_CLKRDY;
     be4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     be8:	60c3      	str	r3, [r0, #12]
		break;
     bea:	e7eb      	b.n	bc4 <ast_clear_interrupt_flag+0x1c>

00000bec <ast_set_callback>:
		Ast *ast,
		ast_interrupt_source_t source,
		ast_callback_t callback,
		uint8_t irq_line,
		uint8_t irq_level)
{
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	f89d 4018 	ldrb.w	r4, [sp, #24]
	ast_callback_pointer[source] = callback;
     bf2:	4d11      	ldr	r5, [pc, #68]	; (c38 <ast_set_callback+0x4c>)
     bf4:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
     bf8:	b25a      	sxtb	r2, r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     bfa:	2a00      	cmp	r2, #0
     bfc:	db14      	blt.n	c28 <ast_set_callback+0x3c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bfe:	0956      	lsrs	r6, r2, #5
     c00:	f003 031f 	and.w	r3, r3, #31
     c04:	2501      	movs	r5, #1
     c06:	fa05 f303 	lsl.w	r3, r5, r3
     c0a:	4d0c      	ldr	r5, [pc, #48]	; (c3c <ast_set_callback+0x50>)
     c0c:	f106 0760 	add.w	r7, r6, #96	; 0x60
     c10:	f845 3027 	str.w	r3, [r5, r7, lsl #2]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c14:	0124      	lsls	r4, r4, #4
     c16:	b2e4      	uxtb	r4, r4
     c18:	442a      	add	r2, r5
     c1a:	f882 4300 	strb.w	r4, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c1e:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	return ast_enable_interrupt(ast, source);
     c22:	4b07      	ldr	r3, [pc, #28]	; (c40 <ast_set_callback+0x54>)
     c24:	4798      	blx	r3
}
     c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c28:	f003 030f 	and.w	r3, r3, #15
     c2c:	0124      	lsls	r4, r4, #4
     c2e:	b2e4      	uxtb	r4, r4
     c30:	4a04      	ldr	r2, [pc, #16]	; (c44 <ast_set_callback+0x58>)
     c32:	54d4      	strb	r4, [r2, r3]
     c34:	e7f5      	b.n	c22 <ast_set_callback+0x36>
     c36:	bf00      	nop
     c38:	20000d00 	.word	0x20000d00
     c3c:	e000e100 	.word	0xe000e100
     c40:	00000b49 	.word	0x00000b49
     c44:	e000ed14 	.word	0xe000ed14

00000c48 <AST_PER_Handler>:
/**
 * \brief Interrupt handler for AST periodic.
 */
#if defined(AST_PER_ENABLE) || defined(__DOXYGEN__)
void AST_PER_Handler(void)
{
     c48:	b508      	push	{r3, lr}
	ast_callback_pointer[AST_INTERRUPT_PER]();
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <AST_PER_Handler+0xc>)
     c4c:	685b      	ldr	r3, [r3, #4]
     c4e:	4798      	blx	r3
     c50:	bd08      	pop	{r3, pc}
     c52:	bf00      	nop
     c54:	20000d00 	.word	0x20000d00

00000c58 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
     c58:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
     c5a:	4601      	mov	r1, r0
     c5c:	bb28      	cbnz	r0, caa <udd_sleep_mode+0x52>
     c5e:	4b24      	ldr	r3, [pc, #144]	; (cf0 <udd_sleep_mode+0x98>)
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	b91b      	cbnz	r3, c6c <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
     c64:	4b22      	ldr	r3, [pc, #136]	; (cf0 <udd_sleep_mode+0x98>)
     c66:	7019      	strb	r1, [r3, #0]
}
     c68:	b002      	add	sp, #8
     c6a:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     c6c:	4b21      	ldr	r3, [pc, #132]	; (cf4 <udd_sleep_mode+0x9c>)
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	b903      	cbnz	r3, c74 <udd_sleep_mode+0x1c>
     c72:	e7fe      	b.n	c72 <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c78:	fab3 f383 	clz	r3, r3
     c7c:	095b      	lsrs	r3, r3, #5
     c7e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c80:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c86:	2200      	movs	r2, #0
     c88:	4b1b      	ldr	r3, [pc, #108]	; (cf8 <udd_sleep_mode+0xa0>)
     c8a:	701a      	strb	r2, [r3, #0]
	return flags;
     c8c:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     c8e:	4a19      	ldr	r2, [pc, #100]	; (cf4 <udd_sleep_mode+0x9c>)
     c90:	7813      	ldrb	r3, [r2, #0]
     c92:	3b01      	subs	r3, #1
     c94:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     c96:	2800      	cmp	r0, #0
     c98:	d0e4      	beq.n	c64 <udd_sleep_mode+0xc>
		cpu_irq_enable();
     c9a:	2201      	movs	r2, #1
     c9c:	4b16      	ldr	r3, [pc, #88]	; (cf8 <udd_sleep_mode+0xa0>)
     c9e:	701a      	strb	r2, [r3, #0]
     ca0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ca4:	b662      	cpsie	i
     ca6:	e7dd      	b.n	c64 <udd_sleep_mode+0xc>
     ca8:	e7fe      	b.n	ca8 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
     caa:	4b11      	ldr	r3, [pc, #68]	; (cf0 <udd_sleep_mode+0x98>)
     cac:	781b      	ldrb	r3, [r3, #0]
     cae:	2b00      	cmp	r3, #0
     cb0:	d1d8      	bne.n	c64 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
     cb2:	4b10      	ldr	r3, [pc, #64]	; (cf4 <udd_sleep_mode+0x9c>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2bff      	cmp	r3, #255	; 0xff
     cb8:	d0f6      	beq.n	ca8 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     cba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     cbe:	fab3 f383 	clz	r3, r3
     cc2:	095b      	lsrs	r3, r3, #5
     cc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     cc6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     cc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     ccc:	2200      	movs	r2, #0
     cce:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <udd_sleep_mode+0xa0>)
     cd0:	701a      	strb	r2, [r3, #0]
	return flags;
     cd2:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
     cd4:	4a07      	ldr	r2, [pc, #28]	; (cf4 <udd_sleep_mode+0x9c>)
     cd6:	7813      	ldrb	r3, [r2, #0]
     cd8:	3301      	adds	r3, #1
     cda:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     cdc:	2800      	cmp	r0, #0
     cde:	d0c1      	beq.n	c64 <udd_sleep_mode+0xc>
		cpu_irq_enable();
     ce0:	2201      	movs	r2, #1
     ce2:	4b05      	ldr	r3, [pc, #20]	; (cf8 <udd_sleep_mode+0xa0>)
     ce4:	701a      	strb	r2, [r3, #0]
     ce6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     cea:	b662      	cpsie	i
     cec:	e7ba      	b.n	c64 <udd_sleep_mode+0xc>
     cee:	bf00      	nop
     cf0:	20000b49 	.word	0x20000b49
     cf4:	20000cf0 	.word	0x20000cf0
     cf8:	20000104 	.word	0x20000104

00000cfc <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
     cfc:	2201      	movs	r2, #1
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <udd_ctrl_init+0x1c>)
     d00:	601a      	str	r2, [r3, #0]
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
     d02:	2202      	movs	r2, #2
     d04:	3bc0      	subs	r3, #192	; 0xc0
     d06:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
     d08:	4a04      	ldr	r2, [pc, #16]	; (d1c <udd_ctrl_init+0x20>)
     d0a:	2300      	movs	r3, #0
     d0c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     d0e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
     d10:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
     d12:	4a03      	ldr	r2, [pc, #12]	; (d20 <udd_ctrl_init+0x24>)
     d14:	7013      	strb	r3, [r2, #0]
     d16:	4770      	bx	lr
     d18:	400a5220 	.word	0x400a5220
     d1c:	20000d94 	.word	0x20000d94
     d20:	20000b4e 	.word	0x20000b4e

00000d24 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
     d24:	2205      	movs	r2, #5
     d26:	4b03      	ldr	r3, [pc, #12]	; (d34 <udd_ctrl_stall_data+0x10>)
     d28:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
     d2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     d2e:	4b02      	ldr	r3, [pc, #8]	; (d38 <udd_ctrl_stall_data+0x14>)
     d30:	601a      	str	r2, [r3, #0]
     d32:	4770      	bx	lr
     d34:	20000b4e 	.word	0x20000b4e
     d38:	400a51f0 	.word	0x400a51f0

00000d3c <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
     d3c:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
     d3e:	2203      	movs	r2, #3
     d40:	4b12      	ldr	r3, [pc, #72]	; (d8c <udd_ctrl_send_zlp_in+0x50>)
     d42:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
     d44:	4b12      	ldr	r3, [pc, #72]	; (d90 <udd_ctrl_send_zlp_in+0x54>)
     d46:	685a      	ldr	r2, [r3, #4]
     d48:	f36f 020e 	bfc	r2, #0, #15
     d4c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d4e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     d52:	fab3 f383 	clz	r3, r3
     d56:	095b      	lsrs	r3, r3, #5
     d58:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     d5a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     d5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     d60:	2200      	movs	r2, #0
     d62:	4b0c      	ldr	r3, [pc, #48]	; (d94 <udd_ctrl_send_zlp_in+0x58>)
     d64:	701a      	strb	r2, [r3, #0]
	return flags;
     d66:	9801      	ldr	r0, [sp, #4]

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
     d68:	490b      	ldr	r1, [pc, #44]	; (d98 <udd_ctrl_send_zlp_in+0x5c>)
     d6a:	2201      	movs	r2, #1
     d6c:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
     d6e:	4b0b      	ldr	r3, [pc, #44]	; (d9c <udd_ctrl_send_zlp_in+0x60>)
     d70:	601a      	str	r2, [r3, #0]

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
     d72:	2208      	movs	r2, #8
     d74:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
     d76:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
     d78:	b128      	cbz	r0, d86 <udd_ctrl_send_zlp_in+0x4a>
		cpu_irq_enable();
     d7a:	2201      	movs	r2, #1
     d7c:	4b05      	ldr	r3, [pc, #20]	; (d94 <udd_ctrl_send_zlp_in+0x58>)
     d7e:	701a      	strb	r2, [r3, #0]
     d80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d84:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
     d86:	b002      	add	sp, #8
     d88:	4770      	bx	lr
     d8a:	bf00      	nop
     d8c:	20000b4e 	.word	0x20000b4e
     d90:	20000b80 	.word	0x20000b80
     d94:	20000104 	.word	0x20000104
     d98:	400a5160 	.word	0x400a5160
     d9c:	400a51f0 	.word	0x400a51f0

00000da0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
     da0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <udd_ctrl_endofrequest+0xc>)
     da4:	691b      	ldr	r3, [r3, #16]
     da6:	b103      	cbz	r3, daa <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	20000d94 	.word	0x20000d94

00000db0 <udd_ctrl_in_sent>:
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     db4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     db8:	fab3 f383 	clz	r3, r3
     dbc:	095b      	lsrs	r3, r3, #5
     dbe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     dc0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     dc2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     dc6:	2200      	movs	r2, #0
     dc8:	4b4c      	ldr	r3, [pc, #304]	; (efc <udd_ctrl_in_sent+0x14c>)
     dca:	701a      	strb	r2, [r3, #0]
	return flags;
     dcc:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
     dce:	2101      	movs	r1, #1
     dd0:	4a4b      	ldr	r2, [pc, #300]	; (f00 <udd_ctrl_in_sent+0x150>)
     dd2:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     dd4:	b123      	cbz	r3, de0 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
     dd6:	4b49      	ldr	r3, [pc, #292]	; (efc <udd_ctrl_in_sent+0x14c>)
     dd8:	7019      	strb	r1, [r3, #0]
     dda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     dde:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
     de0:	4b48      	ldr	r3, [pc, #288]	; (f04 <udd_ctrl_in_sent+0x154>)
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	2b03      	cmp	r3, #3
     de6:	d043      	beq.n	e70 <udd_ctrl_in_sent+0xc0>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
     de8:	4b47      	ldr	r3, [pc, #284]	; (f08 <udd_ctrl_in_sent+0x158>)
     dea:	881b      	ldrh	r3, [r3, #0]
     dec:	4a47      	ldr	r2, [pc, #284]	; (f0c <udd_ctrl_in_sent+0x15c>)
     dee:	8994      	ldrh	r4, [r2, #12]
     df0:	1ae4      	subs	r4, r4, r3
     df2:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
     df4:	b9c4      	cbnz	r4, e28 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
     df6:	4a46      	ldr	r2, [pc, #280]	; (f10 <udd_ctrl_in_sent+0x160>)
     df8:	8811      	ldrh	r1, [r2, #0]
     dfa:	440b      	add	r3, r1
     dfc:	b29b      	uxth	r3, r3
     dfe:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
     e00:	4a42      	ldr	r2, [pc, #264]	; (f0c <udd_ctrl_in_sent+0x15c>)
     e02:	88d2      	ldrh	r2, [r2, #6]
     e04:	429a      	cmp	r2, r3
     e06:	d038      	beq.n	e7a <udd_ctrl_in_sent+0xca>
				|| b_shortpacket) {
     e08:	4b42      	ldr	r3, [pc, #264]	; (f14 <udd_ctrl_in_sent+0x164>)
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d134      	bne.n	e7a <udd_ctrl_in_sent+0xca>
		if ((!udd_g_ctrlreq.over_under_run)
     e10:	4b3e      	ldr	r3, [pc, #248]	; (f0c <udd_ctrl_in_sent+0x15c>)
     e12:	695b      	ldr	r3, [r3, #20]
     e14:	2b00      	cmp	r3, #0
     e16:	d04e      	beq.n	eb6 <udd_ctrl_in_sent+0x106>
				|| (!udd_g_ctrlreq.over_under_run())) {
     e18:	4798      	blx	r3
     e1a:	2800      	cmp	r0, #0
     e1c:	d04b      	beq.n	eb6 <udd_ctrl_in_sent+0x106>
			udd_ctrl_payload_nb_trans = 0;
     e1e:	2200      	movs	r2, #0
     e20:	4b39      	ldr	r3, [pc, #228]	; (f08 <udd_ctrl_in_sent+0x158>)
     e22:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
     e24:	4b39      	ldr	r3, [pc, #228]	; (f0c <udd_ctrl_in_sent+0x15c>)
     e26:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
     e28:	2c07      	cmp	r4, #7
     e2a:	d944      	bls.n	eb6 <udd_ctrl_in_sent+0x106>
		b_shortpacket = false;
     e2c:	2200      	movs	r2, #0
     e2e:	4b39      	ldr	r3, [pc, #228]	; (f14 <udd_ctrl_in_sent+0x164>)
     e30:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
     e32:	2408      	movs	r4, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e34:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     e38:	fab3 f383 	clz	r3, r3
     e3c:	095b      	lsrs	r3, r3, #5
     e3e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     e40:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     e42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     e46:	2200      	movs	r2, #0
     e48:	4b2c      	ldr	r3, [pc, #176]	; (efc <udd_ctrl_in_sent+0x14c>)
     e4a:	701a      	strb	r2, [r3, #0]
	return flags;
     e4c:	9d02      	ldr	r5, [sp, #8]
	if (Is_udd_out_received(0)) {
     e4e:	4b32      	ldr	r3, [pc, #200]	; (f18 <udd_ctrl_in_sent+0x168>)
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	f013 0f02 	tst.w	r3, #2
     e56:	d032      	beq.n	ebe <udd_ctrl_in_sent+0x10e>
	if (cpu_irq_is_enabled_flags(flags))
     e58:	b12d      	cbz	r5, e66 <udd_ctrl_in_sent+0xb6>
		cpu_irq_enable();
     e5a:	2201      	movs	r2, #1
     e5c:	4b27      	ldr	r3, [pc, #156]	; (efc <udd_ctrl_in_sent+0x14c>)
     e5e:	701a      	strb	r2, [r3, #0]
     e60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e64:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     e66:	2204      	movs	r2, #4
     e68:	4b26      	ldr	r3, [pc, #152]	; (f04 <udd_ctrl_in_sent+0x154>)
     e6a:	701a      	strb	r2, [r3, #0]
}
     e6c:	b005      	add	sp, #20
     e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		udd_ctrl_endofrequest();
     e70:	4b2a      	ldr	r3, [pc, #168]	; (f1c <udd_ctrl_in_sent+0x16c>)
     e72:	4798      	blx	r3
		udd_ctrl_init();
     e74:	4b2a      	ldr	r3, [pc, #168]	; (f20 <udd_ctrl_in_sent+0x170>)
     e76:	4798      	blx	r3
		return;
     e78:	e7f8      	b.n	e6c <udd_ctrl_in_sent+0xbc>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     e7a:	2204      	movs	r2, #4
     e7c:	4b21      	ldr	r3, [pc, #132]	; (f04 <udd_ctrl_in_sent+0x154>)
     e7e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e80:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     e84:	fab3 f383 	clz	r3, r3
     e88:	095b      	lsrs	r3, r3, #5
     e8a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     e8c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     e8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     e92:	2200      	movs	r2, #0
     e94:	4b19      	ldr	r3, [pc, #100]	; (efc <udd_ctrl_in_sent+0x14c>)
     e96:	701a      	strb	r2, [r3, #0]
	return flags;
     e98:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
     e9a:	2310      	movs	r3, #16
     e9c:	4921      	ldr	r1, [pc, #132]	; (f24 <udd_ctrl_in_sent+0x174>)
     e9e:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
     ea0:	3190      	adds	r1, #144	; 0x90
     ea2:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
     ea4:	2a00      	cmp	r2, #0
     ea6:	d0e1      	beq.n	e6c <udd_ctrl_in_sent+0xbc>
		cpu_irq_enable();
     ea8:	2201      	movs	r2, #1
     eaa:	4b14      	ldr	r3, [pc, #80]	; (efc <udd_ctrl_in_sent+0x14c>)
     eac:	701a      	strb	r2, [r3, #0]
     eae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     eb2:	b662      	cpsie	i
     eb4:	e7da      	b.n	e6c <udd_ctrl_in_sent+0xbc>
		b_shortpacket = true;
     eb6:	2201      	movs	r2, #1
     eb8:	4b16      	ldr	r3, [pc, #88]	; (f14 <udd_ctrl_in_sent+0x164>)
     eba:	701a      	strb	r2, [r3, #0]
     ebc:	e7ba      	b.n	e34 <udd_ctrl_in_sent+0x84>
	memcpy(udd_ctrl_buffer,
     ebe:	4f12      	ldr	r7, [pc, #72]	; (f08 <udd_ctrl_in_sent+0x158>)
     ec0:	883e      	ldrh	r6, [r7, #0]
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
     ec2:	4b12      	ldr	r3, [pc, #72]	; (f0c <udd_ctrl_in_sent+0x15c>)
     ec4:	6899      	ldr	r1, [r3, #8]
	memcpy(udd_ctrl_buffer,
     ec6:	4622      	mov	r2, r4
     ec8:	4431      	add	r1, r6
     eca:	4817      	ldr	r0, [pc, #92]	; (f28 <udd_ctrl_in_sent+0x178>)
     ecc:	4b17      	ldr	r3, [pc, #92]	; (f2c <udd_ctrl_in_sent+0x17c>)
     ece:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_remain;
     ed0:	4426      	add	r6, r4
     ed2:	803e      	strh	r6, [r7, #0]
	udd_udesc_set_buf0_ctn(0, nb_remain);
     ed4:	4b16      	ldr	r3, [pc, #88]	; (f30 <udd_ctrl_in_sent+0x180>)
     ed6:	685a      	ldr	r2, [r3, #4]
     ed8:	f364 020e 	bfi	r2, r4, #0, #15
     edc:	605a      	str	r2, [r3, #4]
	udd_ack_in_send(0);
     ede:	2301      	movs	r3, #1
     ee0:	4a10      	ldr	r2, [pc, #64]	; (f24 <udd_ctrl_in_sent+0x174>)
     ee2:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
     ee4:	3290      	adds	r2, #144	; 0x90
     ee6:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     ee8:	2d00      	cmp	r5, #0
     eea:	d0bf      	beq.n	e6c <udd_ctrl_in_sent+0xbc>
		cpu_irq_enable();
     eec:	461a      	mov	r2, r3
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <udd_ctrl_in_sent+0x14c>)
     ef0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     ef2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ef6:	b662      	cpsie	i
     ef8:	e7b8      	b.n	e6c <udd_ctrl_in_sent+0xbc>
     efa:	bf00      	nop
     efc:	20000104 	.word	0x20000104
     f00:	400a5220 	.word	0x400a5220
     f04:	20000b4e 	.word	0x20000b4e
     f08:	20000b4a 	.word	0x20000b4a
     f0c:	20000d94 	.word	0x20000d94
     f10:	20000b4c 	.word	0x20000b4c
     f14:	20000b48 	.word	0x20000b48
     f18:	400a5130 	.word	0x400a5130
     f1c:	00000da1 	.word	0x00000da1
     f20:	00000cfd 	.word	0x00000cfd
     f24:	400a5160 	.word	0x400a5160
     f28:	20000dac 	.word	0x20000dac
     f2c:	000034d5 	.word	0x000034d5
     f30:	20000b80 	.word	0x20000b80

00000f34 <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
     f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f38:	b085      	sub	sp, #20
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
     f3a:	f000 050f 	and.w	r5, r0, #15
	ep_size = udd_get_endpoint_size(ep_num);
     f3e:	4bc5      	ldr	r3, [pc, #788]	; (1254 <__stack_size__+0x254>)
     f40:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
     f44:	1e6c      	subs	r4, r5, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f46:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     f4a:	fab3 f383 	clz	r3, r3
     f4e:	095b      	lsrs	r3, r3, #5
     f50:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     f52:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     f54:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     f58:	2200      	movs	r2, #0
     f5a:	4bbf      	ldr	r3, [pc, #764]	; (1258 <__stack_size__+0x258>)
     f5c:	701a      	strb	r2, [r3, #0]
	return flags;
     f5e:	9b01      	ldr	r3, [sp, #4]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
     f60:	f44f 5680 	mov.w	r6, #4096	; 0x1000
     f64:	40ae      	lsls	r6, r5
     f66:	4abd      	ldr	r2, [pc, #756]	; (125c <__stack_size__+0x25c>)
     f68:	6156      	str	r6, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
     f6a:	b12b      	cbz	r3, f78 <udd_ep_trans_done+0x44>
		cpu_irq_enable();
     f6c:	2201      	movs	r2, #1
     f6e:	4bba      	ldr	r3, [pc, #744]	; (1258 <__stack_size__+0x258>)
     f70:	701a      	strb	r2, [r3, #0]
     f72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f76:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
     f78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     f7c:	4ab8      	ldr	r2, [pc, #736]	; (1260 <__stack_size__+0x260>)
     f7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f82:	7c1b      	ldrb	r3, [r3, #16]
     f84:	f013 0f01 	tst.w	r3, #1
     f88:	d049      	beq.n	101e <__stack_size__+0x1e>
     f8a:	4607      	mov	r7, r0
	ep_size = udd_get_endpoint_size(ep_num);
     f8c:	f3c1 1102 	ubfx	r1, r1, #4, #3
     f90:	2208      	movs	r2, #8
     f92:	fa02 fa01 	lsl.w	sl, r2, r1
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
     f96:	f010 0f80 	tst.w	r0, #128	; 0x80
     f9a:	d143      	bne.n	1024 <__stack_size__+0x24>
			cpu_irq_restore(flags);
			return;
		}
	} else {
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
     f9c:	ea4f 0945 	mov.w	r9, r5, lsl #1
     fa0:	4ab0      	ldr	r2, [pc, #704]	; (1264 <__stack_size__+0x264>)
     fa2:	eb02 1245 	add.w	r2, r2, r5, lsl #5
     fa6:	6852      	ldr	r2, [r2, #4]
     fa8:	f3c2 080e 	ubfx	r8, r2, #0, #15

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
     fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     fb0:	49ad      	ldr	r1, [pc, #692]	; (1268 <__stack_size__+0x268>)
     fb2:	f841 2025 	str.w	r2, [r1, r5, lsl #2]

		// Ack interrupt
		udd_ack_out_received(ep_num);
     fb6:	2102      	movs	r1, #2
     fb8:	4aac      	ldr	r2, [pc, #688]	; (126c <__stack_size__+0x26c>)
     fba:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
		udd_ack_fifocon(ep_num);
     fbe:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 1270 <__stack_size__+0x270>
     fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     fc6:	f84b 2025 	str.w	r2, [fp, r5, lsl #2]

		dbg_print("o%d ", nb_trans);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
     fca:	f013 0f04 	tst.w	r3, #4
     fce:	f040 80c9 	bne.w	1164 <__stack_size__+0x164>
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
     fd2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     fd6:	4aa2      	ldr	r2, [pc, #648]	; (1260 <__stack_size__+0x260>)
     fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fdc:	68da      	ldr	r2, [r3, #12]
     fde:	4442      	add	r2, r8
     fe0:	60da      	str	r2, [r3, #12]
		if (ptr_job->nb_trans > ptr_job->buf_size) {
     fe2:	689b      	ldr	r3, [r3, #8]
     fe4:	429a      	cmp	r2, r3
     fe6:	f240 80d4 	bls.w	1192 <__stack_size__+0x192>
			ptr_job->nb_trans = ptr_job->buf_size;
     fea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     fee:	499c      	ldr	r1, [pc, #624]	; (1260 <__stack_size__+0x260>)
     ff0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     ff4:	60d3      	str	r3, [r2, #12]
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
     ff6:	4b9b      	ldr	r3, [pc, #620]	; (1264 <__stack_size__+0x264>)
     ff8:	eb03 1909 	add.w	r9, r3, r9, lsl #4
     ffc:	f8d9 3004 	ldr.w	r3, [r9, #4]
		}
	}

	// Job complete then call callback
	dbg_print("done%x ", ep);
	ptr_job->busy = false;
    1000:	4a97      	ldr	r2, [pc, #604]	; (1260 <__stack_size__+0x260>)
    1002:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1006:	009b      	lsls	r3, r3, #2
    1008:	18d1      	adds	r1, r2, r3
    100a:	7c08      	ldrb	r0, [r1, #16]
    100c:	f36f 0000 	bfc	r0, #0, #1
    1010:	7408      	strb	r0, [r1, #16]
	if (NULL != ptr_job->call_trans) {
    1012:	58d5      	ldr	r5, [r2, r3]
    1014:	b11d      	cbz	r5, 101e <__stack_size__+0x1e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1016:	463a      	mov	r2, r7
    1018:	68c9      	ldr	r1, [r1, #12]
    101a:	2000      	movs	r0, #0
    101c:	47a8      	blx	r5
	}
	return;
}
    101e:	b005      	add	sp, #20
    1020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nb_trans = udd_udesc_get_buf0_size(ep_num);
    1024:	0069      	lsls	r1, r5, #1
    1026:	4b8f      	ldr	r3, [pc, #572]	; (1264 <__stack_size__+0x264>)
    1028:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    102c:	685a      	ldr	r2, [r3, #4]
    102e:	f3c2 4e0e 	ubfx	lr, r2, #16, #15
		udd_enable_busy_bank0(ep_num);
    1032:	488d      	ldr	r0, [pc, #564]	; (1268 <__stack_size__+0x268>)
    1034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1038:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
		udd_ack_in_send(ep_num);
    103c:	2201      	movs	r2, #1
    103e:	4b8b      	ldr	r3, [pc, #556]	; (126c <__stack_size__+0x26c>)
    1040:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
		if (0 == nb_trans) {
    1044:	f1be 0f00 	cmp.w	lr, #0
    1048:	d10b      	bne.n	1062 <__stack_size__+0x62>
			if (0 == udd_nb_busy_bank(ep_num)) {
    104a:	3b30      	subs	r3, #48	; 0x30
    104c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    1050:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1054:	d105      	bne.n	1062 <__stack_size__+0x62>
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
    1056:	4b83      	ldr	r3, [pc, #524]	; (1264 <__stack_size__+0x264>)
    1058:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    105c:	685a      	ldr	r2, [r3, #4]
    105e:	f3c2 0e0e 	ubfx	lr, r2, #0, #15
		ptr_job->nb_trans += nb_trans;
    1062:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1066:	4a7e      	ldr	r2, [pc, #504]	; (1260 <__stack_size__+0x260>)
    1068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    106c:	68da      	ldr	r2, [r3, #12]
    106e:	4472      	add	r2, lr
    1070:	60da      	str	r2, [r3, #12]
		if ((ptr_job->nb_trans != ptr_job->buf_size)
    1072:	689b      	ldr	r3, [r3, #8]
    1074:	429a      	cmp	r2, r3
    1076:	d056      	beq.n	1126 <__stack_size__+0x126>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1078:	1a9b      	subs	r3, r3, r2
    107a:	b29b      	uxth	r3, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    107c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1080:	d15e      	bne.n	1140 <__stack_size__+0x140>
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
    1082:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    1086:	4a76      	ldr	r2, [pc, #472]	; (1260 <__stack_size__+0x260>)
    1088:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    108c:	7c3a      	ldrb	r2, [r7, #16]
    108e:	f3c2 0840 	ubfx	r8, r2, #1, #1
    1092:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 1264 <__stack_size__+0x264>
    1096:	eb0e 1e01 	add.w	lr, lr, r1, lsl #4
    109a:	f8de c004 	ldr.w	ip, [lr, #4]
    109e:	f368 7cdf 	bfi	ip, r8, #31, #1
    10a2:	f8ce c004 	str.w	ip, [lr, #4]
				ptr_job->b_shortpacket = false; // No need to request another ZLP
    10a6:	f36f 0241 	bfc	r2, #1, #1
    10aa:	743a      	strb	r2, [r7, #16]
			udd_udesc_set_buf0_ctn(ep_num, next_trans);
    10ac:	4f6d      	ldr	r7, [pc, #436]	; (1264 <__stack_size__+0x264>)
    10ae:	0109      	lsls	r1, r1, #4
    10b0:	187a      	adds	r2, r7, r1
    10b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
    10b6:	f363 0e0e 	bfi	lr, r3, #0, #15
    10ba:	f8c2 e004 	str.w	lr, [r2, #4]
			udd_udesc_rst_buf0_size(ep_num);
    10be:	6853      	ldr	r3, [r2, #4]
    10c0:	f36f 431e 	bfc	r3, #16, #15
    10c4:	6053      	str	r3, [r2, #4]
			udd_udesc_set_buf0_addr(ep_num,
    10c6:	4b66      	ldr	r3, [pc, #408]	; (1260 <__stack_size__+0x260>)
    10c8:	00a2      	lsls	r2, r4, #2
    10ca:	eb02 0e04 	add.w	lr, r2, r4
    10ce:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    10d2:	f8de 2004 	ldr.w	r2, [lr, #4]
    10d6:	f8de 300c 	ldr.w	r3, [lr, #12]
    10da:	4413      	add	r3, r2
    10dc:	507b      	str	r3, [r7, r1]
			udd_ack_fifocon(ep_num);
    10de:	4b64      	ldr	r3, [pc, #400]	; (1270 <__stack_size__+0x270>)
    10e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    10e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
			udd_disable_busy_bank0(ep_num);
    10e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    10ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    10f4:	fab3 f383 	clz	r3, r3
    10f8:	095b      	lsrs	r3, r3, #5
    10fa:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    10fc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    10fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1102:	2200      	movs	r2, #0
    1104:	4b54      	ldr	r3, [pc, #336]	; (1258 <__stack_size__+0x258>)
    1106:	701a      	strb	r2, [r3, #0]
	return flags;
    1108:	9b02      	ldr	r3, [sp, #8]
			udd_enable_in_send_interrupt(ep_num);
    110a:	2201      	movs	r2, #1
    110c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
			udd_enable_endpoint_interrupt(ep_num);
    1110:	4a52      	ldr	r2, [pc, #328]	; (125c <__stack_size__+0x25c>)
    1112:	6196      	str	r6, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
    1114:	2b00      	cmp	r3, #0
    1116:	d082      	beq.n	101e <__stack_size__+0x1e>
		cpu_irq_enable();
    1118:	2201      	movs	r2, #1
    111a:	4b4f      	ldr	r3, [pc, #316]	; (1258 <__stack_size__+0x258>)
    111c:	701a      	strb	r2, [r3, #0]
    111e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1122:	b662      	cpsie	i
    1124:	e77b      	b.n	101e <__stack_size__+0x1e>
				|| ptr_job->b_shortpacket) {
    1126:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
    112a:	f8df c134 	ldr.w	ip, [pc, #308]	; 1260 <__stack_size__+0x260>
    112e:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    1132:	f89e e010 	ldrb.w	lr, [lr, #16]
    1136:	f01e 0f02 	tst.w	lr, #2
    113a:	f43f af61 	beq.w	1000 <__stack_size__>
    113e:	e79b      	b.n	1078 <__stack_size__+0x78>
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1140:	fa1f f78a 	uxth.w	r7, sl
    1144:	f647 73ff 	movw	r3, #32767	; 0x7fff
    1148:	fb93 f2f7 	sdiv	r2, r3, r7
    114c:	fb07 3212 	mls	r2, r7, r2, r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1150:	1a9b      	subs	r3, r3, r2
    1152:	b29b      	uxth	r3, r3
				udd_udesc_set_buf0_autozlp(ep_num, false);
    1154:	4a43      	ldr	r2, [pc, #268]	; (1264 <__stack_size__+0x264>)
    1156:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    115a:	6857      	ldr	r7, [r2, #4]
    115c:	f36f 77df 	bfc	r7, #31, #1
    1160:	6057      	str	r7, [r2, #4]
    1162:	e7a3      	b.n	10ac <__stack_size__+0xac>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    1164:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1168:	4a3d      	ldr	r2, [pc, #244]	; (1260 <__stack_size__+0x260>)
    116a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    116e:	f8d3 e004 	ldr.w	lr, [r3, #4]
    1172:	68d8      	ldr	r0, [r3, #12]
    1174:	fa1f f28a 	uxth.w	r2, sl
					ptr_job->buf_size % ep_size);
    1178:	6899      	ldr	r1, [r3, #8]
    117a:	4613      	mov	r3, r2
    117c:	fbb1 f2f2 	udiv	r2, r1, r2
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    1180:	fb03 1212 	mls	r2, r3, r2, r1
    1184:	493b      	ldr	r1, [pc, #236]	; (1274 <__stack_size__+0x274>)
    1186:	eb01 1184 	add.w	r1, r1, r4, lsl #6
    118a:	4470      	add	r0, lr
    118c:	4b3a      	ldr	r3, [pc, #232]	; (1278 <__stack_size__+0x278>)
    118e:	4798      	blx	r3
    1190:	e71f      	b.n	fd2 <udd_ep_trans_done+0x9e>
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
    1192:	4934      	ldr	r1, [pc, #208]	; (1264 <__stack_size__+0x264>)
    1194:	eb01 1109 	add.w	r1, r1, r9, lsl #4
    1198:	6849      	ldr	r1, [r1, #4]
    119a:	f3c1 410e 	ubfx	r1, r1, #16, #15
    119e:	4588      	cmp	r8, r1
    11a0:	f47f af2e 	bne.w	1000 <__stack_size__>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    11a4:	429a      	cmp	r2, r3
    11a6:	f43f af2b 	beq.w	1000 <__stack_size__>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    11aa:	1a9b      	subs	r3, r3, r2
    11ac:	b29b      	uxth	r3, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    11ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    11b2:	d143      	bne.n	123c <__stack_size__+0x23c>
    11b4:	f1ca 0100 	rsb	r1, sl, #0
    11b8:	400b      	ands	r3, r1
	ep_size = udd_get_endpoint_size(ep_num);
    11ba:	fa1f f78a 	uxth.w	r7, sl
			udd_udesc_rst_buf0_ctn(ep_num);
    11be:	4929      	ldr	r1, [pc, #164]	; (1264 <__stack_size__+0x264>)
    11c0:	eb01 1109 	add.w	r1, r1, r9, lsl #4
    11c4:	6848      	ldr	r0, [r1, #4]
    11c6:	f36f 000e 	bfc	r0, #0, #15
    11ca:	6048      	str	r0, [r1, #4]
			if (next_trans < ep_size) {
    11cc:	42bb      	cmp	r3, r7
    11ce:	d255      	bcs.n	127c <__stack_size__+0x27c>
				ptr_job->b_use_out_cache_buffer = true;
    11d0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    11d4:	4b22      	ldr	r3, [pc, #136]	; (1260 <__stack_size__+0x260>)
    11d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11da:	7c1a      	ldrb	r2, [r3, #16]
    11dc:	f042 0204 	orr.w	r2, r2, #4
    11e0:	741a      	strb	r2, [r3, #16]
				udd_udesc_set_buf0_addr(ep_num,
    11e2:	4b24      	ldr	r3, [pc, #144]	; (1274 <__stack_size__+0x274>)
    11e4:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    11e8:	4a1e      	ldr	r2, [pc, #120]	; (1264 <__stack_size__+0x264>)
    11ea:	ea4f 1909 	mov.w	r9, r9, lsl #4
    11ee:	f842 4009 	str.w	r4, [r2, r9]
				udd_udesc_set_buf0_size(ep_num, ep_size);
    11f2:	684a      	ldr	r2, [r1, #4]
    11f4:	f367 421e 	bfi	r2, r7, #16, #15
    11f8:	604a      	str	r2, [r1, #4]
			udd_disable_busy_bank0(ep_num);
    11fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    11fe:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1202:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1206:	fab3 f383 	clz	r3, r3
    120a:	095b      	lsrs	r3, r3, #5
    120c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    120e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1210:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1214:	2200      	movs	r2, #0
    1216:	4b10      	ldr	r3, [pc, #64]	; (1258 <__stack_size__+0x258>)
    1218:	701a      	strb	r2, [r3, #0]
	return flags;
    121a:	9b03      	ldr	r3, [sp, #12]
			udd_enable_out_received_interrupt(ep_num);
    121c:	2202      	movs	r2, #2
    121e:	4912      	ldr	r1, [pc, #72]	; (1268 <__stack_size__+0x268>)
    1220:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
			udd_enable_endpoint_interrupt(ep_num);
    1224:	4a0d      	ldr	r2, [pc, #52]	; (125c <__stack_size__+0x25c>)
    1226:	6196      	str	r6, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
    1228:	2b00      	cmp	r3, #0
    122a:	f43f aef8 	beq.w	101e <__stack_size__+0x1e>
		cpu_irq_enable();
    122e:	2201      	movs	r2, #1
    1230:	4b09      	ldr	r3, [pc, #36]	; (1258 <__stack_size__+0x258>)
    1232:	701a      	strb	r2, [r3, #0]
    1234:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1238:	b662      	cpsie	i
    123a:	e6f0      	b.n	101e <__stack_size__+0x1e>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    123c:	fa1f f08a 	uxth.w	r0, sl
    1240:	f647 73ff 	movw	r3, #32767	; 0x7fff
    1244:	fb93 f1f0 	sdiv	r1, r3, r0
    1248:	fb00 3111 	mls	r1, r0, r1, r3
				next_trans = UDD_ENDPOINT_MAX_TRANS
    124c:	1a5b      	subs	r3, r3, r1
    124e:	b29b      	uxth	r3, r3
    1250:	e7b3      	b.n	11ba <__stack_size__+0x1ba>
    1252:	bf00      	nop
    1254:	400a5100 	.word	0x400a5100
    1258:	20000104 	.word	0x20000104
    125c:	400a5000 	.word	0x400a5000
    1260:	20000b50 	.word	0x20000b50
    1264:	20000b80 	.word	0x20000b80
    1268:	400a51f0 	.word	0x400a51f0
    126c:	400a5160 	.word	0x400a5160
    1270:	400a5220 	.word	0x400a5220
    1274:	20000d14 	.word	0x20000d14
    1278:	000034d5 	.word	0x000034d5
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
    127c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1280:	4908      	ldr	r1, [pc, #32]	; (12a4 <__stack_size__+0x2a4>)
    1282:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1286:	6861      	ldr	r1, [r4, #4]
    1288:	440a      	add	r2, r1
    128a:	4807      	ldr	r0, [pc, #28]	; (12a8 <__stack_size__+0x2a8>)
    128c:	ea4f 1909 	mov.w	r9, r9, lsl #4
    1290:	eb00 0109 	add.w	r1, r0, r9
    1294:	f840 2009 	str.w	r2, [r0, r9]
				udd_udesc_set_buf0_size(ep_num, next_trans);
    1298:	684a      	ldr	r2, [r1, #4]
    129a:	f363 421e 	bfi	r2, r3, #16, #15
    129e:	604a      	str	r2, [r1, #4]
    12a0:	e7ab      	b.n	11fa <__stack_size__+0x1fa>
    12a2:	bf00      	nop
    12a4:	20000b50 	.word	0x20000b50
    12a8:	20000b80 	.word	0x20000b80

000012ac <udd_attach>:
{
    12ac:	b530      	push	{r4, r5, lr}
    12ae:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    12b0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    12b4:	fab3 f383 	clz	r3, r3
    12b8:	095b      	lsrs	r3, r3, #5
    12ba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    12bc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    12be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    12c2:	2200      	movs	r2, #0
    12c4:	4b18      	ldr	r3, [pc, #96]	; (1328 <udd_attach+0x7c>)
    12c6:	701a      	strb	r2, [r3, #0]
	return flags;
    12c8:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
    12ca:	2001      	movs	r0, #1
    12cc:	4b17      	ldr	r3, [pc, #92]	; (132c <udd_attach+0x80>)
    12ce:	4798      	blx	r3
	otg_unfreeze_clock();
    12d0:	4a17      	ldr	r2, [pc, #92]	; (1330 <udd_attach+0x84>)
    12d2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
    12d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    12da:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while(!Is_otg_clock_usable());
    12de:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    12e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    12e6:	d0fa      	beq.n	12de <udd_attach+0x32>
	udd_attach_device();
    12e8:	4b11      	ldr	r3, [pc, #68]	; (1330 <udd_attach+0x84>)
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    12f0:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
    12f2:	2508      	movs	r5, #8
    12f4:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
    12f6:	2101      	movs	r1, #1
    12f8:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
    12fa:	2210      	movs	r2, #16
    12fc:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
    12fe:	2004      	movs	r0, #4
    1300:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
    1302:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
    1304:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
    1306:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
    1308:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
    130a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    130e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1312:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
    1316:	b124      	cbz	r4, 1322 <udd_attach+0x76>
		cpu_irq_enable();
    1318:	4b03      	ldr	r3, [pc, #12]	; (1328 <udd_attach+0x7c>)
    131a:	7019      	strb	r1, [r3, #0]
    131c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1320:	b662      	cpsie	i
}
    1322:	b003      	add	sp, #12
    1324:	bd30      	pop	{r4, r5, pc}
    1326:	bf00      	nop
    1328:	20000104 	.word	0x20000104
    132c:	00000c59 	.word	0x00000c59
    1330:	400a5000 	.word	0x400a5000

00001334 <udd_enable>:
{
    1334:	b5f0      	push	{r4, r5, r6, r7, lr}
    1336:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1338:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    133c:	fab3 f383 	clz	r3, r3
    1340:	095b      	lsrs	r3, r3, #5
    1342:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1344:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1346:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    134a:	2500      	movs	r5, #0
    134c:	4b3c      	ldr	r3, [pc, #240]	; (1440 <udd_enable+0x10c>)
    134e:	701d      	strb	r5, [r3, #0]
	return flags;
    1350:	9e00      	ldr	r6, [sp, #0]
	sysclk_enable_usb();
    1352:	4b3c      	ldr	r3, [pc, #240]	; (1444 <udd_enable+0x110>)
    1354:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1356:	4b3c      	ldr	r3, [pc, #240]	; (1448 <udd_enable+0x114>)
    1358:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    135c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1360:	2150      	movs	r1, #80	; 0x50
    1362:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1366:	601a      	str	r2, [r3, #0]
 * \param awen_mask Mask of asynchronous wake-up sources (use one of the defines
 *  PM_AWEN_xxxx in the part-specific header file)
 */
__always_inline static void usbc_async_wake_up_enable(void)
{
	PM->PM_AWEN |= (1U << PM_AWEN_USBC);
    1368:	4a38      	ldr	r2, [pc, #224]	; (144c <udd_enable+0x118>)
    136a:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    136e:	f043 0304 	orr.w	r3, r3, #4
    1372:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	bpm_enable_fast_wakeup(BPM);
    1376:	4836      	ldr	r0, [pc, #216]	; (1450 <udd_enable+0x11c>)
    1378:	4b36      	ldr	r3, [pc, #216]	; (1454 <udd_enable+0x120>)
    137a:	4798      	blx	r3
	otg_enable_device_mode();
    137c:	4c36      	ldr	r4, [pc, #216]	; (1458 <udd_enable+0x124>)
    137e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    1382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1386:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_enable();
    138a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    138e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1392:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_unfreeze_clock();
    1396:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    139a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    139e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	(void)Is_otg_clock_frozen();
    13a2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
    13a6:	4f2d      	ldr	r7, [pc, #180]	; (145c <udd_enable+0x128>)
    13a8:	2260      	movs	r2, #96	; 0x60
    13aa:	4629      	mov	r1, r5
    13ac:	4638      	mov	r0, r7
    13ae:	4b2c      	ldr	r3, [pc, #176]	; (1460 <udd_enable+0x12c>)
    13b0:	4798      	blx	r3
	otg_register_desc_tab(udd_g_ep_table);
    13b2:	f8d4 3830 	ldr.w	r3, [r4, #2096]	; 0x830
    13b6:	f8c4 7830 	str.w	r7, [r4, #2096]	; 0x830
			udd_ep_job[i].busy = false;
    13ba:	4b2a      	ldr	r3, [pc, #168]	; (1464 <udd_enable+0x130>)
    13bc:	7c1a      	ldrb	r2, [r3, #16]
    13be:	f365 0200 	bfi	r2, r5, #0, #1
    13c2:	741a      	strb	r2, [r3, #16]
    13c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    13c8:	f365 0200 	bfi	r2, r5, #0, #1
    13cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	udd_low_speed_disable();
    13d0:	6823      	ldr	r3, [r4, #0]
    13d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    13d6:	6023      	str	r3, [r4, #0]
	udd_high_speed_disable();
    13d8:	6823      	ldr	r3, [r4, #0]
    13da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    13de:	6023      	str	r3, [r4, #0]
	otg_freeze_clock();
    13e0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
    13e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    13e8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	udd_b_idle = false;
    13ec:	4b1e      	ldr	r3, [pc, #120]	; (1468 <udd_enable+0x134>)
    13ee:	701d      	strb	r5, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
    13f0:	4b1e      	ldr	r3, [pc, #120]	; (146c <udd_enable+0x138>)
    13f2:	799b      	ldrb	r3, [r3, #6]
    13f4:	2bff      	cmp	r3, #255	; 0xff
    13f6:	d022      	beq.n	143e <udd_enable+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13f8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    13fc:	fab3 f383 	clz	r3, r3
    1400:	095b      	lsrs	r3, r3, #5
    1402:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1404:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1406:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    140a:	2200      	movs	r2, #0
    140c:	4b0c      	ldr	r3, [pc, #48]	; (1440 <udd_enable+0x10c>)
    140e:	701a      	strb	r2, [r3, #0]
	return flags;
    1410:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
    1412:	4a16      	ldr	r2, [pc, #88]	; (146c <udd_enable+0x138>)
    1414:	7993      	ldrb	r3, [r2, #6]
    1416:	3301      	adds	r3, #1
    1418:	7193      	strb	r3, [r2, #6]
	if (cpu_irq_is_enabled_flags(flags))
    141a:	b129      	cbz	r1, 1428 <udd_enable+0xf4>
		cpu_irq_enable();
    141c:	2201      	movs	r2, #1
    141e:	4b08      	ldr	r3, [pc, #32]	; (1440 <udd_enable+0x10c>)
    1420:	701a      	strb	r2, [r3, #0]
    1422:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1426:	b662      	cpsie	i
	udd_attach();
    1428:	4b11      	ldr	r3, [pc, #68]	; (1470 <udd_enable+0x13c>)
    142a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    142c:	b12e      	cbz	r6, 143a <udd_enable+0x106>
		cpu_irq_enable();
    142e:	2201      	movs	r2, #1
    1430:	4b03      	ldr	r3, [pc, #12]	; (1440 <udd_enable+0x10c>)
    1432:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1434:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1438:	b662      	cpsie	i
}
    143a:	b003      	add	sp, #12
    143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    143e:	e7fe      	b.n	143e <udd_enable+0x10a>
    1440:	20000104 	.word	0x20000104
    1444:	00002389 	.word	0x00002389
    1448:	e000e100 	.word	0xe000e100
    144c:	400e0000 	.word	0x400e0000
    1450:	400f0000 	.word	0x400f0000
    1454:	00002521 	.word	0x00002521
    1458:	400a5000 	.word	0x400a5000
    145c:	20000b80 	.word	0x20000b80
    1460:	00003609 	.word	0x00003609
    1464:	20000b50 	.word	0x20000b50
    1468:	20000b49 	.word	0x20000b49
    146c:	20000cf0 	.word	0x20000cf0
    1470:	000012ad 	.word	0x000012ad

00001474 <udd_set_address>:
	udd_disable_address();
    1474:	4b08      	ldr	r3, [pc, #32]	; (1498 <udd_set_address+0x24>)
    1476:	681a      	ldr	r2, [r3, #0]
    1478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    147c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
    147e:	681a      	ldr	r2, [r3, #0]
    1480:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1484:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1488:	4302      	orrs	r2, r0
    148a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
    148c:	681a      	ldr	r2, [r3, #0]
    148e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1492:	601a      	str	r2, [r3, #0]
    1494:	4770      	bx	lr
    1496:	bf00      	nop
    1498:	400a5000 	.word	0x400a5000

0000149c <udd_getaddress>:
	return udd_get_configured_address();
    149c:	4b02      	ldr	r3, [pc, #8]	; (14a8 <udd_getaddress+0xc>)
    149e:	6818      	ldr	r0, [r3, #0]
}
    14a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop
    14a8:	400a5000 	.word	0x400a5000

000014ac <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    14ac:	4b01      	ldr	r3, [pc, #4]	; (14b4 <udd_set_setup_payload+0x8>)
    14ae:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    14b0:	8199      	strh	r1, [r3, #12]
    14b2:	4770      	bx	lr
    14b4:	20000d94 	.word	0x20000d94

000014b8 <udd_ep_alloc>:
{
    14b8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
    14ba:	f000 050f 	and.w	r5, r0, #15
	if (Is_udd_endpoint_enabled(ep_addr)) {
    14be:	4b22      	ldr	r3, [pc, #136]	; (1548 <udd_ep_alloc+0x90>)
    14c0:	69db      	ldr	r3, [r3, #28]
    14c2:	2401      	movs	r4, #1
    14c4:	40ac      	lsls	r4, r5
    14c6:	4223      	tst	r3, r4
    14c8:	d13b      	bne.n	1542 <udd_ep_alloc+0x8a>
	udd_configure_endpoint(ep_addr, bmAttributes,
    14ca:	4e20      	ldr	r6, [pc, #128]	; (154c <udd_ep_alloc+0x94>)
    14cc:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
    14d0:	f427 57cb 	bic.w	r7, r7, #6496	; 0x1960
    14d4:	f027 0714 	bic.w	r7, r7, #20
    14d8:	02c9      	lsls	r1, r1, #11
    14da:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
    14de:	b240      	sxtb	r0, r0
    14e0:	2800      	cmp	r0, #0
    14e2:	bfb4      	ite	lt
    14e4:	f44f 7380 	movlt.w	r3, #256	; 0x100
    14e8:	2300      	movge	r3, #0
    14ea:	430b      	orrs	r3, r1
    14ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
    14f0:	b289      	uxth	r1, r1
    14f2:	f5b1 4f7c 	cmp.w	r1, #64512	; 0xfc00
    14f6:	d304      	bcc.n	1502 <udd_ep_alloc+0x4a>
    14f8:	2a08      	cmp	r2, #8
    14fa:	d920      	bls.n	153e <udd_ep_alloc+0x86>
    14fc:	0052      	lsls	r2, r2, #1
    14fe:	3a01      	subs	r2, #1
    1500:	e001      	b.n	1506 <udd_ep_alloc+0x4e>
    1502:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1506:	fab2 f282 	clz	r2, r2
    150a:	f1c2 021c 	rsb	r2, r2, #28
    150e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1512:	f423 63d1 	bic.w	r3, r3, #1672	; 0x688
    1516:	f023 0303 	bic.w	r3, r3, #3
    151a:	04db      	lsls	r3, r3, #19
    151c:	0cdb      	lsrs	r3, r3, #19
    151e:	433b      	orrs	r3, r7
    1520:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	udd_enable_busy_bank0(ep_addr);
    1524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1528:	4b09      	ldr	r3, [pc, #36]	; (1550 <udd_ep_alloc+0x98>)
    152a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
	udd_enable_endpoint(ep_addr);
    152e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
    1532:	69da      	ldr	r2, [r3, #28]
    1534:	4314      	orrs	r4, r2
    1536:	61dc      	str	r4, [r3, #28]
	return true;
    1538:	2001      	movs	r0, #1
}
    153a:	bcf0      	pop	{r4, r5, r6, r7}
    153c:	4770      	bx	lr
	udd_configure_endpoint(ep_addr, bmAttributes,
    153e:	220f      	movs	r2, #15
    1540:	e7e1      	b.n	1506 <udd_ep_alloc+0x4e>
		return false;
    1542:	2000      	movs	r0, #0
    1544:	e7f9      	b.n	153a <udd_ep_alloc+0x82>
    1546:	bf00      	nop
    1548:	400a5000 	.word	0x400a5000
    154c:	400a5100 	.word	0x400a5100
    1550:	400a51f0 	.word	0x400a51f0

00001554 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
    1554:	f000 000f 	and.w	r0, r0, #15
    1558:	4b02      	ldr	r3, [pc, #8]	; (1564 <udd_ep_is_halted+0x10>)
    155a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    155e:	f3c0 40c0 	ubfx	r0, r0, #19, #1
    1562:	4770      	bx	lr
    1564:	400a51c0 	.word	0x400a51c0

00001568 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
    1568:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
    156c:	2802      	cmp	r0, #2
    156e:	d834      	bhi.n	15da <udd_ep_clear_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep)) {
    1570:	4b1c      	ldr	r3, [pc, #112]	; (15e4 <udd_ep_clear_halt+0x7c>)
    1572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1576:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    157a:	d030      	beq.n	15de <udd_ep_clear_halt+0x76>
		udd_disable_stall_handshake(ep);
    157c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1580:	4b19      	ldr	r3, [pc, #100]	; (15e8 <udd_ep_clear_halt+0x80>)
    1582:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (Is_udd_stall(ep)) {
    1586:	3bf0      	subs	r3, #240	; 0xf0
    1588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    158c:	f013 0f40 	tst.w	r3, #64	; 0x40
    1590:	d008      	beq.n	15a4 <udd_ep_clear_halt+0x3c>
			udd_ack_stall(ep);
    1592:	2240      	movs	r2, #64	; 0x40
    1594:	4b15      	ldr	r3, [pc, #84]	; (15ec <udd_ep_clear_halt+0x84>)
    1596:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_reset_data_toggle(ep);
    159a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    159e:	3390      	adds	r3, #144	; 0x90
    15a0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	ptr_job = &udd_ep_job[ep - 1];
    15a4:	3801      	subs	r0, #1
		if (ptr_job->busy == true) {
    15a6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    15aa:	4b11      	ldr	r3, [pc, #68]	; (15f0 <udd_ep_clear_halt+0x88>)
    15ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    15b0:	7c1b      	ldrb	r3, [r3, #16]
    15b2:	f013 0f01 	tst.w	r3, #1
    15b6:	d101      	bne.n	15bc <udd_ep_clear_halt+0x54>
	return true;
    15b8:	2001      	movs	r0, #1
    15ba:	4770      	bx	lr
{
    15bc:	b510      	push	{r4, lr}
			ptr_job->busy = false;
    15be:	490c      	ldr	r1, [pc, #48]	; (15f0 <udd_ep_clear_halt+0x88>)
    15c0:	0083      	lsls	r3, r0, #2
    15c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    15c6:	7c14      	ldrb	r4, [r2, #16]
    15c8:	f36f 0400 	bfc	r4, #0, #1
    15cc:	7414      	strb	r4, [r2, #16]
			ptr_job->call_nohalt();
    15ce:	4418      	add	r0, r3
    15d0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    15d4:	4798      	blx	r3
	return true;
    15d6:	2001      	movs	r0, #1
    15d8:	bd10      	pop	{r4, pc}
		return false;
    15da:	2000      	movs	r0, #0
    15dc:	4770      	bx	lr
	return true;
    15de:	2001      	movs	r0, #1
    15e0:	4770      	bx	lr
    15e2:	bf00      	nop
    15e4:	400a51c0 	.word	0x400a51c0
    15e8:	400a5220 	.word	0x400a5220
    15ec:	400a5160 	.word	0x400a5160
    15f0:	20000b50 	.word	0x20000b50

000015f4 <udd_ep_run>:
{
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f6:	b083      	sub	sp, #12
	ep_num = ep & USB_EP_ADDR_MASK;
    15f8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_num) {
    15fc:	2c02      	cmp	r4, #2
    15fe:	d87f      	bhi.n	1700 <udd_ep_run+0x10c>
	if ((!Is_udd_endpoint_enabled(ep_num))
    1600:	4d44      	ldr	r5, [pc, #272]	; (1714 <udd_ep_run+0x120>)
    1602:	69ee      	ldr	r6, [r5, #28]
    1604:	2501      	movs	r5, #1
    1606:	40a5      	lsls	r5, r4
    1608:	4235      	tst	r5, r6
    160a:	d07c      	beq.n	1706 <udd_ep_run+0x112>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
    160c:	4d42      	ldr	r5, [pc, #264]	; (1718 <udd_ep_run+0x124>)
    160e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    1612:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    1616:	d178      	bne.n	170a <udd_ep_run+0x116>
	ptr_job = &udd_ep_job[ep_num - 1];
    1618:	1e66      	subs	r6, r4, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    161a:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    161e:	fab5 f585 	clz	r5, r5
    1622:	096d      	lsrs	r5, r5, #5
    1624:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1626:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1628:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    162c:	2700      	movs	r7, #0
    162e:	4d3b      	ldr	r5, [pc, #236]	; (171c <udd_ep_run+0x128>)
    1630:	702f      	strb	r7, [r5, #0]
	return flags;
    1632:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (ptr_job->busy == true) {
    1636:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    163a:	4d39      	ldr	r5, [pc, #228]	; (1720 <udd_ep_run+0x12c>)
    163c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    1640:	7c2d      	ldrb	r5, [r5, #16]
    1642:	f015 0f01 	tst.w	r5, #1
    1646:	d00a      	beq.n	165e <udd_ep_run+0x6a>
	if (cpu_irq_is_enabled_flags(flags))
    1648:	f1be 0f00 	cmp.w	lr, #0
    164c:	d05f      	beq.n	170e <udd_ep_run+0x11a>
		cpu_irq_enable();
    164e:	2201      	movs	r2, #1
    1650:	4b32      	ldr	r3, [pc, #200]	; (171c <udd_ep_run+0x128>)
    1652:	701a      	strb	r2, [r3, #0]
    1654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1658:	b662      	cpsie	i
		return false; // Job already on going
    165a:	2000      	movs	r0, #0
    165c:	e051      	b.n	1702 <udd_ep_run+0x10e>
	ptr_job->busy = true;
    165e:	eb06 0586 	add.w	r5, r6, r6, lsl #2
    1662:	4f2f      	ldr	r7, [pc, #188]	; (1720 <udd_ep_run+0x12c>)
    1664:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    1668:	7c2f      	ldrb	r7, [r5, #16]
    166a:	f047 0701 	orr.w	r7, r7, #1
    166e:	742f      	strb	r7, [r5, #16]
	if (cpu_irq_is_enabled_flags(flags))
    1670:	f1be 0f00 	cmp.w	lr, #0
    1674:	d005      	beq.n	1682 <udd_ep_run+0x8e>
		cpu_irq_enable();
    1676:	2701      	movs	r7, #1
    1678:	4d28      	ldr	r5, [pc, #160]	; (171c <udd_ep_run+0x128>)
    167a:	702f      	strb	r7, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    167c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1680:	b662      	cpsie	i
	ptr_job->buf = buf;
    1682:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1720 <udd_ep_run+0x12c>
    1686:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    168a:	00bf      	lsls	r7, r7, #2
    168c:	eb0c 0507 	add.w	r5, ip, r7
    1690:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
    1692:	60ab      	str	r3, [r5, #8]
	ptr_job->nb_trans = 0;
    1694:	f04f 0e00 	mov.w	lr, #0
    1698:	f8c5 e00c 	str.w	lr, [r5, #12]
	ptr_job->call_trans = callback;
    169c:	9a08      	ldr	r2, [sp, #32]
    169e:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket;
    16a2:	7c2a      	ldrb	r2, [r5, #16]
    16a4:	f361 0241 	bfi	r2, r1, #1, #1
	ptr_job->b_use_out_cache_buffer = false;
    16a8:	f36e 0282 	bfi	r2, lr, #2, #1
    16ac:	742a      	strb	r2, [r5, #16]
	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
    16ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    16b2:	d107      	bne.n	16c4 <udd_ep_run+0xd0>
	&& (USBC_UECFG0_EPTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
    16b4:	491b      	ldr	r1, [pc, #108]	; (1724 <udd_ep_run+0x130>)
    16b6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    16ba:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    16be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    16c2:	d00e      	beq.n	16e2 <udd_ep_run+0xee>
	udd_udesc_rst_buf0_ctn(ep_num);
    16c4:	4b18      	ldr	r3, [pc, #96]	; (1728 <udd_ep_run+0x134>)
    16c6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    16ca:	6863      	ldr	r3, [r4, #4]
    16cc:	f36f 030e 	bfc	r3, #0, #15
    16d0:	6063      	str	r3, [r4, #4]
	udd_udesc_rst_buf0_size(ep_num);
    16d2:	6863      	ldr	r3, [r4, #4]
    16d4:	f36f 431e 	bfc	r3, #16, #15
    16d8:	6063      	str	r3, [r4, #4]
	udd_ep_trans_done(ep);
    16da:	4b14      	ldr	r3, [pc, #80]	; (172c <udd_ep_run+0x138>)
    16dc:	4798      	blx	r3
	return true;
    16de:	2001      	movs	r0, #1
    16e0:	e00f      	b.n	1702 <udd_ep_run+0x10e>
	&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
    16e2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    16e6:	f3c1 1102 	ubfx	r1, r1, #4, #3
    16ea:	2208      	movs	r2, #8
    16ec:	408a      	lsls	r2, r1
    16ee:	3a01      	subs	r2, #1
    16f0:	421a      	tst	r2, r3
    16f2:	d0e7      	beq.n	16c4 <udd_ep_run+0xd0>
		ptr_job->busy = false;
    16f4:	7c2b      	ldrb	r3, [r5, #16]
    16f6:	f36f 0300 	bfc	r3, #0, #1
    16fa:	742b      	strb	r3, [r5, #16]
		return false;
    16fc:	4670      	mov	r0, lr
    16fe:	e000      	b.n	1702 <udd_ep_run+0x10e>
		return false;
    1700:	2000      	movs	r0, #0
}
    1702:	b003      	add	sp, #12
    1704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
    1706:	2000      	movs	r0, #0
    1708:	e7fb      	b.n	1702 <udd_ep_run+0x10e>
    170a:	2000      	movs	r0, #0
    170c:	e7f9      	b.n	1702 <udd_ep_run+0x10e>
		return false; // Job already on going
    170e:	2000      	movs	r0, #0
    1710:	e7f7      	b.n	1702 <udd_ep_run+0x10e>
    1712:	bf00      	nop
    1714:	400a5000 	.word	0x400a5000
    1718:	400a51c0 	.word	0x400a51c0
    171c:	20000104 	.word	0x20000104
    1720:	20000b50 	.word	0x20000b50
    1724:	400a5100 	.word	0x400a5100
    1728:	20000b80 	.word	0x20000b80
    172c:	00000f35 	.word	0x00000f35

00001730 <udd_ep_abort>:
{
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	b082      	sub	sp, #8
	ep &= USB_EP_ADDR_MASK;
    1734:	f000 020f 	and.w	r2, r0, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1738:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    173c:	fab3 f383 	clz	r3, r3
    1740:	095b      	lsrs	r3, r3, #5
    1742:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1744:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1746:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    174a:	2100      	movs	r1, #0
    174c:	4b1d      	ldr	r3, [pc, #116]	; (17c4 <udd_ep_abort+0x94>)
    174e:	7019      	strb	r1, [r3, #0]
	return flags;
    1750:	9801      	ldr	r0, [sp, #4]
	udd_disable_endpoint_interrupt(ep);
    1752:	4613      	mov	r3, r2
    1754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1758:	4091      	lsls	r1, r2
    175a:	4c1b      	ldr	r4, [pc, #108]	; (17c8 <udd_ep_abort+0x98>)
    175c:	6161      	str	r1, [r4, #20]
	if (cpu_irq_is_enabled_flags(flags))
    175e:	b128      	cbz	r0, 176c <udd_ep_abort+0x3c>
		cpu_irq_enable();
    1760:	2001      	movs	r0, #1
    1762:	4918      	ldr	r1, [pc, #96]	; (17c4 <udd_ep_abort+0x94>)
    1764:	7008      	strb	r0, [r1, #0]
    1766:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    176a:	b662      	cpsie	i
	udd_enable_busy_bank0(ep);
    176c:	0095      	lsls	r5, r2, #2
    176e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    1772:	4916      	ldr	r1, [pc, #88]	; (17cc <udd_ep_abort+0x9c>)
    1774:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	ptr_job = &udd_ep_job[ep - 1];
    1778:	3b01      	subs	r3, #1
	if (!ptr_job->busy) {
    177a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    177e:	4914      	ldr	r1, [pc, #80]	; (17d0 <udd_ep_abort+0xa0>)
    1780:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1784:	7c09      	ldrb	r1, [r1, #16]
    1786:	f011 0f01 	tst.w	r1, #1
    178a:	d019      	beq.n	17c0 <udd_ep_abort+0x90>
	ptr_job->busy = false;
    178c:	4810      	ldr	r0, [pc, #64]	; (17d0 <udd_ep_abort+0xa0>)
    178e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    1792:	0089      	lsls	r1, r1, #2
    1794:	1844      	adds	r4, r0, r1
    1796:	7c26      	ldrb	r6, [r4, #16]
    1798:	f36f 0600 	bfc	r6, #0, #1
    179c:	7426      	strb	r6, [r4, #16]
	if (NULL != ptr_job->call_trans) {
    179e:	5844      	ldr	r4, [r0, r1]
    17a0:	b174      	cbz	r4, 17c0 <udd_ep_abort+0x90>
		if (Is_udd_endpoint_in(ep)) {
    17a2:	490c      	ldr	r1, [pc, #48]	; (17d4 <udd_ep_abort+0xa4>)
    17a4:	5869      	ldr	r1, [r5, r1]
    17a6:	f411 7f80 	tst.w	r1, #256	; 0x100
			ep |= USB_EP_DIR_IN;
    17aa:	bf18      	it	ne
    17ac:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    17b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    17b4:	4906      	ldr	r1, [pc, #24]	; (17d0 <udd_ep_abort+0xa0>)
    17b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    17ba:	68d9      	ldr	r1, [r3, #12]
    17bc:	2001      	movs	r0, #1
    17be:	47a0      	blx	r4
}
    17c0:	b002      	add	sp, #8
    17c2:	bd70      	pop	{r4, r5, r6, pc}
    17c4:	20000104 	.word	0x20000104
    17c8:	400a5000 	.word	0x400a5000
    17cc:	400a51f0 	.word	0x400a51f0
    17d0:	20000b50 	.word	0x20000b50
    17d4:	400a5100 	.word	0x400a5100

000017d8 <USBC_Handler>:
{
    17d8:	b530      	push	{r4, r5, lr}
    17da:	b085      	sub	sp, #20
	if (Is_udd_sof()) {
    17dc:	4b8d      	ldr	r3, [pc, #564]	; (1a14 <USBC_Handler+0x23c>)
    17de:	685b      	ldr	r3, [r3, #4]
    17e0:	f013 0f04 	tst.w	r3, #4
    17e4:	d174      	bne.n	18d0 <USBC_Handler+0xf8>
	if (!Is_udd_endpoint_interrupt(0)) {
    17e6:	4b8b      	ldr	r3, [pc, #556]	; (1a14 <USBC_Handler+0x23c>)
    17e8:	685b      	ldr	r3, [r3, #4]
    17ea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    17ee:	d026      	beq.n	183e <USBC_Handler+0x66>
	udd_disable_nak_in_interrupt(0);
    17f0:	4b89      	ldr	r3, [pc, #548]	; (1a18 <USBC_Handler+0x240>)
    17f2:	2210      	movs	r2, #16
    17f4:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
    17f6:	2208      	movs	r2, #8
    17f8:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
    17fa:	3bf0      	subs	r3, #240	; 0xf0
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	f013 0f04 	tst.w	r3, #4
    1802:	d170      	bne.n	18e6 <USBC_Handler+0x10e>
	if (Is_udd_out_received(0)) {
    1804:	4b85      	ldr	r3, [pc, #532]	; (1a1c <USBC_Handler+0x244>)
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	f013 0f02 	tst.w	r3, #2
    180c:	f040 80cb 	bne.w	19a6 <USBC_Handler+0x1ce>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
    1810:	4b82      	ldr	r3, [pc, #520]	; (1a1c <USBC_Handler+0x244>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	f013 0f01 	tst.w	r3, #1
    1818:	d005      	beq.n	1826 <USBC_Handler+0x4e>
    181a:	4b81      	ldr	r3, [pc, #516]	; (1a20 <USBC_Handler+0x248>)
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	f013 0f01 	tst.w	r3, #1
    1822:	f040 816e 	bne.w	1b02 <USBC_Handler+0x32a>
	if (Is_udd_nak_out(0)) {
    1826:	4b7d      	ldr	r3, [pc, #500]	; (1a1c <USBC_Handler+0x244>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	f013 0f08 	tst.w	r3, #8
    182e:	f040 816b 	bne.w	1b08 <USBC_Handler+0x330>
	if (Is_udd_nak_in(0)) {
    1832:	4b7a      	ldr	r3, [pc, #488]	; (1a1c <USBC_Handler+0x244>)
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	f013 0f10 	tst.w	r3, #16
    183a:	f040 8178 	bne.w	1b2e <USBC_Handler+0x356>
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    183e:	4b75      	ldr	r3, [pc, #468]	; (1a14 <USBC_Handler+0x23c>)
    1840:	691b      	ldr	r3, [r3, #16]
    1842:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1846:	d005      	beq.n	1854 <USBC_Handler+0x7c>
				|| !Is_udd_endpoint_interrupt(ep)) {
    1848:	4b72      	ldr	r3, [pc, #456]	; (1a14 <USBC_Handler+0x23c>)
    184a:	685b      	ldr	r3, [r3, #4]
    184c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1850:	f040 8187 	bne.w	1b62 <USBC_Handler+0x38a>
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    1854:	4b6f      	ldr	r3, [pc, #444]	; (1a14 <USBC_Handler+0x23c>)
    1856:	691b      	ldr	r3, [r3, #16]
    1858:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    185c:	d005      	beq.n	186a <USBC_Handler+0x92>
				|| !Is_udd_endpoint_interrupt(ep)) {
    185e:	4b6d      	ldr	r3, [pc, #436]	; (1a14 <USBC_Handler+0x23c>)
    1860:	685b      	ldr	r3, [r3, #4]
    1862:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1866:	f040 817a 	bne.w	1b5e <USBC_Handler+0x386>
	if (Is_udd_reset()) {
    186a:	4b6a      	ldr	r3, [pc, #424]	; (1a14 <USBC_Handler+0x23c>)
    186c:	685b      	ldr	r3, [r3, #4]
    186e:	f013 0f08 	tst.w	r3, #8
    1872:	f040 8182 	bne.w	1b7a <USBC_Handler+0x3a2>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
    1876:	4b67      	ldr	r3, [pc, #412]	; (1a14 <USBC_Handler+0x23c>)
    1878:	691b      	ldr	r3, [r3, #16]
    187a:	f013 0f01 	tst.w	r3, #1
    187e:	d005      	beq.n	188c <USBC_Handler+0xb4>
    1880:	4b64      	ldr	r3, [pc, #400]	; (1a14 <USBC_Handler+0x23c>)
    1882:	685b      	ldr	r3, [r3, #4]
    1884:	f013 0f01 	tst.w	r3, #1
    1888:	f040 81c2 	bne.w	1c10 <USBC_Handler+0x438>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
    188c:	4b61      	ldr	r3, [pc, #388]	; (1a14 <USBC_Handler+0x23c>)
    188e:	691b      	ldr	r3, [r3, #16]
    1890:	f013 0f10 	tst.w	r3, #16
    1894:	d023      	beq.n	18de <USBC_Handler+0x106>
    1896:	4b5f      	ldr	r3, [pc, #380]	; (1a14 <USBC_Handler+0x23c>)
    1898:	685b      	ldr	r3, [r3, #4]
    189a:	f013 0f10 	tst.w	r3, #16
    189e:	d01e      	beq.n	18de <USBC_Handler+0x106>
		udd_ack_wake_up();
    18a0:	4b5c      	ldr	r3, [pc, #368]	; (1a14 <USBC_Handler+0x23c>)
    18a2:	2210      	movs	r2, #16
    18a4:	609a      	str	r2, [r3, #8]
		otg_unfreeze_clock();
    18a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    18aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    18ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable());
    18b2:	461a      	mov	r2, r3
    18b4:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    18b8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    18bc:	d0fa      	beq.n	18b4 <USBC_Handler+0xdc>
		udd_disable_wake_up_interrupt();
    18be:	4b55      	ldr	r3, [pc, #340]	; (1a14 <USBC_Handler+0x23c>)
    18c0:	2210      	movs	r2, #16
    18c2:	615a      	str	r2, [r3, #20]
		udd_ack_suspend();
    18c4:	2001      	movs	r0, #1
    18c6:	6098      	str	r0, [r3, #8]
		udd_enable_suspend_interrupt();
    18c8:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
    18ca:	4b56      	ldr	r3, [pc, #344]	; (1a24 <USBC_Handler+0x24c>)
    18cc:	4798      	blx	r3
		goto udd_interrupt_end;
    18ce:	e006      	b.n	18de <USBC_Handler+0x106>
		udd_ack_sof();
    18d0:	2204      	movs	r2, #4
    18d2:	4b50      	ldr	r3, [pc, #320]	; (1a14 <USBC_Handler+0x23c>)
    18d4:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
    18d6:	4b54      	ldr	r3, [pc, #336]	; (1a28 <USBC_Handler+0x250>)
    18d8:	4798      	blx	r3
		UDC_SOF_EVENT();
    18da:	4b54      	ldr	r3, [pc, #336]	; (1a2c <USBC_Handler+0x254>)
    18dc:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    18de:	f3bf 8f5f 	dmb	sy
}
    18e2:	b005      	add	sp, #20
    18e4:	bd30      	pop	{r4, r5, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    18e6:	4b52      	ldr	r3, [pc, #328]	; (1a30 <USBC_Handler+0x258>)
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	b95b      	cbnz	r3, 1904 <USBC_Handler+0x12c>
	if (8 != udd_udesc_get_buf0_ctn(0)) {
    18ec:	4b51      	ldr	r3, [pc, #324]	; (1a34 <USBC_Handler+0x25c>)
    18ee:	685b      	ldr	r3, [r3, #4]
    18f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    18f4:	2b08      	cmp	r3, #8
    18f6:	d00a      	beq.n	190e <USBC_Handler+0x136>
		udd_ctrl_stall_data();
    18f8:	4b4f      	ldr	r3, [pc, #316]	; (1a38 <USBC_Handler+0x260>)
    18fa:	4798      	blx	r3
		udd_ack_setup_received(0);
    18fc:	2204      	movs	r2, #4
    18fe:	4b4f      	ldr	r3, [pc, #316]	; (1a3c <USBC_Handler+0x264>)
    1900:	601a      	str	r2, [r3, #0]
    1902:	e7ec      	b.n	18de <USBC_Handler+0x106>
		udd_ctrl_endofrequest();
    1904:	4b4e      	ldr	r3, [pc, #312]	; (1a40 <USBC_Handler+0x268>)
    1906:	4798      	blx	r3
		udd_ctrl_init();
    1908:	4b4e      	ldr	r3, [pc, #312]	; (1a44 <USBC_Handler+0x26c>)
    190a:	4798      	blx	r3
    190c:	e7ee      	b.n	18ec <USBC_Handler+0x114>
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    190e:	4b4e      	ldr	r3, [pc, #312]	; (1a48 <USBC_Handler+0x270>)
    1910:	4a4e      	ldr	r2, [pc, #312]	; (1a4c <USBC_Handler+0x274>)
    1912:	e892 0003 	ldmia.w	r2, {r0, r1}
    1916:	e883 0003 	stmia.w	r3, {r0, r1}
	if (udc_process_setup() == false) {
    191a:	4b4d      	ldr	r3, [pc, #308]	; (1a50 <USBC_Handler+0x278>)
    191c:	4798      	blx	r3
    191e:	2800      	cmp	r0, #0
    1920:	d02d      	beq.n	197e <USBC_Handler+0x1a6>
	udd_ack_setup_received(0);
    1922:	2204      	movs	r2, #4
    1924:	4b45      	ldr	r3, [pc, #276]	; (1a3c <USBC_Handler+0x264>)
    1926:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
    1928:	4b47      	ldr	r3, [pc, #284]	; (1a48 <USBC_Handler+0x270>)
    192a:	f993 3000 	ldrsb.w	r3, [r3]
    192e:	2b00      	cmp	r3, #0
    1930:	db2b      	blt.n	198a <USBC_Handler+0x1b2>
		if (0 == udd_g_ctrlreq.req.wLength) {
    1932:	4b45      	ldr	r3, [pc, #276]	; (1a48 <USBC_Handler+0x270>)
    1934:	88db      	ldrh	r3, [r3, #6]
    1936:	2b00      	cmp	r3, #0
    1938:	d032      	beq.n	19a0 <USBC_Handler+0x1c8>
		udd_ctrl_prev_payload_nb_trans = 0;
    193a:	2200      	movs	r2, #0
    193c:	4b45      	ldr	r3, [pc, #276]	; (1a54 <USBC_Handler+0x27c>)
    193e:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
    1940:	4b45      	ldr	r3, [pc, #276]	; (1a58 <USBC_Handler+0x280>)
    1942:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1944:	2101      	movs	r1, #1
    1946:	4b3a      	ldr	r3, [pc, #232]	; (1a30 <USBC_Handler+0x258>)
    1948:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
    194a:	2110      	movs	r1, #16
    194c:	4b3b      	ldr	r3, [pc, #236]	; (1a3c <USBC_Handler+0x264>)
    194e:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1950:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1954:	fab3 f383 	clz	r3, r3
    1958:	095b      	lsrs	r3, r3, #5
    195a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    195c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    195e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1962:	4b3e      	ldr	r3, [pc, #248]	; (1a5c <USBC_Handler+0x284>)
    1964:	701a      	strb	r2, [r3, #0]
	return flags;
    1966:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
    1968:	4a3d      	ldr	r2, [pc, #244]	; (1a60 <USBC_Handler+0x288>)
    196a:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
    196c:	2b00      	cmp	r3, #0
    196e:	d0b6      	beq.n	18de <USBC_Handler+0x106>
		cpu_irq_enable();
    1970:	2201      	movs	r2, #1
    1972:	4b3a      	ldr	r3, [pc, #232]	; (1a5c <USBC_Handler+0x284>)
    1974:	701a      	strb	r2, [r3, #0]
    1976:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    197a:	b662      	cpsie	i
    197c:	e7af      	b.n	18de <USBC_Handler+0x106>
		udd_ctrl_stall_data();
    197e:	4b2e      	ldr	r3, [pc, #184]	; (1a38 <USBC_Handler+0x260>)
    1980:	4798      	blx	r3
		udd_ack_setup_received(0);
    1982:	2204      	movs	r2, #4
    1984:	4b2d      	ldr	r3, [pc, #180]	; (1a3c <USBC_Handler+0x264>)
    1986:	601a      	str	r2, [r3, #0]
    1988:	e7a9      	b.n	18de <USBC_Handler+0x106>
		udd_ctrl_prev_payload_nb_trans = 0;
    198a:	2300      	movs	r3, #0
    198c:	4a31      	ldr	r2, [pc, #196]	; (1a54 <USBC_Handler+0x27c>)
    198e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
    1990:	4a31      	ldr	r2, [pc, #196]	; (1a58 <USBC_Handler+0x280>)
    1992:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1994:	2202      	movs	r2, #2
    1996:	4b26      	ldr	r3, [pc, #152]	; (1a30 <USBC_Handler+0x258>)
    1998:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
    199a:	4b32      	ldr	r3, [pc, #200]	; (1a64 <USBC_Handler+0x28c>)
    199c:	4798      	blx	r3
    199e:	e79e      	b.n	18de <USBC_Handler+0x106>
			udd_ctrl_send_zlp_in();
    19a0:	4b31      	ldr	r3, [pc, #196]	; (1a68 <USBC_Handler+0x290>)
    19a2:	4798      	blx	r3
    19a4:	e79b      	b.n	18de <USBC_Handler+0x106>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
    19a6:	4b22      	ldr	r3, [pc, #136]	; (1a30 <USBC_Handler+0x258>)
    19a8:	781b      	ldrb	r3, [r3, #0]
    19aa:	2b01      	cmp	r3, #1
    19ac:	d00b      	beq.n	19c6 <USBC_Handler+0x1ee>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
    19ae:	2b02      	cmp	r3, #2
    19b0:	d004      	beq.n	19bc <USBC_Handler+0x1e4>
    19b2:	2b04      	cmp	r3, #4
    19b4:	d002      	beq.n	19bc <USBC_Handler+0x1e4>
			udd_ctrl_stall_data();
    19b6:	4b20      	ldr	r3, [pc, #128]	; (1a38 <USBC_Handler+0x260>)
    19b8:	4798      	blx	r3
    19ba:	e001      	b.n	19c0 <USBC_Handler+0x1e8>
			udd_ctrl_endofrequest();
    19bc:	4b20      	ldr	r3, [pc, #128]	; (1a40 <USBC_Handler+0x268>)
    19be:	4798      	blx	r3
		udd_ctrl_init();
    19c0:	4b20      	ldr	r3, [pc, #128]	; (1a44 <USBC_Handler+0x26c>)
    19c2:	4798      	blx	r3
    19c4:	e78b      	b.n	18de <USBC_Handler+0x106>
	nb_data = udd_udesc_get_buf0_ctn(0);
    19c6:	4b1b      	ldr	r3, [pc, #108]	; (1a34 <USBC_Handler+0x25c>)
    19c8:	685d      	ldr	r5, [r3, #4]
    19ca:	f3c5 050e 	ubfx	r5, r5, #0, #15
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    19ce:	4b1e      	ldr	r3, [pc, #120]	; (1a48 <USBC_Handler+0x270>)
    19d0:	899b      	ldrh	r3, [r3, #12]
    19d2:	4a21      	ldr	r2, [pc, #132]	; (1a58 <USBC_Handler+0x280>)
    19d4:	8814      	ldrh	r4, [r2, #0]
    19d6:	1962      	adds	r2, r4, r5
    19d8:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
    19da:	bfbc      	itt	lt
    19dc:	1b1b      	sublt	r3, r3, r4
    19de:	b29d      	uxthlt	r5, r3
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    19e0:	4b19      	ldr	r3, [pc, #100]	; (1a48 <USBC_Handler+0x270>)
    19e2:	6898      	ldr	r0, [r3, #8]
    19e4:	462a      	mov	r2, r5
    19e6:	4919      	ldr	r1, [pc, #100]	; (1a4c <USBC_Handler+0x274>)
    19e8:	4420      	add	r0, r4
    19ea:	4b20      	ldr	r3, [pc, #128]	; (1a6c <USBC_Handler+0x294>)
    19ec:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    19ee:	442c      	add	r4, r5
    19f0:	b2a4      	uxth	r4, r4
    19f2:	4b19      	ldr	r3, [pc, #100]	; (1a58 <USBC_Handler+0x280>)
    19f4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    19f6:	2d08      	cmp	r5, #8
    19f8:	d03a      	beq.n	1a70 <USBC_Handler+0x298>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    19fa:	4b13      	ldr	r3, [pc, #76]	; (1a48 <USBC_Handler+0x270>)
    19fc:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    19fe:	695b      	ldr	r3, [r3, #20]
    1a00:	b113      	cbz	r3, 1a08 <USBC_Handler+0x230>
			if (!udd_g_ctrlreq.over_under_run()) {
    1a02:	4798      	blx	r3
    1a04:	2800      	cmp	r0, #0
    1a06:	d05c      	beq.n	1ac2 <USBC_Handler+0x2ea>
		udd_ack_out_received(0);
    1a08:	2202      	movs	r2, #2
    1a0a:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <USBC_Handler+0x264>)
    1a0c:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
    1a0e:	4b16      	ldr	r3, [pc, #88]	; (1a68 <USBC_Handler+0x290>)
    1a10:	4798      	blx	r3
    1a12:	e764      	b.n	18de <USBC_Handler+0x106>
    1a14:	400a5000 	.word	0x400a5000
    1a18:	400a5220 	.word	0x400a5220
    1a1c:	400a5130 	.word	0x400a5130
    1a20:	400a51c0 	.word	0x400a51c0
    1a24:	00000c59 	.word	0x00000c59
    1a28:	00000571 	.word	0x00000571
    1a2c:	00003419 	.word	0x00003419
    1a30:	20000b4e 	.word	0x20000b4e
    1a34:	20000b80 	.word	0x20000b80
    1a38:	00000d25 	.word	0x00000d25
    1a3c:	400a5160 	.word	0x400a5160
    1a40:	00000da1 	.word	0x00000da1
    1a44:	00000cfd 	.word	0x00000cfd
    1a48:	20000d94 	.word	0x20000d94
    1a4c:	20000dac 	.word	0x20000dac
    1a50:	000005b1 	.word	0x000005b1
    1a54:	20000b4c 	.word	0x20000b4c
    1a58:	20000b4a 	.word	0x20000b4a
    1a5c:	20000104 	.word	0x20000104
    1a60:	400a51f0 	.word	0x400a51f0
    1a64:	00000db1 	.word	0x00000db1
    1a68:	00000d3d 	.word	0x00000d3d
    1a6c:	000034d5 	.word	0x000034d5
			(udd_g_ctrlreq.req.wLength <=
    1a70:	4b73      	ldr	r3, [pc, #460]	; (1c40 <USBC_Handler+0x468>)
    1a72:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans)))
    1a74:	4b73      	ldr	r3, [pc, #460]	; (1c44 <USBC_Handler+0x46c>)
    1a76:	881b      	ldrh	r3, [r3, #0]
    1a78:	4423      	add	r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    1a7a:	429a      	cmp	r2, r3
    1a7c:	ddbd      	ble.n	19fa <USBC_Handler+0x222>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1a7e:	4b70      	ldr	r3, [pc, #448]	; (1c40 <USBC_Handler+0x468>)
    1a80:	899b      	ldrh	r3, [r3, #12]
    1a82:	42a3      	cmp	r3, r4
    1a84:	d023      	beq.n	1ace <USBC_Handler+0x2f6>
	udd_ack_out_received(0);
    1a86:	4b70      	ldr	r3, [pc, #448]	; (1c48 <USBC_Handler+0x470>)
    1a88:	2202      	movs	r2, #2
    1a8a:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
    1a8c:	2210      	movs	r2, #16
    1a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1a94:	fab3 f383 	clz	r3, r3
    1a98:	095b      	lsrs	r3, r3, #5
    1a9a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1a9c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1a9e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1aa2:	2100      	movs	r1, #0
    1aa4:	4b69      	ldr	r3, [pc, #420]	; (1c4c <USBC_Handler+0x474>)
    1aa6:	7019      	strb	r1, [r3, #0]
	return flags;
    1aa8:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
    1aaa:	4969      	ldr	r1, [pc, #420]	; (1c50 <USBC_Handler+0x478>)
    1aac:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
    1aae:	2b00      	cmp	r3, #0
    1ab0:	f43f af15 	beq.w	18de <USBC_Handler+0x106>
		cpu_irq_enable();
    1ab4:	2201      	movs	r2, #1
    1ab6:	4b65      	ldr	r3, [pc, #404]	; (1c4c <USBC_Handler+0x474>)
    1ab8:	701a      	strb	r2, [r3, #0]
    1aba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1abe:	b662      	cpsie	i
    1ac0:	e70d      	b.n	18de <USBC_Handler+0x106>
				udd_ctrl_stall_data();
    1ac2:	4b64      	ldr	r3, [pc, #400]	; (1c54 <USBC_Handler+0x47c>)
    1ac4:	4798      	blx	r3
				udd_ack_out_received(0);
    1ac6:	2202      	movs	r2, #2
    1ac8:	4b5f      	ldr	r3, [pc, #380]	; (1c48 <USBC_Handler+0x470>)
    1aca:	601a      	str	r2, [r3, #0]
    1acc:	e707      	b.n	18de <USBC_Handler+0x106>
		if (!udd_g_ctrlreq.over_under_run) {
    1ace:	4b5c      	ldr	r3, [pc, #368]	; (1c40 <USBC_Handler+0x468>)
    1ad0:	695b      	ldr	r3, [r3, #20]
    1ad2:	b153      	cbz	r3, 1aea <USBC_Handler+0x312>
		if (!udd_g_ctrlreq.over_under_run()) {
    1ad4:	4798      	blx	r3
    1ad6:	b170      	cbz	r0, 1af6 <USBC_Handler+0x31e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1ad8:	495a      	ldr	r1, [pc, #360]	; (1c44 <USBC_Handler+0x46c>)
    1ada:	4a5f      	ldr	r2, [pc, #380]	; (1c58 <USBC_Handler+0x480>)
    1adc:	880b      	ldrh	r3, [r1, #0]
    1ade:	8810      	ldrh	r0, [r2, #0]
    1ae0:	4403      	add	r3, r0
    1ae2:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1ae4:	2300      	movs	r3, #0
    1ae6:	8013      	strh	r3, [r2, #0]
    1ae8:	e7cd      	b.n	1a86 <USBC_Handler+0x2ae>
			udd_ctrl_stall_data();
    1aea:	4b5a      	ldr	r3, [pc, #360]	; (1c54 <USBC_Handler+0x47c>)
    1aec:	4798      	blx	r3
			udd_ack_out_received(0);
    1aee:	2202      	movs	r2, #2
    1af0:	4b55      	ldr	r3, [pc, #340]	; (1c48 <USBC_Handler+0x470>)
    1af2:	601a      	str	r2, [r3, #0]
    1af4:	e6f3      	b.n	18de <USBC_Handler+0x106>
			udd_ctrl_stall_data();
    1af6:	4b57      	ldr	r3, [pc, #348]	; (1c54 <USBC_Handler+0x47c>)
    1af8:	4798      	blx	r3
			udd_ack_out_received(0);
    1afa:	2202      	movs	r2, #2
    1afc:	4b52      	ldr	r3, [pc, #328]	; (1c48 <USBC_Handler+0x470>)
    1afe:	601a      	str	r2, [r3, #0]
    1b00:	e6ed      	b.n	18de <USBC_Handler+0x106>
		udd_ctrl_in_sent();
    1b02:	4b56      	ldr	r3, [pc, #344]	; (1c5c <USBC_Handler+0x484>)
    1b04:	4798      	blx	r3
    1b06:	e6ea      	b.n	18de <USBC_Handler+0x106>
		udd_ack_nak_out(0);
    1b08:	2208      	movs	r2, #8
    1b0a:	4b4f      	ldr	r3, [pc, #316]	; (1c48 <USBC_Handler+0x470>)
    1b0c:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0)) {
    1b0e:	3b30      	subs	r3, #48	; 0x30
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	f013 0f01 	tst.w	r3, #1
    1b16:	f47f aee2 	bne.w	18de <USBC_Handler+0x106>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1b1a:	4b51      	ldr	r3, [pc, #324]	; (1c60 <USBC_Handler+0x488>)
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	2b03      	cmp	r3, #3
    1b20:	f47f aedd 	bne.w	18de <USBC_Handler+0x106>
		udd_enable_stall_handshake(0);
    1b24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1b28:	4b49      	ldr	r3, [pc, #292]	; (1c50 <USBC_Handler+0x478>)
    1b2a:	601a      	str	r2, [r3, #0]
    1b2c:	e6d7      	b.n	18de <USBC_Handler+0x106>
		udd_ack_nak_in(0);
    1b2e:	2210      	movs	r2, #16
    1b30:	4b45      	ldr	r3, [pc, #276]	; (1c48 <USBC_Handler+0x470>)
    1b32:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
    1b34:	3b30      	subs	r3, #48	; 0x30
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	f013 0f02 	tst.w	r3, #2
    1b3c:	f47f aecf 	bne.w	18de <USBC_Handler+0x106>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1b40:	4b47      	ldr	r3, [pc, #284]	; (1c60 <USBC_Handler+0x488>)
    1b42:	781b      	ldrb	r3, [r3, #0]
    1b44:	2b01      	cmp	r3, #1
    1b46:	d007      	beq.n	1b58 <USBC_Handler+0x380>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1b48:	2b04      	cmp	r3, #4
    1b4a:	f47f aec8 	bne.w	18de <USBC_Handler+0x106>
		udd_enable_stall_handshake(0);
    1b4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1b52:	4b3f      	ldr	r3, [pc, #252]	; (1c50 <USBC_Handler+0x478>)
    1b54:	601a      	str	r2, [r3, #0]
    1b56:	e6c2      	b.n	18de <USBC_Handler+0x106>
		udd_ctrl_send_zlp_in();
    1b58:	4b42      	ldr	r3, [pc, #264]	; (1c64 <USBC_Handler+0x48c>)
    1b5a:	4798      	blx	r3
    1b5c:	e6bf      	b.n	18de <USBC_Handler+0x106>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
    1b5e:	2002      	movs	r0, #2
    1b60:	e000      	b.n	1b64 <USBC_Handler+0x38c>
				|| !Is_udd_endpoint_interrupt(ep)) {
    1b62:	2001      	movs	r0, #1
			continue;
		}
		ep_addr = Is_udd_endpoint_in(ep) ? (ep | USB_EP_DIR_IN) : ep;
    1b64:	4b40      	ldr	r3, [pc, #256]	; (1c68 <USBC_Handler+0x490>)
    1b66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1b6e:	bf18      	it	ne
    1b70:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
		dbg_print("%x: ", ep_addr);
		udd_ep_trans_done(ep_addr);
    1b74:	4b3d      	ldr	r3, [pc, #244]	; (1c6c <USBC_Handler+0x494>)
    1b76:	4798      	blx	r3
    1b78:	e6b1      	b.n	18de <USBC_Handler+0x106>
		udd_ack_reset();
    1b7a:	4c3d      	ldr	r4, [pc, #244]	; (1c70 <USBC_Handler+0x498>)
    1b7c:	2308      	movs	r3, #8
    1b7e:	60a3      	str	r3, [r4, #8]
				udd_ep_abort(i);
    1b80:	2001      	movs	r0, #1
    1b82:	4d3c      	ldr	r5, [pc, #240]	; (1c74 <USBC_Handler+0x49c>)
    1b84:	47a8      	blx	r5
    1b86:	2002      	movs	r0, #2
    1b88:	47a8      	blx	r5
		udc_reset();
    1b8a:	4b3b      	ldr	r3, [pc, #236]	; (1c78 <USBC_Handler+0x4a0>)
    1b8c:	4798      	blx	r3
		udd_disable_endpoints();
    1b8e:	69e3      	ldr	r3, [r4, #28]
    1b90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b94:	61e3      	str	r3, [r4, #28]
	udd_configure_address(0);
    1b96:	6823      	ldr	r3, [r4, #0]
    1b98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b9c:	6023      	str	r3, [r4, #0]
	udd_enable_address();
    1b9e:	6823      	ldr	r3, [r4, #0]
    1ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ba4:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
    1ba6:	4a30      	ldr	r2, [pc, #192]	; (1c68 <USBC_Handler+0x490>)
    1ba8:	6813      	ldr	r3, [r2, #0]
    1baa:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
    1bae:	f023 0314 	bic.w	r3, r3, #20
    1bb2:	6013      	str	r3, [r2, #0]
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
    1bb4:	4b31      	ldr	r3, [pc, #196]	; (1c7c <USBC_Handler+0x4a4>)
    1bb6:	4a32      	ldr	r2, [pc, #200]	; (1c80 <USBC_Handler+0x4a8>)
    1bb8:	601a      	str	r2, [r3, #0]
	udd_udesc_rst_buf0_size(0);
    1bba:	685a      	ldr	r2, [r3, #4]
    1bbc:	f36f 421e 	bfc	r2, #16, #15
    1bc0:	605a      	str	r2, [r3, #4]
	udd_enable_endpoint(0);
    1bc2:	69e3      	ldr	r3, [r4, #28]
    1bc4:	f043 0301 	orr.w	r3, r3, #1
    1bc8:	61e3      	str	r3, [r4, #28]
	udd_disable_busy_bank0(0);
    1bca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1bce:	4b2d      	ldr	r3, [pc, #180]	; (1c84 <USBC_Handler+0x4ac>)
    1bd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1bd2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1bd6:	fab3 f383 	clz	r3, r3
    1bda:	095b      	lsrs	r3, r3, #5
    1bdc:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    1bde:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1be0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1be4:	2200      	movs	r2, #0
    1be6:	4b19      	ldr	r3, [pc, #100]	; (1c4c <USBC_Handler+0x474>)
    1be8:	701a      	strb	r2, [r3, #0]
	return flags;
    1bea:	9a03      	ldr	r2, [sp, #12]
	udd_enable_setup_received_interrupt(0);
    1bec:	4b18      	ldr	r3, [pc, #96]	; (1c50 <USBC_Handler+0x478>)
    1bee:	2104      	movs	r1, #4
    1bf0:	6019      	str	r1, [r3, #0]
	udd_enable_out_received_interrupt(0);
    1bf2:	2102      	movs	r1, #2
    1bf4:	6019      	str	r1, [r3, #0]
	udd_enable_endpoint_interrupt(0);
    1bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1bfa:	61a3      	str	r3, [r4, #24]
	if (cpu_irq_is_enabled_flags(flags))
    1bfc:	b12a      	cbz	r2, 1c0a <USBC_Handler+0x432>
		cpu_irq_enable();
    1bfe:	2201      	movs	r2, #1
    1c00:	4b12      	ldr	r3, [pc, #72]	; (1c4c <USBC_Handler+0x474>)
    1c02:	701a      	strb	r2, [r3, #0]
    1c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c08:	b662      	cpsie	i
		udd_ctrl_init();
    1c0a:	4b1f      	ldr	r3, [pc, #124]	; (1c88 <USBC_Handler+0x4b0>)
    1c0c:	4798      	blx	r3
		goto udd_interrupt_end;
    1c0e:	e666      	b.n	18de <USBC_Handler+0x106>
		udd_ack_suspend();
    1c10:	4b17      	ldr	r3, [pc, #92]	; (1c70 <USBC_Handler+0x498>)
    1c12:	2101      	movs	r1, #1
    1c14:	6099      	str	r1, [r3, #8]
		otg_unfreeze_clock();
    1c16:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    1c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    1c1e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
    1c22:	6159      	str	r1, [r3, #20]
		udd_ack_wake_up();
    1c24:	2210      	movs	r2, #16
    1c26:	609a      	str	r2, [r3, #8]
		udd_enable_wake_up_interrupt();
    1c28:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
    1c2a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    1c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1c32:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
    1c36:	2000      	movs	r0, #0
    1c38:	4b14      	ldr	r3, [pc, #80]	; (1c8c <USBC_Handler+0x4b4>)
    1c3a:	4798      	blx	r3
		goto udd_interrupt_end;
    1c3c:	e64f      	b.n	18de <USBC_Handler+0x106>
    1c3e:	bf00      	nop
    1c40:	20000d94 	.word	0x20000d94
    1c44:	20000b4c 	.word	0x20000b4c
    1c48:	400a5160 	.word	0x400a5160
    1c4c:	20000104 	.word	0x20000104
    1c50:	400a51f0 	.word	0x400a51f0
    1c54:	00000d25 	.word	0x00000d25
    1c58:	20000b4a 	.word	0x20000b4a
    1c5c:	00000db1 	.word	0x00000db1
    1c60:	20000b4e 	.word	0x20000b4e
    1c64:	00000d3d 	.word	0x00000d3d
    1c68:	400a5100 	.word	0x400a5100
    1c6c:	00000f35 	.word	0x00000f35
    1c70:	400a5000 	.word	0x400a5000
    1c74:	00001731 	.word	0x00001731
    1c78:	00000529 	.word	0x00000529
    1c7c:	20000b80 	.word	0x20000b80
    1c80:	20000dac 	.word	0x20000dac
    1c84:	400a5220 	.word	0x400a5220
    1c88:	00000cfd 	.word	0x00000cfd
    1c8c:	00000c59 	.word	0x00000c59

00001c90 <udd_ep_free>:
{
    1c90:	b510      	push	{r4, lr}
    1c92:	4604      	mov	r4, r0
	udd_ep_abort(ep);
    1c94:	4b05      	ldr	r3, [pc, #20]	; (1cac <udd_ep_free+0x1c>)
    1c96:	4798      	blx	r3
	udd_disable_endpoint(ep & 0x7F);
    1c98:	4a05      	ldr	r2, [pc, #20]	; (1cb0 <udd_ep_free+0x20>)
    1c9a:	69d0      	ldr	r0, [r2, #28]
    1c9c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1ca0:	2301      	movs	r3, #1
    1ca2:	40a3      	lsls	r3, r4
    1ca4:	ea20 0003 	bic.w	r0, r0, r3
    1ca8:	61d0      	str	r0, [r2, #28]
    1caa:	bd10      	pop	{r4, pc}
    1cac:	00001731 	.word	0x00001731
    1cb0:	400a5000 	.word	0x400a5000

00001cb4 <udd_ep_set_halt>:
{
    1cb4:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
    1cb6:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
    1cba:	2b02      	cmp	r3, #2
    1cbc:	d901      	bls.n	1cc2 <udd_ep_set_halt+0xe>
		return false;
    1cbe:	2000      	movs	r0, #0
}
    1cc0:	bd08      	pop	{r3, pc}
	udd_enable_stall_handshake(ep_index);
    1cc2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1cc6:	4a03      	ldr	r2, [pc, #12]	; (1cd4 <udd_ep_set_halt+0x20>)
    1cc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ep_abort(ep);
    1ccc:	4b02      	ldr	r3, [pc, #8]	; (1cd8 <udd_ep_set_halt+0x24>)
    1cce:	4798      	blx	r3
	return true;
    1cd0:	2001      	movs	r0, #1
    1cd2:	bd08      	pop	{r3, pc}
    1cd4:	400a51f0 	.word	0x400a51f0
    1cd8:	00001731 	.word	0x00001731

00001cdc <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1cdc:	b538      	push	{r3, r4, r5, lr}
    1cde:	4614      	mov	r4, r2
	if (Udd_setup_is_in()) {
    1ce0:	4a37      	ldr	r2, [pc, #220]	; (1dc0 <udi_hid_setup+0xe4>)
    1ce2:	7812      	ldrb	r2, [r2, #0]
    1ce4:	f012 0f80 	tst.w	r2, #128	; 0x80
    1ce8:	d105      	bne.n	1cf6 <udi_hid_setup+0x1a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1cea:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1cee:	2a20      	cmp	r2, #32
    1cf0:	d049      	beq.n	1d86 <udi_hid_setup+0xaa>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1cf2:	2000      	movs	r0, #0
    1cf4:	bd38      	pop	{r3, r4, r5, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1cf6:	f012 0260 	ands.w	r2, r2, #96	; 0x60
    1cfa:	d103      	bne.n	1d04 <udi_hid_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
    1cfc:	4d30      	ldr	r5, [pc, #192]	; (1dc0 <udi_hid_setup+0xe4>)
    1cfe:	786d      	ldrb	r5, [r5, #1]
    1d00:	2d06      	cmp	r5, #6
    1d02:	d003      	beq.n	1d0c <udi_hid_setup+0x30>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1d04:	2a20      	cmp	r2, #32
    1d06:	d028      	beq.n	1d5a <udi_hid_setup+0x7e>
	return false;	// Request not supported
    1d08:	2000      	movs	r0, #0
    1d0a:	bd38      	pop	{r3, r4, r5, pc}
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1d0c:	4b2d      	ldr	r3, [pc, #180]	; (1dc4 <udi_hid_setup+0xe8>)
    1d0e:	4798      	blx	r3
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1d10:	7a83      	ldrb	r3, [r0, #10]
    1d12:	2b21      	cmp	r3, #33	; 0x21
    1d14:	d001      	beq.n	1d1a <udi_hid_setup+0x3e>
		return false;
    1d16:	2000      	movs	r0, #0
    1d18:	bd38      	pop	{r3, r4, r5, pc}

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1d1a:	4b29      	ldr	r3, [pc, #164]	; (1dc0 <udi_hid_setup+0xe4>)
    1d1c:	885b      	ldrh	r3, [r3, #2]
    1d1e:	0a1b      	lsrs	r3, r3, #8
    1d20:	2b21      	cmp	r3, #33	; 0x21
    1d22:	d004      	beq.n	1d2e <udi_hid_setup+0x52>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1d24:	7bc2      	ldrb	r2, [r0, #15]
    1d26:	429a      	cmp	r2, r3
    1d28:	d00d      	beq.n	1d46 <udi_hid_setup+0x6a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1d2a:	2000      	movs	r0, #0
    1d2c:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1d2e:	4b24      	ldr	r3, [pc, #144]	; (1dc0 <udi_hid_setup+0xe4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1d30:	f100 0209 	add.w	r2, r0, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1d34:	609a      	str	r2, [r3, #8]
				min(udd_g_ctrlreq.req.wLength,
    1d36:	7a42      	ldrb	r2, [r0, #9]
    1d38:	88d9      	ldrh	r1, [r3, #6]
    1d3a:	428a      	cmp	r2, r1
    1d3c:	bf28      	it	cs
    1d3e:	460a      	movcs	r2, r1
		udd_g_ctrlreq.payload_size =
    1d40:	819a      	strh	r2, [r3, #12]
		return true;
    1d42:	2001      	movs	r0, #1
    1d44:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload = report_desc;
    1d46:	4b1e      	ldr	r3, [pc, #120]	; (1dc0 <udi_hid_setup+0xe4>)
    1d48:	609c      	str	r4, [r3, #8]
		udd_g_ctrlreq.payload_size =
    1d4a:	8a02      	ldrh	r2, [r0, #16]
    1d4c:	88d9      	ldrh	r1, [r3, #6]
    1d4e:	428a      	cmp	r2, r1
    1d50:	bf28      	it	cs
    1d52:	460a      	movcs	r2, r1
    1d54:	819a      	strh	r2, [r3, #12]
		return true;
    1d56:	2001      	movs	r0, #1
    1d58:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    1d5a:	4a19      	ldr	r2, [pc, #100]	; (1dc0 <udi_hid_setup+0xe4>)
    1d5c:	7852      	ldrb	r2, [r2, #1]
    1d5e:	2a02      	cmp	r2, #2
    1d60:	d007      	beq.n	1d72 <udi_hid_setup+0x96>
    1d62:	2a03      	cmp	r2, #3
    1d64:	d00a      	beq.n	1d7c <udi_hid_setup+0xa0>
    1d66:	2a01      	cmp	r2, #1
    1d68:	d001      	beq.n	1d6e <udi_hid_setup+0x92>
	return false;	// Request not supported
    1d6a:	2000      	movs	r0, #0
    1d6c:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
    1d6e:	4798      	blx	r3
    1d70:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = rate;
    1d72:	4b13      	ldr	r3, [pc, #76]	; (1dc0 <udi_hid_setup+0xe4>)
    1d74:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1d76:	2001      	movs	r0, #1
    1d78:	8198      	strh	r0, [r3, #12]
				return true;
    1d7a:	bd38      	pop	{r3, r4, r5, pc}
				udd_g_ctrlreq.payload = protocol;
    1d7c:	4b10      	ldr	r3, [pc, #64]	; (1dc0 <udi_hid_setup+0xe4>)
    1d7e:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1d80:	2001      	movs	r0, #1
    1d82:	8198      	strh	r0, [r3, #12]
				return true;
    1d84:	bd38      	pop	{r3, r4, r5, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    1d86:	4a0e      	ldr	r2, [pc, #56]	; (1dc0 <udi_hid_setup+0xe4>)
    1d88:	7852      	ldrb	r2, [r2, #1]
    1d8a:	2a0a      	cmp	r2, #10
    1d8c:	d007      	beq.n	1d9e <udi_hid_setup+0xc2>
    1d8e:	2a0b      	cmp	r2, #11
    1d90:	d00b      	beq.n	1daa <udi_hid_setup+0xce>
    1d92:	2a09      	cmp	r2, #9
    1d94:	d001      	beq.n	1d9a <udi_hid_setup+0xbe>
	return false;	// Request not supported
    1d96:	2000      	movs	r0, #0
    1d98:	bd38      	pop	{r3, r4, r5, pc}
				return setup_report();
    1d9a:	4798      	blx	r3
    1d9c:	bd38      	pop	{r3, r4, r5, pc}
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1d9e:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <udi_hid_setup+0xe4>)
    1da0:	885b      	ldrh	r3, [r3, #2]
    1da2:	0a1b      	lsrs	r3, r3, #8
    1da4:	7003      	strb	r3, [r0, #0]
				return true;
    1da6:	2001      	movs	r0, #1
    1da8:	bd38      	pop	{r3, r4, r5, pc}
				if (0 != udd_g_ctrlreq.req.wLength)
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <udi_hid_setup+0xe4>)
    1dac:	88db      	ldrh	r3, [r3, #6]
    1dae:	b923      	cbnz	r3, 1dba <udi_hid_setup+0xde>
				*protocol = udd_g_ctrlreq.req.wValue;
    1db0:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <udi_hid_setup+0xe4>)
    1db2:	885b      	ldrh	r3, [r3, #2]
    1db4:	700b      	strb	r3, [r1, #0]
				return true;
    1db6:	2001      	movs	r0, #1
    1db8:	bd38      	pop	{r3, r4, r5, pc}
					return false;
    1dba:	2000      	movs	r0, #0
}
    1dbc:	bd38      	pop	{r3, r4, r5, pc}
    1dbe:	bf00      	nop
    1dc0:	20000d94 	.word	0x20000d94
    1dc4:	00000511 	.word	0x00000511

00001dc8 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    1dc8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1dca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1dce:	fab3 f383 	clz	r3, r3
    1dd2:	095b      	lsrs	r3, r3, #5
    1dd4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1dd6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1dd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ddc:	2200      	movs	r2, #0
    1dde:	4b08      	ldr	r3, [pc, #32]	; (1e00 <osc_priv_enable_osc0+0x38>)
    1de0:	701a      	strb	r2, [r3, #0]
	return flags;
    1de2:	9a01      	ldr	r2, [sp, #4]
	irqflags_t flags;

	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    1de4:	4b07      	ldr	r3, [pc, #28]	; (1e04 <osc_priv_enable_osc0+0x3c>)
    1de6:	4908      	ldr	r1, [pc, #32]	; (1e08 <osc_priv_enable_osc0+0x40>)
    1de8:	6199      	str	r1, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    1dea:	4908      	ldr	r1, [pc, #32]	; (1e0c <osc_priv_enable_osc0+0x44>)
    1dec:	6219      	str	r1, [r3, #32]
	if (cpu_irq_is_enabled_flags(flags))
    1dee:	b12a      	cbz	r2, 1dfc <osc_priv_enable_osc0+0x34>
		cpu_irq_enable();
    1df0:	2201      	movs	r2, #1
    1df2:	4b03      	ldr	r3, [pc, #12]	; (1e00 <osc_priv_enable_osc0+0x38>)
    1df4:	701a      	strb	r2, [r3, #0]
    1df6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1dfa:	b662      	cpsie	i
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
}
    1dfc:	b002      	add	sp, #8
    1dfe:	4770      	bx	lr
    1e00:	20000104 	.word	0x20000104
    1e04:	400e0800 	.word	0x400e0800
    1e08:	aa000020 	.word	0xaa000020
    1e0c:	00010011 	.word	0x00010011

00001e10 <pll_enable>:
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, uint32_t pll_id)
{
    1e10:	b410      	push	{r4}
    1e12:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e14:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e18:	fab3 f383 	clz	r3, r3
    1e1c:	095b      	lsrs	r3, r3, #5
    1e1e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1e20:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e26:	2200      	movs	r2, #0
    1e28:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <pll_enable+0x54>)
    1e2a:	701a      	strb	r2, [r3, #0]
	return flags;
    1e2c:	9c01      	ldr	r4, [sp, #4]
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	SCIF_UNLOCK_PLL_REG(pll_id);
    1e2e:	f101 0309 	add.w	r3, r1, #9
    1e32:	009b      	lsls	r3, r3, #2
    1e34:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    1e38:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    1e3c:	4a0a      	ldr	r2, [pc, #40]	; (1e68 <pll_enable+0x58>)
    1e3e:	6193      	str	r3, [r2, #24]
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl | SCIF_PLL_PLLEN;
    1e40:	6803      	ldr	r3, [r0, #0]
    1e42:	f043 0301 	orr.w	r3, r3, #1
    1e46:	3108      	adds	r1, #8
    1e48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e4c:	6053      	str	r3, [r2, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1e4e:	b12c      	cbz	r4, 1e5c <pll_enable+0x4c>
		cpu_irq_enable();
    1e50:	2201      	movs	r2, #1
    1e52:	4b04      	ldr	r3, [pc, #16]	; (1e64 <pll_enable+0x54>)
    1e54:	701a      	strb	r2, [r3, #0]
    1e56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e5a:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    1e5c:	b003      	add	sp, #12
    1e5e:	bc10      	pop	{r4}
    1e60:	4770      	bx	lr
    1e62:	bf00      	nop
    1e64:	20000104 	.word	0x20000104
    1e68:	400e0800 	.word	0x400e0800

00001e6c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1e6c:	b470      	push	{r4, r5, r6}
    1e6e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e70:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1e74:	fab3 f383 	clz	r3, r3
    1e78:	095b      	lsrs	r3, r3, #5
    1e7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1e7c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1e7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1e82:	2200      	movs	r2, #0
    1e84:	4b0e      	ldr	r3, [pc, #56]	; (1ec0 <sysclk_priv_enable_module+0x54>)
    1e86:	701a      	strb	r2, [r3, #0]
	return flags;
    1e88:	9d01      	ldr	r5, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1e8a:	0083      	lsls	r3, r0, #2
    1e8c:	4c0d      	ldr	r4, [pc, #52]	; (1ec4 <sysclk_priv_enable_module+0x58>)
    1e8e:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
	mask |= 1U << module_index;
    1e92:	2201      	movs	r2, #1
    1e94:	fa02 f101 	lsl.w	r1, r2, r1
    1e98:	4331      	orrs	r1, r6
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1e9a:	3320      	adds	r3, #32
    1e9c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1ea0:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    1ea4:	4a08      	ldr	r2, [pc, #32]	; (1ec8 <sysclk_priv_enable_module+0x5c>)
    1ea6:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1ea8:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
    1eac:	b12d      	cbz	r5, 1eba <sysclk_priv_enable_module+0x4e>
		cpu_irq_enable();
    1eae:	2201      	movs	r2, #1
    1eb0:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <sysclk_priv_enable_module+0x54>)
    1eb2:	701a      	strb	r2, [r3, #0]
    1eb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1eb8:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1eba:	b003      	add	sp, #12
    1ebc:	bc70      	pop	{r4, r5, r6}
    1ebe:	4770      	bx	lr
    1ec0:	20000104 	.word	0x20000104
    1ec4:	400e0020 	.word	0x400e0020
    1ec8:	400e0000 	.word	0x400e0000

00001ecc <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    1ecc:	b530      	push	{r4, r5, lr}
    1ece:	b083      	sub	sp, #12
    1ed0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1ed2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ed6:	fab3 f383 	clz	r3, r3
    1eda:	095b      	lsrs	r3, r3, #5
    1edc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1ede:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1ee0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ee4:	2200      	movs	r2, #0
    1ee6:	4b0c      	ldr	r3, [pc, #48]	; (1f18 <sysclk_enable_pba_module+0x4c>)
    1ee8:	701a      	strb	r2, [r3, #0]
	return flags;
    1eea:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1eec:	4b0b      	ldr	r3, [pc, #44]	; (1f1c <sysclk_enable_pba_module+0x50>)
    1eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ef0:	b163      	cbz	r3, 1f0c <sysclk_enable_pba_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
    1ef2:	b12d      	cbz	r5, 1f00 <sysclk_enable_pba_module+0x34>
		cpu_irq_enable();
    1ef4:	2201      	movs	r2, #1
    1ef6:	4b08      	ldr	r3, [pc, #32]	; (1f18 <sysclk_enable_pba_module+0x4c>)
    1ef8:	701a      	strb	r2, [r3, #0]
    1efa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1efe:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1f00:	4621      	mov	r1, r4
    1f02:	2002      	movs	r0, #2
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <sysclk_enable_pba_module+0x54>)
    1f06:	4798      	blx	r3
}
    1f08:	b003      	add	sp, #12
    1f0a:	bd30      	pop	{r4, r5, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1f0c:	2105      	movs	r1, #5
    1f0e:	2001      	movs	r0, #1
    1f10:	4b03      	ldr	r3, [pc, #12]	; (1f20 <sysclk_enable_pba_module+0x54>)
    1f12:	4798      	blx	r3
    1f14:	e7ed      	b.n	1ef2 <sysclk_enable_pba_module+0x26>
    1f16:	bf00      	nop
    1f18:	20000104 	.word	0x20000104
    1f1c:	400e0000 	.word	0x400e0000
    1f20:	00001e6d 	.word	0x00001e6d

00001f24 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1f24:	b530      	push	{r4, r5, lr}
    1f26:	b083      	sub	sp, #12
    1f28:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1f2a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1f2e:	fab3 f383 	clz	r3, r3
    1f32:	095b      	lsrs	r3, r3, #5
    1f34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1f36:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1f38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1f3c:	2200      	movs	r2, #0
    1f3e:	4b0c      	ldr	r3, [pc, #48]	; (1f70 <sysclk_enable_pbb_module+0x4c>)
    1f40:	701a      	strb	r2, [r3, #0]
	return flags;
    1f42:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1f44:	4b0b      	ldr	r3, [pc, #44]	; (1f74 <sysclk_enable_pbb_module+0x50>)
    1f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f48:	b163      	cbz	r3, 1f64 <sysclk_enable_pbb_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
    1f4a:	b12d      	cbz	r5, 1f58 <sysclk_enable_pbb_module+0x34>
		cpu_irq_enable();
    1f4c:	2201      	movs	r2, #1
    1f4e:	4b08      	ldr	r3, [pc, #32]	; (1f70 <sysclk_enable_pbb_module+0x4c>)
    1f50:	701a      	strb	r2, [r3, #0]
    1f52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f56:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1f58:	4621      	mov	r1, r4
    1f5a:	2003      	movs	r0, #3
    1f5c:	4b06      	ldr	r3, [pc, #24]	; (1f78 <sysclk_enable_pbb_module+0x54>)
    1f5e:	4798      	blx	r3
}
    1f60:	b003      	add	sp, #12
    1f62:	bd30      	pop	{r4, r5, pc}
    1f64:	2106      	movs	r1, #6
    1f66:	2001      	movs	r0, #1
    1f68:	4b03      	ldr	r3, [pc, #12]	; (1f78 <sysclk_enable_pbb_module+0x54>)
    1f6a:	4798      	blx	r3
    1f6c:	e7ed      	b.n	1f4a <sysclk_enable_pbb_module+0x26>
    1f6e:	bf00      	nop
    1f70:	20000104 	.word	0x20000104
    1f74:	400e0000 	.word	0x400e0000
    1f78:	00001e6d 	.word	0x00001e6d

00001f7c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1f7c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1f7e:	4ba8      	ldr	r3, [pc, #672]	; (2220 <sysclk_enable_peripheral_clock+0x2a4>)
    1f80:	4298      	cmp	r0, r3
    1f82:	f000 8190 	beq.w	22a6 <sysclk_enable_peripheral_clock+0x32a>
    1f86:	d920      	bls.n	1fca <sysclk_enable_peripheral_clock+0x4e>
    1f88:	4ba6      	ldr	r3, [pc, #664]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    1f8a:	4298      	cmp	r0, r3
    1f8c:	f000 81af 	beq.w	22ee <sysclk_enable_peripheral_clock+0x372>
    1f90:	f240 80ae 	bls.w	20f0 <sysclk_enable_peripheral_clock+0x174>
    1f94:	4ba4      	ldr	r3, [pc, #656]	; (2228 <sysclk_enable_peripheral_clock+0x2ac>)
    1f96:	4298      	cmp	r0, r3
    1f98:	f000 81b8 	beq.w	230c <sysclk_enable_peripheral_clock+0x390>
    1f9c:	f240 80ed 	bls.w	217a <sysclk_enable_peripheral_clock+0x1fe>
    1fa0:	4ba2      	ldr	r3, [pc, #648]	; (222c <sysclk_enable_peripheral_clock+0x2b0>)
    1fa2:	4298      	cmp	r0, r3
    1fa4:	f000 81bc 	beq.w	2320 <sysclk_enable_peripheral_clock+0x3a4>
    1fa8:	f200 8106 	bhi.w	21b8 <sysclk_enable_peripheral_clock+0x23c>
    1fac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    1fb0:	4298      	cmp	r0, r3
    1fb2:	f000 81b0 	beq.w	2316 <sysclk_enable_peripheral_clock+0x39a>
    1fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1fba:	4298      	cmp	r0, r3
    1fbc:	f040 80fb 	bne.w	21b6 <sysclk_enable_peripheral_clock+0x23a>
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    1fc0:	2102      	movs	r1, #2
    1fc2:	2005      	movs	r0, #5
    1fc4:	4b9a      	ldr	r3, [pc, #616]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    1fc6:	4798      	blx	r3
    1fc8:	bd08      	pop	{r3, pc}
    1fca:	f5a3 2390 	sub.w	r3, r3, #294912	; 0x48000
    1fce:	4298      	cmp	r0, r3
    1fd0:	f000 811b 	beq.w	220a <sysclk_enable_peripheral_clock+0x28e>
    1fd4:	d849      	bhi.n	206a <sysclk_enable_peripheral_clock+0xee>
    1fd6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1fda:	4298      	cmp	r0, r3
    1fdc:	f000 8109 	beq.w	21f2 <sysclk_enable_peripheral_clock+0x276>
    1fe0:	d821      	bhi.n	2026 <sysclk_enable_peripheral_clock+0xaa>
    1fe2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1fe6:	4298      	cmp	r0, r3
    1fe8:	f000 80f4 	beq.w	21d4 <sysclk_enable_peripheral_clock+0x258>
    1fec:	d912      	bls.n	2014 <sysclk_enable_peripheral_clock+0x98>
    1fee:	4b91      	ldr	r3, [pc, #580]	; (2234 <sysclk_enable_peripheral_clock+0x2b8>)
    1ff0:	4298      	cmp	r0, r3
    1ff2:	f000 80f3 	beq.w	21dc <sysclk_enable_peripheral_clock+0x260>
    1ff6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1ffa:	4298      	cmp	r0, r3
    1ffc:	d112      	bne.n	2024 <sysclk_enable_peripheral_clock+0xa8>
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    1ffe:	2003      	movs	r0, #3
    2000:	4b8d      	ldr	r3, [pc, #564]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2002:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2004:	4b87      	ldr	r3, [pc, #540]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    2006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    2008:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    200c:	498b      	ldr	r1, [pc, #556]	; (223c <sysclk_enable_peripheral_clock+0x2c0>)
    200e:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    2010:	641a      	str	r2, [r3, #64]	; 0x40
    2012:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    2014:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2018:	d103      	bne.n	2022 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_pba_module(SYSCLK_IISC);
    201a:	2000      	movs	r0, #0
    201c:	4b86      	ldr	r3, [pc, #536]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    201e:	4798      	blx	r3
		break;
    2020:	bd08      	pop	{r3, pc}
    2022:	bd08      	pop	{r3, pc}
    2024:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    2026:	4b86      	ldr	r3, [pc, #536]	; (2240 <sysclk_enable_peripheral_clock+0x2c4>)
    2028:	4298      	cmp	r0, r3
    202a:	f000 80e6 	beq.w	21fa <sysclk_enable_peripheral_clock+0x27e>
    202e:	d912      	bls.n	2056 <sysclk_enable_peripheral_clock+0xda>
    2030:	4b84      	ldr	r3, [pc, #528]	; (2244 <sysclk_enable_peripheral_clock+0x2c8>)
    2032:	4298      	cmp	r0, r3
    2034:	f000 80e5 	beq.w	2202 <sysclk_enable_peripheral_clock+0x286>
    2038:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    203c:	4298      	cmp	r0, r3
    203e:	d113      	bne.n	2068 <sysclk_enable_peripheral_clock+0xec>
	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
		break;

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    2040:	2008      	movs	r0, #8
    2042:	4b7d      	ldr	r3, [pc, #500]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2044:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    2046:	4b77      	ldr	r3, [pc, #476]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    2048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    204a:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    204e:	497b      	ldr	r1, [pc, #492]	; (223c <sysclk_enable_peripheral_clock+0x2c0>)
    2050:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    2052:	641a      	str	r2, [r3, #64]	; 0x40
    2054:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    2056:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    205a:	4298      	cmp	r0, r3
    205c:	d103      	bne.n	2066 <sysclk_enable_peripheral_clock+0xea>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    205e:	2005      	movs	r0, #5
    2060:	4b75      	ldr	r3, [pc, #468]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2062:	4798      	blx	r3
		break;
    2064:	bd08      	pop	{r3, pc}
    2066:	bd08      	pop	{r3, pc}
    2068:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    206a:	4b77      	ldr	r3, [pc, #476]	; (2248 <sysclk_enable_peripheral_clock+0x2cc>)
    206c:	4298      	cmp	r0, r3
    206e:	f000 810e 	beq.w	228e <sysclk_enable_peripheral_clock+0x312>
    2072:	d822      	bhi.n	20ba <sysclk_enable_peripheral_clock+0x13e>
    2074:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    2078:	4298      	cmp	r0, r3
    207a:	f000 80f9 	beq.w	2270 <sysclk_enable_peripheral_clock+0x2f4>
    207e:	d90b      	bls.n	2098 <sysclk_enable_peripheral_clock+0x11c>
    2080:	4b72      	ldr	r3, [pc, #456]	; (224c <sysclk_enable_peripheral_clock+0x2d0>)
    2082:	4298      	cmp	r0, r3
    2084:	f000 80ff 	beq.w	2286 <sysclk_enable_peripheral_clock+0x30a>
    2088:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    208c:	4298      	cmp	r0, r3
    208e:	d113      	bne.n	20b8 <sysclk_enable_peripheral_clock+0x13c>
	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
		break;

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    2090:	200d      	movs	r0, #13
    2092:	4b69      	ldr	r3, [pc, #420]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2094:	4798      	blx	r3
		break;
    2096:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    2098:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    209c:	4298      	cmp	r0, r3
    209e:	d10a      	bne.n	20b6 <sysclk_enable_peripheral_clock+0x13a>
		sysclk_enable_pba_module(SYSCLK_USART2);
    20a0:	200a      	movs	r0, #10
    20a2:	4b65      	ldr	r3, [pc, #404]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    20a4:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    20a6:	4b5f      	ldr	r3, [pc, #380]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    20a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    20aa:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    20ae:	4963      	ldr	r1, [pc, #396]	; (223c <sysclk_enable_peripheral_clock+0x2c0>)
    20b0:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    20b2:	641a      	str	r2, [r3, #64]	; 0x40
    20b4:	bd08      	pop	{r3, pc}
    20b6:	bd08      	pop	{r3, pc}
    20b8:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    20ba:	4b65      	ldr	r3, [pc, #404]	; (2250 <sysclk_enable_peripheral_clock+0x2d4>)
    20bc:	4298      	cmp	r0, r3
    20be:	f000 80ea 	beq.w	2296 <sysclk_enable_peripheral_clock+0x31a>
    20c2:	d90b      	bls.n	20dc <sysclk_enable_peripheral_clock+0x160>
    20c4:	4b63      	ldr	r3, [pc, #396]	; (2254 <sysclk_enable_peripheral_clock+0x2d8>)
    20c6:	4298      	cmp	r0, r3
    20c8:	f000 80e9 	beq.w	229e <sysclk_enable_peripheral_clock+0x322>
    20cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    20d0:	4298      	cmp	r0, r3
    20d2:	d10c      	bne.n	20ee <sysclk_enable_peripheral_clock+0x172>
	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
		break;

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    20d4:	2012      	movs	r0, #18
    20d6:	4b58      	ldr	r3, [pc, #352]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    20d8:	4798      	blx	r3
		break;
    20da:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    20dc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    20e0:	4298      	cmp	r0, r3
    20e2:	d103      	bne.n	20ec <sysclk_enable_peripheral_clock+0x170>
		sysclk_enable_pba_module(SYSCLK_GLOC);
    20e4:	200f      	movs	r0, #15
    20e6:	4b54      	ldr	r3, [pc, #336]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    20e8:	4798      	blx	r3
		break;
    20ea:	bd08      	pop	{r3, pc}
    20ec:	bd08      	pop	{r3, pc}
    20ee:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    20f0:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
    20f4:	4298      	cmp	r0, r3
    20f6:	f000 80e6 	beq.w	22c6 <sysclk_enable_peripheral_clock+0x34a>
    20fa:	d81f      	bhi.n	213c <sysclk_enable_peripheral_clock+0x1c0>
    20fc:	f5a3 3314 	sub.w	r3, r3, #151552	; 0x25000
    2100:	4298      	cmp	r0, r3
    2102:	f000 80d4 	beq.w	22ae <sysclk_enable_peripheral_clock+0x332>
    2106:	d90f      	bls.n	2128 <sysclk_enable_peripheral_clock+0x1ac>
    2108:	4b53      	ldr	r3, [pc, #332]	; (2258 <sysclk_enable_peripheral_clock+0x2dc>)
    210a:	4298      	cmp	r0, r3
    210c:	f000 80d3 	beq.w	22b6 <sysclk_enable_peripheral_clock+0x33a>
    2110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2114:	4298      	cmp	r0, r3
    2116:	d110      	bne.n	213a <sysclk_enable_peripheral_clock+0x1be>
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2118:	2102      	movs	r1, #2
    211a:	2001      	movs	r0, #1
    211c:	4b44      	ldr	r3, [pc, #272]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    211e:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
		break;

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    2120:	2001      	movs	r0, #1
    2122:	4b4e      	ldr	r3, [pc, #312]	; (225c <sysclk_enable_peripheral_clock+0x2e0>)
    2124:	4798      	blx	r3
		break;
    2126:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    2128:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    212c:	4298      	cmp	r0, r3
    212e:	d103      	bne.n	2138 <sysclk_enable_peripheral_clock+0x1bc>
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    2130:	2015      	movs	r0, #21
    2132:	4b41      	ldr	r3, [pc, #260]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2134:	4798      	blx	r3
		break;
    2136:	bd08      	pop	{r3, pc}
    2138:	bd08      	pop	{r3, pc}
    213a:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    213c:	4b48      	ldr	r3, [pc, #288]	; (2260 <sysclk_enable_peripheral_clock+0x2e4>)
    213e:	4298      	cmp	r0, r3
    2140:	f000 80c5 	beq.w	22ce <sysclk_enable_peripheral_clock+0x352>
    2144:	d90b      	bls.n	215e <sysclk_enable_peripheral_clock+0x1e2>
    2146:	4b47      	ldr	r3, [pc, #284]	; (2264 <sysclk_enable_peripheral_clock+0x2e8>)
    2148:	4298      	cmp	r0, r3
    214a:	f000 80c8 	beq.w	22de <sysclk_enable_peripheral_clock+0x362>
    214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2152:	4298      	cmp	r0, r3
    2154:	d110      	bne.n	2178 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
		break;

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    2156:	2006      	movs	r0, #6
    2158:	4b40      	ldr	r3, [pc, #256]	; (225c <sysclk_enable_peripheral_clock+0x2e0>)
    215a:	4798      	blx	r3
		break;
    215c:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    215e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    2162:	4298      	cmp	r0, r3
    2164:	d107      	bne.n	2176 <sysclk_enable_peripheral_clock+0x1fa>
    2166:	2100      	movs	r1, #0
    2168:	2001      	movs	r0, #1
    216a:	4b31      	ldr	r3, [pc, #196]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    216c:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    216e:	2003      	movs	r0, #3
    2170:	4b3a      	ldr	r3, [pc, #232]	; (225c <sysclk_enable_peripheral_clock+0x2e0>)
    2172:	4798      	blx	r3
		break;
    2174:	bd08      	pop	{r3, pc}
    2176:	bd08      	pop	{r3, pc}
    2178:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    217a:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    217e:	4298      	cmp	r0, r3
    2180:	f000 80ba 	beq.w	22f8 <sysclk_enable_peripheral_clock+0x37c>
    2184:	d90c      	bls.n	21a0 <sysclk_enable_peripheral_clock+0x224>
    2186:	4b38      	ldr	r3, [pc, #224]	; (2268 <sysclk_enable_peripheral_clock+0x2ec>)
    2188:	4298      	cmp	r0, r3
    218a:	f000 80ba 	beq.w	2302 <sysclk_enable_peripheral_clock+0x386>
    218e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2192:	4298      	cmp	r0, r3
    2194:	d10e      	bne.n	21b4 <sysclk_enable_peripheral_clock+0x238>
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2196:	2104      	movs	r1, #4
    2198:	4608      	mov	r0, r1
    219a:	4b25      	ldr	r3, [pc, #148]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    219c:	4798      	blx	r3
    219e:	bd08      	pop	{r3, pc}
    21a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    21a4:	4298      	cmp	r0, r3
    21a6:	d104      	bne.n	21b2 <sysclk_enable_peripheral_clock+0x236>
    21a8:	2101      	movs	r1, #1
    21aa:	2004      	movs	r0, #4
    21ac:	4b20      	ldr	r3, [pc, #128]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    21ae:	4798      	blx	r3
    21b0:	bd08      	pop	{r3, pc}
    21b2:	bd08      	pop	{r3, pc}
    21b4:	bd08      	pop	{r3, pc}
    21b6:	bd08      	pop	{r3, pc}
    21b8:	4b2c      	ldr	r3, [pc, #176]	; (226c <sysclk_enable_peripheral_clock+0x2f0>)
    21ba:	4298      	cmp	r0, r3
    21bc:	f000 80b5 	beq.w	232a <sysclk_enable_peripheral_clock+0x3ae>
    21c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    21c4:	4298      	cmp	r0, r3
    21c6:	d104      	bne.n	21d2 <sysclk_enable_peripheral_clock+0x256>
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    21c8:	2105      	movs	r1, #5
    21ca:	4608      	mov	r0, r1
    21cc:	4b18      	ldr	r3, [pc, #96]	; (2230 <sysclk_enable_peripheral_clock+0x2b4>)
    21ce:	4798      	blx	r3
    21d0:	bd08      	pop	{r3, pc}
    21d2:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_SPI);
    21d4:	2001      	movs	r0, #1
    21d6:	4b18      	ldr	r3, [pc, #96]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    21d8:	4798      	blx	r3
		break;
    21da:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TC0);
    21dc:	2002      	movs	r0, #2
    21de:	4b16      	ldr	r3, [pc, #88]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    21e0:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    21e2:	4b10      	ldr	r3, [pc, #64]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    21e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    21e6:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    21ea:	4914      	ldr	r1, [pc, #80]	; (223c <sysclk_enable_peripheral_clock+0x2c0>)
    21ec:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    21ee:	641a      	str	r2, [r3, #64]	; 0x40
    21f0:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    21f2:	2004      	movs	r0, #4
    21f4:	4b10      	ldr	r3, [pc, #64]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    21f6:	4798      	blx	r3
		break;
    21f8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    21fa:	2006      	movs	r0, #6
    21fc:	4b0e      	ldr	r3, [pc, #56]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    21fe:	4798      	blx	r3
		break;
    2200:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    2202:	2007      	movs	r0, #7
    2204:	4b0c      	ldr	r3, [pc, #48]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    2206:	4798      	blx	r3
		break;
    2208:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_USART1);
    220a:	2009      	movs	r0, #9
    220c:	4b0a      	ldr	r3, [pc, #40]	; (2238 <sysclk_enable_peripheral_clock+0x2bc>)
    220e:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    2210:	4b04      	ldr	r3, [pc, #16]	; (2224 <sysclk_enable_peripheral_clock+0x2a8>)
    2212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    2214:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2218:	4908      	ldr	r1, [pc, #32]	; (223c <sysclk_enable_peripheral_clock+0x2c0>)
    221a:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    221c:	641a      	str	r2, [r3, #64]	; 0x40
    221e:	bd08      	pop	{r3, pc}
    2220:	40070000 	.word	0x40070000
    2224:	400e0000 	.word	0x400e0000
    2228:	400f0000 	.word	0x400f0000
    222c:	400f0c00 	.word	0x400f0c00
    2230:	00001e6d 	.word	0x00001e6d
    2234:	40010000 	.word	0x40010000
    2238:	00001ecd 	.word	0x00001ecd
    223c:	aa000040 	.word	0xaa000040
    2240:	4001c000 	.word	0x4001c000
    2244:	4001c400 	.word	0x4001c400
    2248:	40040000 	.word	0x40040000
    224c:	40038000 	.word	0x40038000
    2250:	40064000 	.word	0x40064000
    2254:	40068000 	.word	0x40068000
    2258:	400a0000 	.word	0x400a0000
    225c:	00001f25 	.word	0x00001f25
    2260:	400a4000 	.word	0x400a4000
    2264:	400a5000 	.word	0x400a5000
    2268:	400e0c00 	.word	0x400e0c00
    226c:	400f1000 	.word	0x400f1000
		sysclk_enable_pba_module(SYSCLK_USART3);
    2270:	200b      	movs	r0, #11
    2272:	4b30      	ldr	r3, [pc, #192]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    2274:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
    2276:	4b30      	ldr	r3, [pc, #192]	; (2338 <sysclk_enable_peripheral_clock+0x3bc>)
    2278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    227a:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    227e:	492f      	ldr	r1, [pc, #188]	; (233c <sysclk_enable_peripheral_clock+0x3c0>)
    2280:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
    2282:	641a      	str	r2, [r3, #64]	; 0x40
    2284:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    2286:	200c      	movs	r0, #12
    2288:	4b2a      	ldr	r3, [pc, #168]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    228a:	4798      	blx	r3
		break;
    228c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    228e:	200e      	movs	r0, #14
    2290:	4b28      	ldr	r3, [pc, #160]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    2292:	4798      	blx	r3
		break;
    2294:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    2296:	2010      	movs	r0, #16
    2298:	4b26      	ldr	r3, [pc, #152]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    229a:	4798      	blx	r3
		break;
    229c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TRNG);
    229e:	2011      	movs	r0, #17
    22a0:	4b24      	ldr	r3, [pc, #144]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    22a2:	4798      	blx	r3
		break;
    22a4:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_CATB);
    22a6:	2013      	movs	r0, #19
    22a8:	4b22      	ldr	r3, [pc, #136]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    22aa:	4798      	blx	r3
		break;
    22ac:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    22ae:	2016      	movs	r0, #22
    22b0:	4b20      	ldr	r3, [pc, #128]	; (2334 <sysclk_enable_peripheral_clock+0x3b8>)
    22b2:	4798      	blx	r3
		break;
    22b4:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    22b6:	2101      	movs	r1, #1
    22b8:	4608      	mov	r0, r1
    22ba:	4b21      	ldr	r3, [pc, #132]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    22bc:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    22be:	2000      	movs	r0, #0
    22c0:	4b20      	ldr	r3, [pc, #128]	; (2344 <sysclk_enable_peripheral_clock+0x3c8>)
    22c2:	4798      	blx	r3
		break;
    22c4:	bd08      	pop	{r3, pc}
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    22c6:	2002      	movs	r0, #2
    22c8:	4b1e      	ldr	r3, [pc, #120]	; (2344 <sysclk_enable_peripheral_clock+0x3c8>)
    22ca:	4798      	blx	r3
		break;
    22cc:	bd08      	pop	{r3, pc}
    22ce:	2104      	movs	r1, #4
    22d0:	2001      	movs	r0, #1
    22d2:	4b1b      	ldr	r3, [pc, #108]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    22d4:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    22d6:	2004      	movs	r0, #4
    22d8:	4b1a      	ldr	r3, [pc, #104]	; (2344 <sysclk_enable_peripheral_clock+0x3c8>)
    22da:	4798      	blx	r3
		break;
    22dc:	bd08      	pop	{r3, pc}
    22de:	2103      	movs	r1, #3
    22e0:	2001      	movs	r0, #1
    22e2:	4b17      	ldr	r3, [pc, #92]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    22e4:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    22e6:	2005      	movs	r0, #5
    22e8:	4b16      	ldr	r3, [pc, #88]	; (2344 <sysclk_enable_peripheral_clock+0x3c8>)
    22ea:	4798      	blx	r3
		break;
    22ec:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    22ee:	2100      	movs	r1, #0
    22f0:	2004      	movs	r0, #4
    22f2:	4b13      	ldr	r3, [pc, #76]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    22f4:	4798      	blx	r3
    22f6:	bd08      	pop	{r3, pc}
    22f8:	2102      	movs	r1, #2
    22fa:	2004      	movs	r0, #4
    22fc:	4b10      	ldr	r3, [pc, #64]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    22fe:	4798      	blx	r3
    2300:	bd08      	pop	{r3, pc}
    2302:	2103      	movs	r1, #3
    2304:	2004      	movs	r0, #4
    2306:	4b0e      	ldr	r3, [pc, #56]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    2308:	4798      	blx	r3
    230a:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    230c:	2100      	movs	r1, #0
    230e:	2005      	movs	r0, #5
    2310:	4b0b      	ldr	r3, [pc, #44]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    2312:	4798      	blx	r3
    2314:	bd08      	pop	{r3, pc}
    2316:	2101      	movs	r1, #1
    2318:	2005      	movs	r0, #5
    231a:	4b09      	ldr	r3, [pc, #36]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    231c:	4798      	blx	r3
    231e:	bd08      	pop	{r3, pc}
    2320:	2103      	movs	r1, #3
    2322:	2005      	movs	r0, #5
    2324:	4b06      	ldr	r3, [pc, #24]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    2326:	4798      	blx	r3
    2328:	bd08      	pop	{r3, pc}
    232a:	2104      	movs	r1, #4
    232c:	2005      	movs	r0, #5
    232e:	4b04      	ldr	r3, [pc, #16]	; (2340 <sysclk_enable_peripheral_clock+0x3c4>)
    2330:	4798      	blx	r3
    2332:	bd08      	pop	{r3, pc}
    2334:	00001ecd 	.word	0x00001ecd
    2338:	400e0000 	.word	0x400e0000
    233c:	aa000040 	.word	0xaa000040
    2340:	00001e6d 	.word	0x00001e6d
    2344:	00001f25 	.word	0x00001f25

00002348 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    2348:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    234a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    234e:	fab3 f383 	clz	r3, r3
    2352:	095b      	lsrs	r3, r3, #5
    2354:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2356:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2358:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    235c:	2200      	movs	r2, #0
    235e:	4b08      	ldr	r3, [pc, #32]	; (2380 <sysclk_set_source+0x38>)
    2360:	701a      	strb	r2, [r3, #0]
	return flags;
    2362:	9a01      	ldr	r2, [sp, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2364:	4b07      	ldr	r3, [pc, #28]	; (2384 <sysclk_set_source+0x3c>)
    2366:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    236a:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    236c:	6018      	str	r0, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
    236e:	b12a      	cbz	r2, 237c <sysclk_set_source+0x34>
		cpu_irq_enable();
    2370:	2201      	movs	r2, #1
    2372:	4b03      	ldr	r3, [pc, #12]	; (2380 <sysclk_set_source+0x38>)
    2374:	701a      	strb	r2, [r3, #0]
    2376:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    237a:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    237c:	b002      	add	sp, #8
    237e:	4770      	bx	lr
    2380:	20000104 	.word	0x20000104
    2384:	400e0000 	.word	0x400e0000

00002388 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
    2388:	b500      	push	{lr}
    238a:	b083      	sub	sp, #12
	// Note: the SYSCLK_PBB_BRIDGE clock is enabled by
	// sysclk_enable_pbb_module().
	sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    238c:	2005      	movs	r0, #5
    238e:	4b16      	ldr	r3, [pc, #88]	; (23e8 <sysclk_enable_usb+0x60>)
    2390:	4798      	blx	r3
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2392:	2103      	movs	r1, #3
    2394:	2001      	movs	r0, #1
    2396:	4b15      	ldr	r3, [pc, #84]	; (23ec <sysclk_enable_usb+0x64>)
    2398:	4798      	blx	r3
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    239a:	4b15      	ldr	r3, [pc, #84]	; (23f0 <sysclk_enable_usb+0x68>)
    239c:	695b      	ldr	r3, [r3, #20]

static inline void pll_enable_config_defaults(uint32_t pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    239e:	f013 0f40 	tst.w	r3, #64	; 0x40
    23a2:	d110      	bne.n	23c6 <sysclk_enable_usb+0x3e>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    23a4:	4b12      	ldr	r3, [pc, #72]	; (23f0 <sysclk_enable_usb+0x68>)
    23a6:	695b      	ldr	r3, [r3, #20]
		if (!osc_is_ready(OSC_ID_OSC0)) {
    23a8:	f013 0f01 	tst.w	r3, #1
    23ac:	d013      	beq.n	23d6 <sysclk_enable_usb+0x4e>
	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    23ae:	a802      	add	r0, sp, #8
    23b0:	4b10      	ldr	r3, [pc, #64]	; (23f4 <sysclk_enable_usb+0x6c>)
    23b2:	f840 3d04 	str.w	r3, [r0, #-4]!
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
    23b6:	2100      	movs	r1, #0
    23b8:	4b0f      	ldr	r3, [pc, #60]	; (23f8 <sysclk_enable_usb+0x70>)
    23ba:	4798      	blx	r3
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    23bc:	4a0c      	ldr	r2, [pc, #48]	; (23f0 <sysclk_enable_usb+0x68>)
    23be:	6953      	ldr	r3, [r2, #20]
	while (!pll_is_locked(pll_id));
    23c0:	f013 0f40 	tst.w	r3, #64	; 0x40
    23c4:	d0fb      	beq.n	23be <sysclk_enable_usb+0x36>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    23c6:	f241 0201 	movw	r2, #4097	; 0x1001
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <sysclk_enable_usb+0x68>)
    23cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sysclk_enable_hsb_module(SYSCLK_USBC_DATA);

	genclk_enable_config(7, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
    23d0:	b003      	add	sp, #12
    23d2:	f85d fb04 	ldr.w	pc, [sp], #4
		osc_priv_enable_osc0();
    23d6:	4b09      	ldr	r3, [pc, #36]	; (23fc <sysclk_enable_usb+0x74>)
    23d8:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    23da:	4a05      	ldr	r2, [pc, #20]	; (23f0 <sysclk_enable_usb+0x68>)
    23dc:	6953      	ldr	r3, [r2, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    23de:	f013 0f01 	tst.w	r3, #1
    23e2:	d0fb      	beq.n	23dc <sysclk_enable_usb+0x54>
    23e4:	e7e3      	b.n	23ae <sysclk_enable_usb+0x26>
    23e6:	bf00      	nop
    23e8:	00001f25 	.word	0x00001f25
    23ec:	00001e6d 	.word	0x00001e6d
    23f0:	400e0800 	.word	0x400e0800
    23f4:	3f050110 	.word	0x3f050110
    23f8:	00001e11 	.word	0x00001e11
    23fc:	00001dc9 	.word	0x00001dc9

00002400 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    2400:	b530      	push	{r4, r5, lr}
    2402:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    2404:	4c1d      	ldr	r4, [pc, #116]	; (247c <sysclk_init+0x7c>)
    2406:	4620      	mov	r0, r4
    2408:	4b1d      	ldr	r3, [pc, #116]	; (2480 <sysclk_init+0x80>)
    240a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    240c:	2301      	movs	r3, #1
    240e:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    2410:	4622      	mov	r2, r4
    2412:	68d3      	ldr	r3, [r2, #12]
    2414:	f013 0f01 	tst.w	r3, #1
    2418:	d0fb      	beq.n	2412 <sysclk_init+0x12>
		osc_priv_enable_osc0();
    241a:	4b1a      	ldr	r3, [pc, #104]	; (2484 <sysclk_init+0x84>)
    241c:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    241e:	4a1a      	ldr	r2, [pc, #104]	; (2488 <sysclk_init+0x88>)
    2420:	6953      	ldr	r3, [r2, #20]
    2422:	f013 0f01 	tst.w	r3, #1
    2426:	d0fb      	beq.n	2420 <sysclk_init+0x20>
#ifdef BOARD_OSC0_HZ
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_OSC0) {
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    2428:	2200      	movs	r2, #0
    242a:	4611      	mov	r1, r2
    242c:	4817      	ldr	r0, [pc, #92]	; (248c <sysclk_init+0x8c>)
    242e:	4b18      	ldr	r3, [pc, #96]	; (2490 <sysclk_init+0x90>)
    2430:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_OSC0);
    2432:	2001      	movs	r0, #1
    2434:	4b17      	ldr	r3, [pc, #92]	; (2494 <sysclk_init+0x94>)
    2436:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    2438:	4a17      	ldr	r2, [pc, #92]	; (2498 <sysclk_init+0x98>)
    243a:	2100      	movs	r1, #0
    243c:	4817      	ldr	r0, [pc, #92]	; (249c <sysclk_init+0x9c>)
    243e:	4b18      	ldr	r3, [pc, #96]	; (24a0 <sysclk_init+0xa0>)
    2440:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    2442:	4d16      	ldr	r5, [pc, #88]	; (249c <sysclk_init+0x9c>)
    2444:	4c17      	ldr	r4, [pc, #92]	; (24a4 <sysclk_init+0xa4>)
    2446:	4628      	mov	r0, r5
    2448:	47a0      	blx	r4
    244a:	f010 0f01 	tst.w	r0, #1
    244e:	d0fa      	beq.n	2446 <sysclk_init+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2450:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2454:	fab3 f383 	clz	r3, r3
    2458:	095b      	lsrs	r3, r3, #5
    245a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    245c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    245e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2462:	2200      	movs	r2, #0
    2464:	4b10      	ldr	r3, [pc, #64]	; (24a8 <sysclk_init+0xa8>)
    2466:	701a      	strb	r2, [r3, #0]
	return flags;
    2468:	9b01      	ldr	r3, [sp, #4]
	if (cpu_irq_is_enabled_flags(flags))
    246a:	b12b      	cbz	r3, 2478 <sysclk_init+0x78>
		cpu_irq_enable();
    246c:	2201      	movs	r2, #1
    246e:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <sysclk_init+0xa8>)
    2470:	701a      	strb	r2, [r3, #0]
    2472:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2476:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    2478:	b003      	add	sp, #12
    247a:	bd30      	pop	{r4, r5, pc}
    247c:	400a0400 	.word	0x400a0400
    2480:	00001f7d 	.word	0x00001f7d
    2484:	00001dc9 	.word	0x00001dc9
    2488:	400e0800 	.word	0x400e0800
    248c:	00f42400 	.word	0x00f42400
    2490:	00002671 	.word	0x00002671
    2494:	00002349 	.word	0x00002349
    2498:	0003a980 	.word	0x0003a980
    249c:	400f0000 	.word	0x400f0000
    24a0:	000024ad 	.word	0x000024ad
    24a4:	00002539 	.word	0x00002539
    24a8:	20000104 	.word	0x20000104

000024ac <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    24ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24b0:	b083      	sub	sp, #12
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    24b2:	69c3      	ldr	r3, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    24b4:	f023 0e03 	bic.w	lr, r3, #3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24b8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    24bc:	fab3 f383 	clz	r3, r3
    24c0:	095b      	lsrs	r3, r3, #5
    24c2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    24c4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    24c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    24ca:	2500      	movs	r5, #0
    24cc:	4b11      	ldr	r3, [pc, #68]	; (2514 <bpm_power_scaling_cpu_failsafe+0x68>)
    24ce:	701d      	strb	r5, [r3, #0]
	return flags;
    24d0:	9e01      	ldr	r6, [sp, #4]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    24d2:	4c11      	ldr	r4, [pc, #68]	; (2518 <bpm_power_scaling_cpu_failsafe+0x6c>)
    24d4:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    24d8:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    24da:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    24de:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    24e0:	2305      	movs	r3, #5
    24e2:	6023      	str	r3, [r4, #0]
	pmcon |= BPM_PMCON_PS(ps_value);
    24e4:	f001 0103 	and.w	r1, r1, #3
	pmcon |= BPM_PMCON_PSCREQ;
    24e8:	f041 010c 	orr.w	r1, r1, #12

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    24ec:	ea41 010e 	orr.w	r1, r1, lr
    24f0:	4b0a      	ldr	r3, [pc, #40]	; (251c <bpm_power_scaling_cpu_failsafe+0x70>)
    24f2:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    24f4:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    24f6:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    24fa:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    24fe:	6027      	str	r7, [r4, #0]
	if (cpu_irq_is_enabled_flags(flags))
    2500:	b12e      	cbz	r6, 250e <bpm_power_scaling_cpu_failsafe+0x62>
		cpu_irq_enable();
    2502:	2201      	movs	r2, #1
    2504:	4b03      	ldr	r3, [pc, #12]	; (2514 <bpm_power_scaling_cpu_failsafe+0x68>)
    2506:	701a      	strb	r2, [r3, #0]
    2508:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    250c:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    250e:	b003      	add	sp, #12
    2510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2514:	20000104 	.word	0x20000104
    2518:	e000e010 	.word	0xe000e010
    251c:	20000001 	.word	0x20000001

00002520 <bpm_enable_fast_wakeup>:
	bpm->BPM_PMCON = pmcon;
}

void bpm_enable_fast_wakeup(Bpm *bpm)
{
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    2520:	69c3      	ldr	r3, [r0, #28]
    2522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	BPM_UNLOCK(PMCON);
    2526:	4902      	ldr	r1, [pc, #8]	; (2530 <bpm_enable_fast_wakeup+0x10>)
    2528:	4a02      	ldr	r2, [pc, #8]	; (2534 <bpm_enable_fast_wakeup+0x14>)
    252a:	6191      	str	r1, [r2, #24]
	bpm->BPM_PMCON = pmcon;
    252c:	61c3      	str	r3, [r0, #28]
    252e:	4770      	bx	lr
    2530:	aa00001c 	.word	0xaa00001c
    2534:	400f0000 	.word	0x400f0000

00002538 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    2538:	6940      	ldr	r0, [r0, #20]
}
    253a:	4770      	bx	lr

0000253c <eic_line_interrupt>:
 * eic_line_set_callback() function.
 *
 * \param [in]  line_number EIC line number to handle interrupt for
 */
static void eic_line_interrupt(uint8_t line_number)
{
    253c:	b508      	push	{r3, lr}
	if (eic_callback_pointer[line_number]) {
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <eic_line_interrupt+0x10>)
    2540:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2544:	b103      	cbz	r3, 2548 <eic_line_interrupt+0xc>
		eic_callback_pointer[line_number]();
    2546:	4798      	blx	r3
    2548:	bd08      	pop	{r3, pc}
    254a:	bf00      	nop
    254c:	20000db4 	.word	0x20000db4

00002550 <NMI_Handler>:

/**
 * \brief Interrupt handler for EIC NMI.
 */
void NMI_Handler(void)
{
    2550:	b508      	push	{r3, lr}
	eic_line_interrupt(0);
    2552:	2000      	movs	r0, #0
    2554:	4b01      	ldr	r3, [pc, #4]	; (255c <NMI_Handler+0xc>)
    2556:	4798      	blx	r3
    2558:	bd08      	pop	{r3, pc}
    255a:	bf00      	nop
    255c:	0000253d 	.word	0x0000253d

00002560 <EIC_1_Handler>:

/**
 * \brief Interrupt handler for EIC line 1.
 */
void EIC_1_Handler(void)
{
    2560:	b508      	push	{r3, lr}
	eic_line_interrupt(1);
    2562:	2001      	movs	r0, #1
    2564:	4b01      	ldr	r3, [pc, #4]	; (256c <EIC_1_Handler+0xc>)
    2566:	4798      	blx	r3
    2568:	bd08      	pop	{r3, pc}
    256a:	bf00      	nop
    256c:	0000253d 	.word	0x0000253d

00002570 <EIC_2_Handler>:

/**
 * \brief Interrupt handler for EIC line 2.
 */
void EIC_2_Handler(void)
{
    2570:	b508      	push	{r3, lr}
	eic_line_interrupt(2);
    2572:	2002      	movs	r0, #2
    2574:	4b01      	ldr	r3, [pc, #4]	; (257c <EIC_2_Handler+0xc>)
    2576:	4798      	blx	r3
    2578:	bd08      	pop	{r3, pc}
    257a:	bf00      	nop
    257c:	0000253d 	.word	0x0000253d

00002580 <EIC_3_Handler>:

/**
 * \brief Interrupt handler for EIC line 3.
 */
void EIC_3_Handler(void)
{
    2580:	b508      	push	{r3, lr}
	eic_line_interrupt(3);
    2582:	2003      	movs	r0, #3
    2584:	4b01      	ldr	r3, [pc, #4]	; (258c <EIC_3_Handler+0xc>)
    2586:	4798      	blx	r3
    2588:	bd08      	pop	{r3, pc}
    258a:	bf00      	nop
    258c:	0000253d 	.word	0x0000253d

00002590 <EIC_4_Handler>:

/**
 * \brief Interrupt handler for EIC line 4.
 */
void EIC_4_Handler(void)
{
    2590:	b508      	push	{r3, lr}
	eic_line_interrupt(4);
    2592:	2004      	movs	r0, #4
    2594:	4b01      	ldr	r3, [pc, #4]	; (259c <EIC_4_Handler+0xc>)
    2596:	4798      	blx	r3
    2598:	bd08      	pop	{r3, pc}
    259a:	bf00      	nop
    259c:	0000253d 	.word	0x0000253d

000025a0 <EIC_5_Handler>:

/**
 * \brief Interrupt handler for EIC line 5.
 */
void EIC_5_Handler(void)
{
    25a0:	b508      	push	{r3, lr}
	eic_line_interrupt(5);
    25a2:	2005      	movs	r0, #5
    25a4:	4b01      	ldr	r3, [pc, #4]	; (25ac <EIC_5_Handler+0xc>)
    25a6:	4798      	blx	r3
    25a8:	bd08      	pop	{r3, pc}
    25aa:	bf00      	nop
    25ac:	0000253d 	.word	0x0000253d

000025b0 <EIC_6_Handler>:

/**
 * \brief Interrupt handler for EIC line 6.
 */
void EIC_6_Handler(void)
{
    25b0:	b508      	push	{r3, lr}
	eic_line_interrupt(6);
    25b2:	2006      	movs	r0, #6
    25b4:	4b01      	ldr	r3, [pc, #4]	; (25bc <EIC_6_Handler+0xc>)
    25b6:	4798      	blx	r3
    25b8:	bd08      	pop	{r3, pc}
    25ba:	bf00      	nop
    25bc:	0000253d 	.word	0x0000253d

000025c0 <EIC_7_Handler>:

/**
 * \brief Interrupt handler for EIC line 7.
 */
void EIC_7_Handler(void)
{
    25c0:	b508      	push	{r3, lr}
	eic_line_interrupt(7);
    25c2:	2007      	movs	r0, #7
    25c4:	4b01      	ldr	r3, [pc, #4]	; (25cc <EIC_7_Handler+0xc>)
    25c6:	4798      	blx	r3
    25c8:	bd08      	pop	{r3, pc}
    25ca:	bf00      	nop
    25cc:	0000253d 	.word	0x0000253d

000025d0 <EIC_8_Handler>:

/**
 * \brief Interrupt handler for EIC line 8.
 */
void EIC_8_Handler(void)
{
    25d0:	b508      	push	{r3, lr}
	eic_line_interrupt(8);
    25d2:	2008      	movs	r0, #8
    25d4:	4b01      	ldr	r3, [pc, #4]	; (25dc <EIC_8_Handler+0xc>)
    25d6:	4798      	blx	r3
    25d8:	bd08      	pop	{r3, pc}
    25da:	bf00      	nop
    25dc:	0000253d 	.word	0x0000253d

000025e0 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    25e0:	4b05      	ldr	r3, [pc, #20]	; (25f8 <flashcalw_set_wait_state+0x18>)
    25e2:	681a      	ldr	r2, [r3, #0]
    25e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    25e8:	2800      	cmp	r0, #0
    25ea:	bf14      	ite	ne
    25ec:	2340      	movne	r3, #64	; 0x40
    25ee:	2300      	moveq	r3, #0
    25f0:	4313      	orrs	r3, r2
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    25f2:	4a01      	ldr	r2, [pc, #4]	; (25f8 <flashcalw_set_wait_state+0x18>)
    25f4:	6013      	str	r3, [r2, #0]
    25f6:	4770      	bx	lr
    25f8:	400a0000 	.word	0x400a0000

000025fc <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    25fc:	4b02      	ldr	r3, [pc, #8]	; (2608 <flashcalw_is_ready+0xc>)
    25fe:	6898      	ldr	r0, [r3, #8]
}
    2600:	f000 0001 	and.w	r0, r0, #1
    2604:	4770      	bx	lr
    2606:	bf00      	nop
    2608:	400a0000 	.word	0x400a0000

0000260c <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    260c:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    260e:	4c02      	ldr	r4, [pc, #8]	; (2618 <flashcalw_default_wait_until_ready+0xc>)
    2610:	47a0      	blx	r4
    2612:	2800      	cmp	r0, #0
    2614:	d0fc      	beq.n	2610 <flashcalw_default_wait_until_ready+0x4>
	}
}
    2616:	bd10      	pop	{r4, pc}
    2618:	000025fd 	.word	0x000025fd

0000261c <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    261c:	b538      	push	{r3, r4, r5, lr}
    261e:	4605      	mov	r5, r0
    2620:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    2622:	4b10      	ldr	r3, [pc, #64]	; (2664 <flashcalw_issue_command+0x48>)
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    2628:	4b0f      	ldr	r3, [pc, #60]	; (2668 <flashcalw_issue_command+0x4c>)
    262a:	685b      	ldr	r3, [r3, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    262c:	2c00      	cmp	r4, #0
    262e:	db12      	blt.n	2656 <flashcalw_issue_command+0x3a>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    2630:	0224      	lsls	r4, r4, #8
    2632:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2636:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
		tempo = (FLASHCALW_FCMD_KEY_KEY
    263a:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    263e:	432c      	orrs	r4, r5
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    2640:	4b09      	ldr	r3, [pc, #36]	; (2668 <flashcalw_issue_command+0x4c>)
    2642:	605c      	str	r4, [r3, #4]
	return HFLASHC->FLASHCALW_FSR &
    2644:	689b      	ldr	r3, [r3, #8]
    2646:	f003 030c 	and.w	r3, r3, #12
	flashcalw_error_status = flashcalw_get_error_status();
    264a:	4a08      	ldr	r2, [pc, #32]	; (266c <flashcalw_issue_command+0x50>)
    264c:	6013      	str	r3, [r2, #0]
	flashcalw_wait_until_ready();
    264e:	4b05      	ldr	r3, [pc, #20]	; (2664 <flashcalw_issue_command+0x48>)
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	4798      	blx	r3
    2654:	bd38      	pop	{r3, r4, r5, pc}
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    2656:	f023 043f 	bic.w	r4, r3, #63	; 0x3f
    265a:	f044 4425 	orr.w	r4, r4, #2768240640	; 0xa5000000
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    265e:	432c      	orrs	r4, r5
    2660:	e7ee      	b.n	2640 <flashcalw_issue_command+0x24>
    2662:	bf00      	nop
    2664:	20000100 	.word	0x20000100
    2668:	400a0000 	.word	0x400a0000
    266c:	20000be0 	.word	0x20000be0

00002670 <flashcalw_set_flash_waitstate_and_readmode>:
{
    2670:	b508      	push	{r3, lr}
	if (ps_value == 0) {
    2672:	2900      	cmp	r1, #0
    2674:	d12d      	bne.n	26d2 <flashcalw_set_flash_waitstate_and_readmode+0x62>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    2676:	4b1d      	ldr	r3, [pc, #116]	; (26ec <flashcalw_set_flash_waitstate_and_readmode+0x7c>)
    2678:	4298      	cmp	r0, r3
    267a:	d914      	bls.n	26a6 <flashcalw_set_flash_waitstate_and_readmode+0x36>
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    267c:	4b1c      	ldr	r3, [pc, #112]	; (26f0 <flashcalw_set_flash_waitstate_and_readmode+0x80>)
    267e:	4298      	cmp	r0, r3
    2680:	d808      	bhi.n	2694 <flashcalw_set_flash_waitstate_and_readmode+0x24>
				flashcalw_set_wait_state(1);
    2682:	2001      	movs	r0, #1
    2684:	4b1b      	ldr	r3, [pc, #108]	; (26f4 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2686:	4798      	blx	r3
				flashcalw_issue_command(
    2688:	f04f 31ff 	mov.w	r1, #4294967295
    268c:	2011      	movs	r0, #17
    268e:	4b1a      	ldr	r3, [pc, #104]	; (26f8 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    2690:	4798      	blx	r3
    2692:	bd08      	pop	{r3, pc}
				flashcalw_set_wait_state(1);
    2694:	2001      	movs	r0, #1
    2696:	4b17      	ldr	r3, [pc, #92]	; (26f4 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2698:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    269a:	f04f 31ff 	mov.w	r1, #4294967295
    269e:	2010      	movs	r0, #16
    26a0:	4b15      	ldr	r3, [pc, #84]	; (26f8 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    26a2:	4798      	blx	r3
    26a4:	bd08      	pop	{r3, pc}
			if((is_fwu_enabled == true) &&
    26a6:	b112      	cbz	r2, 26ae <flashcalw_set_flash_waitstate_and_readmode+0x3e>
    26a8:	4b14      	ldr	r3, [pc, #80]	; (26fc <flashcalw_set_flash_waitstate_and_readmode+0x8c>)
    26aa:	4298      	cmp	r0, r3
    26ac:	d908      	bls.n	26c0 <flashcalw_set_flash_waitstate_and_readmode+0x50>
				flashcalw_set_wait_state(0);
    26ae:	2000      	movs	r0, #0
    26b0:	4b10      	ldr	r3, [pc, #64]	; (26f4 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    26b2:	4798      	blx	r3
				flashcalw_issue_command(
    26b4:	f04f 31ff 	mov.w	r1, #4294967295
    26b8:	2011      	movs	r0, #17
    26ba:	4b0f      	ldr	r3, [pc, #60]	; (26f8 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    26bc:	4798      	blx	r3
    26be:	bd08      	pop	{r3, pc}
				flashcalw_set_wait_state(1);
    26c0:	2001      	movs	r0, #1
    26c2:	4b0c      	ldr	r3, [pc, #48]	; (26f4 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    26c4:	4798      	blx	r3
				flashcalw_issue_command(
    26c6:	f04f 31ff 	mov.w	r1, #4294967295
    26ca:	2011      	movs	r0, #17
    26cc:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    26ce:	4798      	blx	r3
    26d0:	bd08      	pop	{r3, pc}
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    26d2:	4b0b      	ldr	r3, [pc, #44]	; (2700 <flashcalw_set_flash_waitstate_and_readmode+0x90>)
    26d4:	4298      	cmp	r0, r3
			flashcalw_set_wait_state(1);
    26d6:	bf8c      	ite	hi
    26d8:	2001      	movhi	r0, #1
			flashcalw_set_wait_state(0);
    26da:	2000      	movls	r0, #0
    26dc:	4b05      	ldr	r3, [pc, #20]	; (26f4 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    26de:	4798      	blx	r3
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    26e0:	f04f 31ff 	mov.w	r1, #4294967295
    26e4:	2011      	movs	r0, #17
    26e6:	4b04      	ldr	r3, [pc, #16]	; (26f8 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    26e8:	4798      	blx	r3
    26ea:	bd08      	pop	{r3, pc}
    26ec:	0112a880 	.word	0x0112a880
    26f0:	02255100 	.word	0x02255100
    26f4:	000025e1 	.word	0x000025e1
    26f8:	0000261d 	.word	0x0000261d
    26fc:	00b71b00 	.word	0x00b71b00
    2700:	007a1200 	.word	0x007a1200

00002704 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    2704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2708:	b083      	sub	sp, #12
    270a:	9101      	str	r1, [sp, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    270c:	0247      	lsls	r7, r0, #9
    270e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    2712:	f507 2761 	add.w	r7, r7, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    2716:	f8d7 a0d0 	ldr.w	sl, [r7, #208]	; 0xd0

	for (i = 0; i < gpio_nb_sources; i++) {
    271a:	4b15      	ldr	r3, [pc, #84]	; (2770 <gpio_common_handler+0x6c>)
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	b1fb      	cbz	r3, 2760 <gpio_common_handler+0x5c>
    2720:	4606      	mov	r6, r0
    2722:	4d14      	ldr	r5, [pc, #80]	; (2774 <gpio_common_handler+0x70>)
    2724:	2400      	movs	r4, #0
		pin = gpio_int_sources[i].pin;
    2726:	46a9      	mov	r9, r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2728:	f04f 0b01 	mov.w	fp, #1
	for (i = 0; i < gpio_nb_sources; i++) {
    272c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2770 <gpio_common_handler+0x6c>
    2730:	e005      	b.n	273e <gpio_common_handler+0x3a>
    2732:	3401      	adds	r4, #1
    2734:	3508      	adds	r5, #8
    2736:	f8d8 3000 	ldr.w	r3, [r8]
    273a:	42a3      	cmp	r3, r4
    273c:	d910      	bls.n	2760 <gpio_common_handler+0x5c>
		pin = gpio_int_sources[i].pin;
    273e:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    2742:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
    2746:	d1f4      	bne.n	2732 <gpio_common_handler+0x2e>
    2748:	f003 031f 	and.w	r3, r3, #31
    274c:	fa0b f303 	lsl.w	r3, fp, r3
    2750:	ea13 0f0a 	tst.w	r3, sl
    2754:	d0ed      	beq.n	2732 <gpio_common_handler+0x2e>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    2756:	686b      	ldr	r3, [r5, #4]
    2758:	2b00      	cmp	r3, #0
    275a:	d0ea      	beq.n	2732 <gpio_common_handler+0x2e>
				gpio_int_sources[i].callback();
    275c:	4798      	blx	r3
    275e:	e7e8      	b.n	2732 <gpio_common_handler+0x2e>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	ea0a 0303 	and.w	r3, sl, r3
    2766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
}
    276a:	b003      	add	sp, #12
    276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2770:	20000c14 	.word	0x20000c14
    2774:	20000be4 	.word	0x20000be4

00002778 <gpio_set_pin_callback>:
{
    2778:	b470      	push	{r4, r5, r6}
	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    277a:	4b26      	ldr	r3, [pc, #152]	; (2814 <gpio_set_pin_callback+0x9c>)
    277c:	681c      	ldr	r4, [r3, #0]
    277e:	2c05      	cmp	r4, #5
    2780:	d83f      	bhi.n	2802 <gpio_set_pin_callback+0x8a>
    2782:	f000 051f 	and.w	r5, r0, #31
    2786:	2301      	movs	r3, #1
    2788:	40ab      	lsls	r3, r5
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    278a:	f013 0fff 	tst.w	r3, #255	; 0xff
    278e:	d136      	bne.n	27fe <gpio_set_pin_callback+0x86>
    2790:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2794:	d12f      	bne.n	27f6 <gpio_set_pin_callback+0x7e>
    2796:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    279a:	d12e      	bne.n	27fa <gpio_set_pin_callback+0x82>
    279c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
	for (i = 0; i < 4; i++) {
    27a0:	2b00      	cmp	r3, #0
    27a2:	bf0c      	ite	eq
    27a4:	2304      	moveq	r3, #4
    27a6:	2303      	movne	r3, #3
	return pin >> 5;
    27a8:	0945      	lsrs	r5, r0, #5
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    27aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    27ae:	3319      	adds	r3, #25
    27b0:	b2db      	uxtb	r3, r3
    27b2:	b25e      	sxtb	r6, r3
	gpio_int_sources[gpio_nb_sources].pin = pin;
    27b4:	4d18      	ldr	r5, [pc, #96]	; (2818 <gpio_set_pin_callback+0xa0>)
    27b6:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    27ba:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    27be:	6061      	str	r1, [r4, #4]
  if ((int32_t)(IRQn) >= 0)
    27c0:	2e00      	cmp	r6, #0
    27c2:	db20      	blt.n	2806 <gpio_set_pin_callback+0x8e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27c4:	0970      	lsrs	r0, r6, #5
    27c6:	f003 031f 	and.w	r3, r3, #31
    27ca:	2101      	movs	r1, #1
    27cc:	fa01 f303 	lsl.w	r3, r1, r3
    27d0:	4912      	ldr	r1, [pc, #72]	; (281c <gpio_set_pin_callback+0xa4>)
    27d2:	f100 0460 	add.w	r4, r0, #96	; 0x60
    27d6:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    27da:	0112      	lsls	r2, r2, #4
    27dc:	b2d2      	uxtb	r2, r2
    27de:	440e      	add	r6, r1
    27e0:	f886 2300 	strb.w	r2, [r6, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27e4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	gpio_nb_sources++;
    27e8:	4a0a      	ldr	r2, [pc, #40]	; (2814 <gpio_set_pin_callback+0x9c>)
    27ea:	6813      	ldr	r3, [r2, #0]
    27ec:	3301      	adds	r3, #1
    27ee:	6013      	str	r3, [r2, #0]
	return true;
    27f0:	2001      	movs	r0, #1
}
    27f2:	bc70      	pop	{r4, r5, r6}
    27f4:	4770      	bx	lr
	for (i = 0; i < 4; i++) {
    27f6:	2301      	movs	r3, #1
    27f8:	e7d6      	b.n	27a8 <gpio_set_pin_callback+0x30>
    27fa:	2302      	movs	r3, #2
    27fc:	e7d4      	b.n	27a8 <gpio_set_pin_callback+0x30>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    27fe:	2300      	movs	r3, #0
    2800:	e7d2      	b.n	27a8 <gpio_set_pin_callback+0x30>
		return false;
    2802:	2000      	movs	r0, #0
    2804:	e7f5      	b.n	27f2 <gpio_set_pin_callback+0x7a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2806:	f003 030f 	and.w	r3, r3, #15
    280a:	0112      	lsls	r2, r2, #4
    280c:	b2d2      	uxtb	r2, r2
    280e:	4904      	ldr	r1, [pc, #16]	; (2820 <gpio_set_pin_callback+0xa8>)
    2810:	54ca      	strb	r2, [r1, r3]
    2812:	e7e9      	b.n	27e8 <gpio_set_pin_callback+0x70>
    2814:	20000c14 	.word	0x20000c14
    2818:	20000be4 	.word	0x20000be4
    281c:	e000e100 	.word	0xe000e100
    2820:	e000ed14 	.word	0xe000ed14

00002824 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    2824:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    2826:	21ff      	movs	r1, #255	; 0xff
    2828:	2000      	movs	r0, #0
    282a:	4b01      	ldr	r3, [pc, #4]	; (2830 <GPIO_0_Handler+0xc>)
    282c:	4798      	blx	r3
    282e:	bd08      	pop	{r3, pc}
    2830:	00002705 	.word	0x00002705

00002834 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    2834:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    2836:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    283a:	2000      	movs	r0, #0
    283c:	4b01      	ldr	r3, [pc, #4]	; (2844 <GPIO_1_Handler+0x10>)
    283e:	4798      	blx	r3
    2840:	bd08      	pop	{r3, pc}
    2842:	bf00      	nop
    2844:	00002705 	.word	0x00002705

00002848 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    2848:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    284a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    284e:	2000      	movs	r0, #0
    2850:	4b01      	ldr	r3, [pc, #4]	; (2858 <GPIO_2_Handler+0x10>)
    2852:	4798      	blx	r3
    2854:	bd08      	pop	{r3, pc}
    2856:	bf00      	nop
    2858:	00002705 	.word	0x00002705

0000285c <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    285c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    285e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    2862:	2000      	movs	r0, #0
    2864:	4b01      	ldr	r3, [pc, #4]	; (286c <GPIO_3_Handler+0x10>)
    2866:	4798      	blx	r3
    2868:	bd08      	pop	{r3, pc}
    286a:	bf00      	nop
    286c:	00002705 	.word	0x00002705

00002870 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    2870:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    2872:	21ff      	movs	r1, #255	; 0xff
    2874:	2001      	movs	r0, #1
    2876:	4b01      	ldr	r3, [pc, #4]	; (287c <GPIO_4_Handler+0xc>)
    2878:	4798      	blx	r3
    287a:	bd08      	pop	{r3, pc}
    287c:	00002705 	.word	0x00002705

00002880 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    2880:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    2882:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2886:	2001      	movs	r0, #1
    2888:	4b01      	ldr	r3, [pc, #4]	; (2890 <GPIO_5_Handler+0x10>)
    288a:	4798      	blx	r3
    288c:	bd08      	pop	{r3, pc}
    288e:	bf00      	nop
    2890:	00002705 	.word	0x00002705

00002894 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    2894:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    2896:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    289a:	2001      	movs	r0, #1
    289c:	4b01      	ldr	r3, [pc, #4]	; (28a4 <GPIO_6_Handler+0x10>)
    289e:	4798      	blx	r3
    28a0:	bd08      	pop	{r3, pc}
    28a2:	bf00      	nop
    28a4:	00002705 	.word	0x00002705

000028a8 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    28a8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    28aa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    28ae:	2001      	movs	r0, #1
    28b0:	4b01      	ldr	r3, [pc, #4]	; (28b8 <GPIO_7_Handler+0x10>)
    28b2:	4798      	blx	r3
    28b4:	bd08      	pop	{r3, pc}
    28b6:	bf00      	nop
    28b8:	00002705 	.word	0x00002705

000028bc <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    28bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    28be:	21ff      	movs	r1, #255	; 0xff
    28c0:	2002      	movs	r0, #2
    28c2:	4b01      	ldr	r3, [pc, #4]	; (28c8 <GPIO_8_Handler+0xc>)
    28c4:	4798      	blx	r3
    28c6:	bd08      	pop	{r3, pc}
    28c8:	00002705 	.word	0x00002705

000028cc <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    28cc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    28ce:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    28d2:	2002      	movs	r0, #2
    28d4:	4b01      	ldr	r3, [pc, #4]	; (28dc <GPIO_9_Handler+0x10>)
    28d6:	4798      	blx	r3
    28d8:	bd08      	pop	{r3, pc}
    28da:	bf00      	nop
    28dc:	00002705 	.word	0x00002705

000028e0 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    28e0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    28e2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    28e6:	2002      	movs	r0, #2
    28e8:	4b01      	ldr	r3, [pc, #4]	; (28f0 <GPIO_10_Handler+0x10>)
    28ea:	4798      	blx	r3
    28ec:	bd08      	pop	{r3, pc}
    28ee:	bf00      	nop
    28f0:	00002705 	.word	0x00002705

000028f4 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    28f4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    28f6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    28fa:	2002      	movs	r0, #2
    28fc:	4b01      	ldr	r3, [pc, #4]	; (2904 <GPIO_11_Handler+0x10>)
    28fe:	4798      	blx	r3
    2900:	bd08      	pop	{r3, pc}
    2902:	bf00      	nop
    2904:	00002705 	.word	0x00002705

00002908 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
    2908:	2810      	cmp	r0, #16
    290a:	bf28      	it	cs
    290c:	2000      	movcs	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    290e:	0180      	lsls	r0, r0, #6
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
    2910:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2914:	f500 2022 	add.w	r0, r0, #663552	; 0xa2000
    2918:	4770      	bx	lr
	...

0000291c <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    291c:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    291e:	4b0d      	ldr	r3, [pc, #52]	; (2954 <pdca_get_channel_status+0x38>)
    2920:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    2922:	69c2      	ldr	r2, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    2924:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    2926:	f012 0f01 	tst.w	r2, #1
    292a:	d010      	beq.n	294e <pdca_get_channel_status+0x32>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    292c:	f013 0f04 	tst.w	r3, #4
    2930:	d001      	beq.n	2936 <pdca_get_channel_status+0x1a>
			return PDCA_CH_TRANSFER_ERROR;
    2932:	2004      	movs	r0, #4
    2934:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    2936:	f013 0f02 	tst.w	r3, #2
    293a:	d001      	beq.n	2940 <pdca_get_channel_status+0x24>
			return PDCA_CH_TRANSFER_COMPLETED;
    293c:	2003      	movs	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
    293e:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    2940:	f003 0301 	and.w	r3, r3, #1
		return PDCA_CH_BUSY;
    2944:	2b00      	cmp	r3, #0
    2946:	bf14      	ite	ne
    2948:	2002      	movne	r0, #2
    294a:	2001      	moveq	r0, #1
    294c:	bd08      	pop	{r3, pc}
		return PDCA_CH_FREE;
    294e:	2000      	movs	r0, #0
    2950:	bd08      	pop	{r3, pc}
    2952:	bf00      	nop
    2954:	00002909 	.word	0x00002909

00002958 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    2958:	b510      	push	{r4, lr}
    295a:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    295c:	4b03      	ldr	r3, [pc, #12]	; (296c <pdca_channel_interrupt+0x14>)
    295e:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
    2960:	4b03      	ldr	r3, [pc, #12]	; (2970 <pdca_channel_interrupt+0x18>)
    2962:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    2966:	b103      	cbz	r3, 296a <pdca_channel_interrupt+0x12>
		pdca_callback_pointer[pdca_ch_number] (status);
    2968:	4798      	blx	r3
    296a:	bd10      	pop	{r4, pc}
    296c:	0000291d 	.word	0x0000291d
    2970:	20000dd8 	.word	0x20000dd8

00002974 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    2974:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
    2976:	2000      	movs	r0, #0
    2978:	4b01      	ldr	r3, [pc, #4]	; (2980 <PDCA_0_Handler+0xc>)
    297a:	4798      	blx	r3
    297c:	bd08      	pop	{r3, pc}
    297e:	bf00      	nop
    2980:	00002959 	.word	0x00002959

00002984 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    2984:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
    2986:	2001      	movs	r0, #1
    2988:	4b01      	ldr	r3, [pc, #4]	; (2990 <PDCA_1_Handler+0xc>)
    298a:	4798      	blx	r3
    298c:	bd08      	pop	{r3, pc}
    298e:	bf00      	nop
    2990:	00002959 	.word	0x00002959

00002994 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    2994:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
    2996:	2002      	movs	r0, #2
    2998:	4b01      	ldr	r3, [pc, #4]	; (29a0 <PDCA_2_Handler+0xc>)
    299a:	4798      	blx	r3
    299c:	bd08      	pop	{r3, pc}
    299e:	bf00      	nop
    29a0:	00002959 	.word	0x00002959

000029a4 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    29a4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
    29a6:	2003      	movs	r0, #3
    29a8:	4b01      	ldr	r3, [pc, #4]	; (29b0 <PDCA_3_Handler+0xc>)
    29aa:	4798      	blx	r3
    29ac:	bd08      	pop	{r3, pc}
    29ae:	bf00      	nop
    29b0:	00002959 	.word	0x00002959

000029b4 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    29b4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
    29b6:	2004      	movs	r0, #4
    29b8:	4b01      	ldr	r3, [pc, #4]	; (29c0 <PDCA_4_Handler+0xc>)
    29ba:	4798      	blx	r3
    29bc:	bd08      	pop	{r3, pc}
    29be:	bf00      	nop
    29c0:	00002959 	.word	0x00002959

000029c4 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    29c4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
    29c6:	2005      	movs	r0, #5
    29c8:	4b01      	ldr	r3, [pc, #4]	; (29d0 <PDCA_5_Handler+0xc>)
    29ca:	4798      	blx	r3
    29cc:	bd08      	pop	{r3, pc}
    29ce:	bf00      	nop
    29d0:	00002959 	.word	0x00002959

000029d4 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    29d4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
    29d6:	2006      	movs	r0, #6
    29d8:	4b01      	ldr	r3, [pc, #4]	; (29e0 <PDCA_6_Handler+0xc>)
    29da:	4798      	blx	r3
    29dc:	bd08      	pop	{r3, pc}
    29de:	bf00      	nop
    29e0:	00002959 	.word	0x00002959

000029e4 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    29e4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
    29e6:	2007      	movs	r0, #7
    29e8:	4b01      	ldr	r3, [pc, #4]	; (29f0 <PDCA_7_Handler+0xc>)
    29ea:	4798      	blx	r3
    29ec:	bd08      	pop	{r3, pc}
    29ee:	bf00      	nop
    29f0:	00002959 	.word	0x00002959

000029f4 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    29f4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
    29f6:	2008      	movs	r0, #8
    29f8:	4b01      	ldr	r3, [pc, #4]	; (2a00 <PDCA_8_Handler+0xc>)
    29fa:	4798      	blx	r3
    29fc:	bd08      	pop	{r3, pc}
    29fe:	bf00      	nop
    2a00:	00002959 	.word	0x00002959

00002a04 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    2a04:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
    2a06:	2009      	movs	r0, #9
    2a08:	4b01      	ldr	r3, [pc, #4]	; (2a10 <PDCA_9_Handler+0xc>)
    2a0a:	4798      	blx	r3
    2a0c:	bd08      	pop	{r3, pc}
    2a0e:	bf00      	nop
    2a10:	00002959 	.word	0x00002959

00002a14 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    2a14:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
    2a16:	200a      	movs	r0, #10
    2a18:	4b01      	ldr	r3, [pc, #4]	; (2a20 <PDCA_10_Handler+0xc>)
    2a1a:	4798      	blx	r3
    2a1c:	bd08      	pop	{r3, pc}
    2a1e:	bf00      	nop
    2a20:	00002959 	.word	0x00002959

00002a24 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    2a24:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
    2a26:	200b      	movs	r0, #11
    2a28:	4b01      	ldr	r3, [pc, #4]	; (2a30 <PDCA_11_Handler+0xc>)
    2a2a:	4798      	blx	r3
    2a2c:	bd08      	pop	{r3, pc}
    2a2e:	bf00      	nop
    2a30:	00002959 	.word	0x00002959

00002a34 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    2a34:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
    2a36:	200c      	movs	r0, #12
    2a38:	4b01      	ldr	r3, [pc, #4]	; (2a40 <PDCA_12_Handler+0xc>)
    2a3a:	4798      	blx	r3
    2a3c:	bd08      	pop	{r3, pc}
    2a3e:	bf00      	nop
    2a40:	00002959 	.word	0x00002959

00002a44 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    2a44:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
    2a46:	200d      	movs	r0, #13
    2a48:	4b01      	ldr	r3, [pc, #4]	; (2a50 <PDCA_13_Handler+0xc>)
    2a4a:	4798      	blx	r3
    2a4c:	bd08      	pop	{r3, pc}
    2a4e:	bf00      	nop
    2a50:	00002959 	.word	0x00002959

00002a54 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    2a54:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
    2a56:	200e      	movs	r0, #14
    2a58:	4b01      	ldr	r3, [pc, #4]	; (2a60 <PDCA_14_Handler+0xc>)
    2a5a:	4798      	blx	r3
    2a5c:	bd08      	pop	{r3, pc}
    2a5e:	bf00      	nop
    2a60:	00002959 	.word	0x00002959

00002a64 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    2a64:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
    2a66:	200f      	movs	r0, #15
    2a68:	4b01      	ldr	r3, [pc, #4]	; (2a70 <PDCA_15_Handler+0xc>)
    2a6a:	4798      	blx	r3
    2a6c:	bd08      	pop	{r3, pc}
    2a6e:	bf00      	nop
    2a70:	00002959 	.word	0x00002959

00002a74 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    2a74:	4b08      	ldr	r3, [pc, #32]	; (2a98 <find_twim_channel_num+0x24>)
    2a76:	4298      	cmp	r0, r3
    2a78:	d00a      	beq.n	2a90 <find_twim_channel_num+0x1c>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    2a7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2a7e:	4298      	cmp	r0, r3
    2a80:	d008      	beq.n	2a94 <find_twim_channel_num+0x20>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    2a82:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    2a86:	4298      	cmp	r0, r3
    2a88:	bf14      	ite	ne
    2a8a:	2000      	movne	r0, #0
    2a8c:	2001      	moveq	r0, #1
    2a8e:	4770      	bx	lr
		return 3;
    2a90:	2003      	movs	r0, #3
    2a92:	4770      	bx	lr
		return 2;
    2a94:	2002      	movs	r0, #2
		return 0;
	}
#endif

	return 0;
}
    2a96:	4770      	bx	lr
    2a98:	4007c000 	.word	0x4007c000

00002a9c <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
    2a9c:	b510      	push	{r4, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	4604      	mov	r4, r0
#define NCMDR_FREE_WAIT    2000
	volatile uint32_t ncmdr_wait = NCMDR_FREE_WAIT;
    2aa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2aa6:	9301      	str	r3, [sp, #4]

	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
    2aa8:	4bb2      	ldr	r3, [pc, #712]	; (2d74 <twim_default_callback+0x2d8>)
    2aaa:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
    2aac:	69e3      	ldr	r3, [r4, #28]
	status &= twim_it_mask[twim_ch];
    2aae:	4ab2      	ldr	r2, [pc, #712]	; (2d78 <twim_default_callback+0x2dc>)
    2ab0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2ab4:	4013      	ands	r3, r2
	uint32_t cmdr_reg;

	/* This is a NACK */
	if (status & TWIM_SR_STD_MASK) {
    2ab6:	f413 6fa0 	tst.w	r3, #1280	; 0x500
    2aba:	d01a      	beq.n	2af2 <twim_default_callback+0x56>
		/*
		 * If we get a NACK, clear the valid bit in CMDR,
		 * otherwise the command will be re-sent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
    2abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	bf14      	ite	ne
    2ac4:	f06f 0203 	mvnne.w	r2, #3
    2ac8:	f06f 0201 	mvneq.w	r2, #1
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
    2acc:	4bab      	ldr	r3, [pc, #684]	; (2d7c <twim_default_callback+0x2e0>)
    2ace:	541a      	strb	r2, [r3, r0]
		twim->TWIM_NCMDR &= ~TWIM_NCMDR_VALID;
    2ad0:	6923      	ldr	r3, [r4, #16]
    2ad2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2ad6:	6123      	str	r3, [r4, #16]
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
    2ad8:	68e3      	ldr	r3, [r4, #12]
    2ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2ade:	60e3      	str	r3, [r4, #12]
		twim->TWIM_SCR = ~0UL;
    2ae0:	f04f 33ff 	mov.w	r3, #4294967295
    2ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
    2ae6:	6263      	str	r3, [r4, #36]	; 0x24
		twim_next_cmd_xfer_valid[twim_ch] = false;
    2ae8:	2200      	movs	r2, #0
    2aea:	4ba5      	ldr	r3, [pc, #660]	; (2d80 <twim_default_callback+0x2e4>)
    2aec:	541a      	strb	r2, [r3, r0]
	else if (status & TWIM_SR_CCOMP) {
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
	}
#endif
}
    2aee:	b002      	add	sp, #8
    2af0:	bd10      	pop	{r4, pc}
	else if (status & TWIM_SR_RXRDY) {
    2af2:	f013 0f01 	tst.w	r3, #1
    2af6:	d07b      	beq.n	2bf0 <twim_default_callback+0x154>
		*p_twim_rx_data[twim_ch] = twim->TWIM_RHR;
    2af8:	49a2      	ldr	r1, [pc, #648]	; (2d84 <twim_default_callback+0x2e8>)
    2afa:	6962      	ldr	r2, [r4, #20]
    2afc:	b2d2      	uxtb	r2, r2
    2afe:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    2b02:	f803 2b01 	strb.w	r2, [r3], #1
		p_twim_rx_data[twim_ch]++;
    2b06:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		twim_rx_nb_bytes[twim_ch]--;
    2b0a:	4b9f      	ldr	r3, [pc, #636]	; (2d88 <twim_default_callback+0x2ec>)
    2b0c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    2b10:	3a01      	subs	r2, #1
    2b12:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (twim_rx_nb_bytes[twim_ch] == 0) {
    2b16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d1e7      	bne.n	2aee <twim_default_callback+0x52>
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2b1e:	4b98      	ldr	r3, [pc, #608]	; (2d80 <twim_default_callback+0x2e4>)
    2b20:	5c1b      	ldrb	r3, [r3, r0]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d054      	beq.n	2bd0 <twim_default_callback+0x134>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    2b26:	4b99      	ldr	r3, [pc, #612]	; (2d8c <twim_default_callback+0x2f0>)
    2b28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d04f      	beq.n	2bd0 <twim_default_callback+0x134>
				p_twim_rx_data[twim_ch] = p_twim_next_rx_data[twim_ch];
    2b30:	4b97      	ldr	r3, [pc, #604]	; (2d90 <twim_default_callback+0x2f4>)
    2b32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2b36:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2b3a:	4a94      	ldr	r2, [pc, #592]	; (2d8c <twim_default_callback+0x2f0>)
    2b3c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2b40:	2aff      	cmp	r2, #255	; 0xff
    2b42:	d92d      	bls.n	2ba0 <twim_default_callback+0x104>
					twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    2b44:	21ff      	movs	r1, #255	; 0xff
    2b46:	4a90      	ldr	r2, [pc, #576]	; (2d88 <twim_default_callback+0x2ec>)
    2b48:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					p_twim_next_rx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    2b4c:	440b      	add	r3, r1
    2b4e:	4a90      	ldr	r2, [pc, #576]	; (2d90 <twim_default_callback+0x2f4>)
    2b50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    2b54:	4a8d      	ldr	r2, [pc, #564]	; (2d8c <twim_default_callback+0x2f0>)
    2b56:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2b5a:	3bff      	subs	r3, #255	; 0xff
    2b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
    2b60:	4b8a      	ldr	r3, [pc, #552]	; (2d8c <twim_default_callback+0x2f0>)
    2b62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2b66:	b37b      	cbz	r3, 2bc8 <twim_default_callback+0x12c>
					ncmdr_wait = NCMDR_FREE_WAIT;
    2b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2b6c:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    2b6e:	6923      	ldr	r3, [r4, #16]
    2b70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2b74:	d004      	beq.n	2b80 <twim_default_callback+0xe4>
    2b76:	9b01      	ldr	r3, [sp, #4]
    2b78:	1e5a      	subs	r2, r3, #1
    2b7a:	9201      	str	r2, [sp, #4]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d1f6      	bne.n	2b6e <twim_default_callback+0xd2>
					cmdr_reg = twim->TWIM_CMDR;
    2b80:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    2b82:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    2b86:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2b8a:	4a80      	ldr	r2, [pc, #512]	; (2d8c <twim_default_callback+0x2f0>)
    2b8c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2b90:	2aff      	cmp	r2, #255	; 0xff
    2b92:	d90f      	bls.n	2bb4 <twim_default_callback+0x118>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    2b94:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    2b98:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
					twim->TWIM_NCMDR = cmdr_reg;
    2b9c:	6123      	str	r3, [r4, #16]
    2b9e:	e7a6      	b.n	2aee <twim_default_callback+0x52>
					twim_rx_nb_bytes[twim_ch] = twim_next_rx_nb_bytes[twim_ch];
    2ba0:	4b7a      	ldr	r3, [pc, #488]	; (2d8c <twim_default_callback+0x2f0>)
    2ba2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    2ba6:	4a78      	ldr	r2, [pc, #480]	; (2d88 <twim_default_callback+0x2ec>)
    2ba8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] = 0;
    2bac:	2200      	movs	r2, #0
    2bae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    2bb2:	e7d5      	b.n	2b60 <twim_default_callback+0xc4>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    2bb4:	4a75      	ldr	r2, [pc, #468]	; (2d8c <twim_default_callback+0x2f0>)
    2bb6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2bbe:	0412      	lsls	r2, r2, #16
    2bc0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2bc4:	4313      	orrs	r3, r2
    2bc6:	e7e9      	b.n	2b9c <twim_default_callback+0x100>
					twim_next_cmd_xfer_valid[twim_ch] = false;
    2bc8:	2200      	movs	r2, #0
    2bca:	4b6d      	ldr	r3, [pc, #436]	; (2d80 <twim_default_callback+0x2e4>)
    2bcc:	541a      	strb	r2, [r3, r0]
    2bce:	e78e      	b.n	2aee <twim_default_callback+0x52>
				twim->TWIM_IDR = TWIM_IDR_RXRDY;
    2bd0:	2301      	movs	r3, #1
    2bd2:	6263      	str	r3, [r4, #36]	; 0x24
				twim_next_cmd_xfer_valid[twim_ch] = false;
    2bd4:	2200      	movs	r2, #0
    2bd6:	4b6a      	ldr	r3, [pc, #424]	; (2d80 <twim_default_callback+0x2e4>)
    2bd8:	541a      	strb	r2, [r3, r0]
				twim->TWIM_SCR = TWIM_SCR_CCOMP;
    2bda:	2308      	movs	r3, #8
    2bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
				twim->TWIM_IER = TWIM_IER_CCOMP;
    2bde:	6223      	str	r3, [r4, #32]
				twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    2be0:	4a65      	ldr	r2, [pc, #404]	; (2d78 <twim_default_callback+0x2dc>)
    2be2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2be6:	f043 0308 	orr.w	r3, r3, #8
    2bea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    2bee:	e77e      	b.n	2aee <twim_default_callback+0x52>
	else if (status & TWIM_SR_TXRDY) {
    2bf0:	f013 0f02 	tst.w	r3, #2
    2bf4:	f000 80b5 	beq.w	2d62 <twim_default_callback+0x2c6>
		if (twim_tx_nb_bytes[twim_ch] == 0) {
    2bf8:	4b66      	ldr	r3, [pc, #408]	; (2d94 <twim_default_callback+0x2f8>)
    2bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2bfe:	b99b      	cbnz	r3, 2c28 <twim_default_callback+0x18c>
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
    2c00:	2302      	movs	r3, #2
    2c02:	6263      	str	r3, [r4, #36]	; 0x24
			if (twim_next_rx_nb_bytes[twim_ch] == 0) {
    2c04:	4b61      	ldr	r3, [pc, #388]	; (2d8c <twim_default_callback+0x2f0>)
    2c06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2c0a:	b913      	cbnz	r3, 2c12 <twim_default_callback+0x176>
				twim_next_cmd_xfer_valid[twim_ch] = false;
    2c0c:	2200      	movs	r2, #0
    2c0e:	4b5c      	ldr	r3, [pc, #368]	; (2d80 <twim_default_callback+0x2e4>)
    2c10:	541a      	strb	r2, [r3, r0]
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
    2c12:	2308      	movs	r3, #8
    2c14:	62e3      	str	r3, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
    2c16:	6223      	str	r3, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    2c18:	4a57      	ldr	r2, [pc, #348]	; (2d78 <twim_default_callback+0x2dc>)
    2c1a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2c1e:	f043 0308 	orr.w	r3, r3, #8
    2c22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    2c26:	e762      	b.n	2aee <twim_default_callback+0x52>
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
    2c28:	4a5b      	ldr	r2, [pc, #364]	; (2d98 <twim_default_callback+0x2fc>)
    2c2a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2c2e:	1c59      	adds	r1, r3, #1
    2c30:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    2c34:	781b      	ldrb	r3, [r3, #0]
    2c36:	b2db      	uxtb	r3, r3
    2c38:	61a3      	str	r3, [r4, #24]
			twim_tx_nb_bytes[twim_ch]--;
    2c3a:	4b56      	ldr	r3, [pc, #344]	; (2d94 <twim_default_callback+0x2f8>)
    2c3c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    2c40:	3a01      	subs	r2, #1
    2c42:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
    2c46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	f47f af4f 	bne.w	2aee <twim_default_callback+0x52>
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2c50:	4b4b      	ldr	r3, [pc, #300]	; (2d80 <twim_default_callback+0x2e4>)
    2c52:	5c1b      	ldrb	r3, [r3, r0]
    2c54:	2b00      	cmp	r3, #0
    2c56:	d053      	beq.n	2d00 <twim_default_callback+0x264>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
    2c58:	4b50      	ldr	r3, [pc, #320]	; (2d9c <twim_default_callback+0x300>)
    2c5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d04e      	beq.n	2d00 <twim_default_callback+0x264>
					p_twim_tx_data[twim_ch] = p_twim_next_tx_data[twim_ch];
    2c62:	4b4f      	ldr	r3, [pc, #316]	; (2da0 <twim_default_callback+0x304>)
    2c64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2c68:	4a4b      	ldr	r2, [pc, #300]	; (2d98 <twim_default_callback+0x2fc>)
    2c6a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2c6e:	4a4b      	ldr	r2, [pc, #300]	; (2d9c <twim_default_callback+0x300>)
    2c70:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2c74:	2aff      	cmp	r2, #255	; 0xff
    2c76:	d92b      	bls.n	2cd0 <twim_default_callback+0x234>
						twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    2c78:	21ff      	movs	r1, #255	; 0xff
    2c7a:	4a46      	ldr	r2, [pc, #280]	; (2d94 <twim_default_callback+0x2f8>)
    2c7c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						p_twim_next_tx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    2c80:	440b      	add	r3, r1
    2c82:	4a47      	ldr	r2, [pc, #284]	; (2da0 <twim_default_callback+0x304>)
    2c84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    2c88:	4a44      	ldr	r2, [pc, #272]	; (2d9c <twim_default_callback+0x300>)
    2c8a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    2c8e:	3bff      	subs	r3, #255	; 0xff
    2c90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
    2c94:	4b41      	ldr	r3, [pc, #260]	; (2d9c <twim_default_callback+0x300>)
    2c96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2c9a:	b36b      	cbz	r3, 2cf8 <twim_default_callback+0x25c>
						ncmdr_wait = NCMDR_FREE_WAIT;
    2c9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2ca0:	9301      	str	r3, [sp, #4]
						while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    2ca2:	6923      	ldr	r3, [r4, #16]
    2ca4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2ca8:	d004      	beq.n	2cb4 <twim_default_callback+0x218>
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	1e5a      	subs	r2, r3, #1
    2cae:	9201      	str	r2, [sp, #4]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d1f6      	bne.n	2ca2 <twim_default_callback+0x206>
						cmdr_reg = twim->TWIM_CMDR;
    2cb4:	68e3      	ldr	r3, [r4, #12]
						cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
    2cb6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    2cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
						if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2cbe:	4a37      	ldr	r2, [pc, #220]	; (2d9c <twim_default_callback+0x300>)
    2cc0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2cc4:	2aff      	cmp	r2, #255	; 0xff
    2cc6:	d90d      	bls.n	2ce4 <twim_default_callback+0x248>
							cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
    2cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
						twim->TWIM_NCMDR = cmdr_reg;
    2ccc:	6123      	str	r3, [r4, #16]
    2cce:	e70e      	b.n	2aee <twim_default_callback+0x52>
						twim_tx_nb_bytes[twim_ch] = twim_next_tx_nb_bytes[twim_ch];
    2cd0:	4b32      	ldr	r3, [pc, #200]	; (2d9c <twim_default_callback+0x300>)
    2cd2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    2cd6:	4a2f      	ldr	r2, [pc, #188]	; (2d94 <twim_default_callback+0x2f8>)
    2cd8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] = 0;
    2cdc:	2200      	movs	r2, #0
    2cde:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    2ce2:	e7d7      	b.n	2c94 <twim_default_callback+0x1f8>
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
    2ce4:	4a2d      	ldr	r2, [pc, #180]	; (2d9c <twim_default_callback+0x300>)
    2ce6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2cee:	0412      	lsls	r2, r2, #16
    2cf0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2cf4:	4313      	orrs	r3, r2
    2cf6:	e7e9      	b.n	2ccc <twim_default_callback+0x230>
						twim_next_cmd_xfer_valid[twim_ch] = false;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b21      	ldr	r3, [pc, #132]	; (2d80 <twim_default_callback+0x2e4>)
    2cfc:	541a      	strb	r2, [r3, r0]
    2cfe:	e6f6      	b.n	2aee <twim_default_callback+0x52>
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2d00:	4b1f      	ldr	r3, [pc, #124]	; (2d80 <twim_default_callback+0x2e4>)
    2d02:	5c1b      	ldrb	r3, [r3, r0]
    2d04:	2b00      	cmp	r3, #0
    2d06:	f43f aef2 	beq.w	2aee <twim_default_callback+0x52>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    2d0a:	4b20      	ldr	r3, [pc, #128]	; (2d8c <twim_default_callback+0x2f0>)
    2d0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    2d10:	2b00      	cmp	r3, #0
    2d12:	f43f aeec 	beq.w	2aee <twim_default_callback+0x52>
					ncmdr_wait = NCMDR_FREE_WAIT;
    2d16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    2d1a:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    2d1c:	6923      	ldr	r3, [r4, #16]
    2d1e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2d22:	d004      	beq.n	2d2e <twim_default_callback+0x292>
    2d24:	9b01      	ldr	r3, [sp, #4]
    2d26:	1e5a      	subs	r2, r3, #1
    2d28:	9201      	str	r2, [sp, #4]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d1f6      	bne.n	2d1c <twim_default_callback+0x280>
					cmdr_reg = twim->TWIM_CMDR;
    2d2e:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    2d30:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    2d34:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    2d38:	4a14      	ldr	r2, [pc, #80]	; (2d8c <twim_default_callback+0x2f0>)
    2d3a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2d3e:	2aff      	cmp	r2, #255	; 0xff
    2d40:	d905      	bls.n	2d4e <twim_default_callback+0x2b2>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    2d42:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    2d46:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
					twim->TWIM_NCMDR = cmdr_reg;
    2d4a:	6123      	str	r3, [r4, #16]
    2d4c:	e6cf      	b.n	2aee <twim_default_callback+0x52>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    2d4e:	4a0f      	ldr	r2, [pc, #60]	; (2d8c <twim_default_callback+0x2f0>)
    2d50:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    2d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2d58:	0412      	lsls	r2, r2, #16
    2d5a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    2d5e:	4313      	orrs	r3, r2
    2d60:	e7f3      	b.n	2d4a <twim_default_callback+0x2ae>
	else if (status & TWIM_SR_CCOMP) {
    2d62:	f013 0f08 	tst.w	r3, #8
    2d66:	f43f aec2 	beq.w	2aee <twim_default_callback+0x52>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
    2d6a:	2308      	movs	r3, #8
    2d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
    2d6e:	6263      	str	r3, [r4, #36]	; 0x24
}
    2d70:	e6bd      	b.n	2aee <twim_default_callback+0x52>
    2d72:	bf00      	nop
    2d74:	00002a75 	.word	0x00002a75
    2d78:	20000c5c 	.word	0x20000c5c
    2d7c:	20000c58 	.word	0x20000c58
    2d80:	20000c6c 	.word	0x20000c6c
    2d84:	20000c38 	.word	0x20000c38
    2d88:	20000c90 	.word	0x20000c90
    2d8c:	20000c70 	.word	0x20000c70
    2d90:	20000c18 	.word	0x20000c18
    2d94:	20000ca0 	.word	0x20000ca0
    2d98:	20000c48 	.word	0x20000c48
    2d9c:	20000c80 	.word	0x20000c80
    2da0:	20000c28 	.word	0x20000c28

00002da4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    2da4:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    2da6:	fbb2 f2f1 	udiv	r2, r2, r1
    2daa:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2dac:	2aff      	cmp	r2, #255	; 0xff
    2dae:	d922      	bls.n	2df6 <twim_set_speed+0x52>
    2db0:	2400      	movs	r4, #0
		/* increase clock divider */
		cwgr_exp++;
    2db2:	3401      	adds	r4, #1
    2db4:	b2e4      	uxtb	r4, r4
		/* divide f_prescaled value */
		f_prescaled /= 2;
    2db6:	0852      	lsrs	r2, r2, #1
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2db8:	2aff      	cmp	r2, #255	; 0xff
    2dba:	d904      	bls.n	2dc6 <twim_set_speed+0x22>
    2dbc:	2c08      	cmp	r4, #8
    2dbe:	d1f8      	bne.n	2db2 <twim_set_speed+0xe>
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    2dc0:	f06f 0007 	mvn.w	r0, #7
    2dc4:	e015      	b.n	2df2 <twim_set_speed+0x4e>
	if (cwgr_exp > 0x7) {
    2dc6:	2c07      	cmp	r4, #7
    2dc8:	d817      	bhi.n	2dfa <twim_set_speed+0x56>
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2dca:	0855      	lsrs	r5, r2, #1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    2dcc:	0411      	lsls	r1, r2, #16
    2dce:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2dd2:	b2ee      	uxtb	r6, r5
			| TWIM_CWGR_STASTO(f_prescaled);
    2dd4:	4331      	orrs	r1, r6
			| TWIM_CWGR_DATA(cycles)
    2dd6:	061b      	lsls	r3, r3, #24
    2dd8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			| TWIM_CWGR_STASTO(f_prescaled);
    2ddc:	430b      	orrs	r3, r1
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    2dde:	1b52      	subs	r2, r2, r5
    2de0:	0212      	lsls	r2, r2, #8
    2de2:	b292      	uxth	r2, r2
			| TWIM_CWGR_STASTO(f_prescaled);
    2de4:	431a      	orrs	r2, r3
			| TWIM_CWGR_EXP(cwgr_exp)
    2de6:	0724      	lsls	r4, r4, #28
    2de8:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
			| TWIM_CWGR_STASTO(f_prescaled);
    2dec:	4314      	orrs	r4, r2
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    2dee:	6044      	str	r4, [r0, #4]

	return STATUS_OK;
    2df0:	2000      	movs	r0, #0
}
    2df2:	bc70      	pop	{r4, r5, r6}
    2df4:	4770      	bx	lr
	uint8_t cwgr_exp = 0;
    2df6:	2400      	movs	r4, #0
    2df8:	e7e7      	b.n	2dca <twim_set_speed+0x26>
		return ERR_INVALID_ARG;
    2dfa:	f06f 0007 	mvn.w	r0, #7
    2dfe:	e7f8      	b.n	2df2 <twim_set_speed+0x4e>

00002e00 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    2e00:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    2e02:	fbb2 f2f1 	udiv	r2, r2, r1
    2e06:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2e08:	2aff      	cmp	r2, #255	; 0xff
    2e0a:	d922      	bls.n	2e52 <twim_set_hsmode_speed+0x52>
    2e0c:	2400      	movs	r4, #0
		/* increase clock divider */
		cwgr_exp++;
    2e0e:	3401      	adds	r4, #1
    2e10:	b2e4      	uxtb	r4, r4
		/* divide f_prescaled value */
		f_prescaled /= 2;
    2e12:	0852      	lsrs	r2, r2, #1
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    2e14:	2aff      	cmp	r2, #255	; 0xff
    2e16:	d904      	bls.n	2e22 <twim_set_hsmode_speed+0x22>
    2e18:	2c08      	cmp	r4, #8
    2e1a:	d1f8      	bne.n	2e0e <twim_set_hsmode_speed+0xe>
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    2e1c:	f06f 0007 	mvn.w	r0, #7
    2e20:	e015      	b.n	2e4e <twim_set_hsmode_speed+0x4e>
	if (cwgr_exp > 0x7) {
    2e22:	2c07      	cmp	r4, #7
    2e24:	d817      	bhi.n	2e56 <twim_set_hsmode_speed+0x56>
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2e26:	0855      	lsrs	r5, r2, #1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2e28:	0411      	lsls	r1, r2, #16
    2e2a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2e2e:	b2ee      	uxtb	r6, r5
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2e30:	4331      	orrs	r1, r6
			| TWIM_HSCWGR_DATA(cycles)
    2e32:	061b      	lsls	r3, r3, #24
    2e34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2e38:	430b      	orrs	r3, r1
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    2e3a:	1b52      	subs	r2, r2, r5
    2e3c:	0212      	lsls	r2, r2, #8
    2e3e:	b292      	uxth	r2, r2
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2e40:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_EXP(cwgr_exp)
    2e42:	0724      	lsls	r4, r4, #28
    2e44:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
			| TWIM_HSCWGR_STASTO(f_prescaled);
    2e48:	4314      	orrs	r4, r2
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    2e4a:	6384      	str	r4, [r0, #56]	; 0x38

	return STATUS_OK;
    2e4c:	2000      	movs	r0, #0
}
    2e4e:	bc70      	pop	{r4, r5, r6}
    2e50:	4770      	bx	lr
	uint8_t cwgr_exp = 0;
    2e52:	2400      	movs	r4, #0
    2e54:	e7e7      	b.n	2e26 <twim_set_hsmode_speed+0x26>
		return ERR_INVALID_ARG;
    2e56:	f06f 0007 	mvn.w	r0, #7
    2e5a:	e7f8      	b.n	2e4e <twim_set_hsmode_speed+0x4e>

00002e5c <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	4605      	mov	r5, r0
    2e60:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
    2e62:	4b37      	ldr	r3, [pc, #220]	; (2f40 <twim_set_config+0xe4>)
    2e64:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    2e66:	2301      	movs	r3, #1
    2e68:	602b      	str	r3, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
    2e6a:	2380      	movs	r3, #128	; 0x80
    2e6c:	602b      	str	r3, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
    2e6e:	f04f 33ff 	mov.w	r3, #4294967295
    2e72:	62eb      	str	r3, [r5, #44]	; 0x2c

	if (config->smbus) {
    2e74:	7ba3      	ldrb	r3, [r4, #14]
    2e76:	b123      	cbz	r3, 2e82 <twim_set_config+0x26>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    2e78:	2310      	movs	r3, #16
    2e7a:	602b      	str	r3, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    2e7c:	f04f 33ff 	mov.w	r3, #4294967295
    2e80:	60ab      	str	r3, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    2e82:	6861      	ldr	r1, [r4, #4]
    2e84:	b921      	cbnz	r1, 2e90 <twim_set_config+0x34>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    2e86:	68a1      	ldr	r1, [r4, #8]
    2e88:	b959      	cbnz	r1, 2ea2 <twim_set_config+0x46>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    2e8a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2e8e:	e017      	b.n	2ec0 <twim_set_config+0x64>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    2e90:	7b23      	ldrb	r3, [r4, #12]
    2e92:	6822      	ldr	r2, [r4, #0]
    2e94:	4628      	mov	r0, r5
    2e96:	4e2b      	ldr	r6, [pc, #172]	; (2f44 <twim_set_config+0xe8>)
    2e98:	47b0      	blx	r6
    2e9a:	2800      	cmp	r0, #0
    2e9c:	d14a      	bne.n	2f34 <twim_set_config+0xd8>
	if (config->hsmode_speed) {
    2e9e:	68a1      	ldr	r1, [r4, #8]
    2ea0:	b131      	cbz	r1, 2eb0 <twim_set_config+0x54>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    2ea2:	7b63      	ldrb	r3, [r4, #13]
    2ea4:	6822      	ldr	r2, [r4, #0]
    2ea6:	4628      	mov	r0, r5
    2ea8:	4e27      	ldr	r6, [pc, #156]	; (2f48 <twim_set_config+0xec>)
    2eaa:	47b0      	blx	r6
    2eac:	2800      	cmp	r0, #0
    2eae:	d144      	bne.n	2f3a <twim_set_config+0xde>
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    2eb0:	6861      	ldr	r1, [r4, #4]
    2eb2:	4b26      	ldr	r3, [pc, #152]	; (2f4c <twim_set_config+0xf0>)
    2eb4:	4299      	cmp	r1, r3
    2eb6:	bf94      	ite	ls
    2eb8:	f04f 5100 	movls.w	r1, #536870912	; 0x20000000
    2ebc:	f04f 5140 	movhi.w	r1, #805306368	; 0x30000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    2ec0:	7be3      	ldrb	r3, [r4, #15]
    2ec2:	061b      	lsls	r3, r3, #24
    2ec4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    2ec8:	7c22      	ldrb	r2, [r4, #16]
    2eca:	0412      	lsls	r2, r2, #16
    2ecc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    2ed0:	4313      	orrs	r3, r2
    2ed2:	7ca2      	ldrb	r2, [r4, #18]
    2ed4:	f002 0207 	and.w	r2, r2, #7
    2ed8:	4313      	orrs	r3, r2
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    2eda:	7c62      	ldrb	r2, [r4, #17]
    2edc:	0212      	lsls	r2, r2, #8
    2ede:	f402 7240 	and.w	r2, r2, #768	; 0x300
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    2ee2:	4313      	orrs	r3, r2
    2ee4:	430b      	orrs	r3, r1
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    2ee6:	63eb      	str	r3, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2ee8:	7de3      	ldrb	r3, [r4, #23]
    2eea:	f003 0307 	and.w	r3, r3, #7
    2eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    2ef2:	7ce2      	ldrb	r2, [r4, #19]
    2ef4:	0612      	lsls	r2, r2, #24
    2ef6:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2efa:	4313      	orrs	r3, r2
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    2efc:	7d62      	ldrb	r2, [r4, #21]
    2efe:	0412      	lsls	r2, r2, #16
    2f00:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2f04:	4313      	orrs	r3, r2
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    2f06:	7d22      	ldrb	r2, [r4, #20]
    2f08:	0512      	lsls	r2, r2, #20
    2f0a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2f0e:	4313      	orrs	r3, r2
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    2f10:	7da2      	ldrb	r2, [r4, #22]
    2f12:	0212      	lsls	r2, r2, #8
    2f14:	f402 7240 	and.w	r2, r2, #768	; 0x300
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    2f18:	4313      	orrs	r3, r2
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    2f1a:	642b      	str	r3, [r5, #64]	; 0x40
    2f1c:	4b0c      	ldr	r3, [pc, #48]	; (2f50 <twim_set_config+0xf4>)
    2f1e:	1dd9      	adds	r1, r3, #7
		sleepmgr_locks[i] = 0;
    2f20:	2200      	movs	r2, #0
    2f22:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2f26:	428b      	cmp	r3, r1
    2f28:	d1fb      	bne.n	2f22 <twim_set_config+0xc6>
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f2a:	2201      	movs	r2, #1
    2f2c:	4b09      	ldr	r3, [pc, #36]	; (2f54 <twim_set_config+0xf8>)
    2f2e:	71da      	strb	r2, [r3, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    2f30:	2000      	movs	r0, #0
    2f32:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    2f34:	f06f 0007 	mvn.w	r0, #7
    2f38:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    2f3a:	f06f 0007 	mvn.w	r0, #7
    2f3e:	bd70      	pop	{r4, r5, r6, pc}
    2f40:	00001f7d 	.word	0x00001f7d
    2f44:	00002da5 	.word	0x00002da5
    2f48:	00002e01 	.word	0x00002e01
    2f4c:	000f423f 	.word	0x000f423f
    2f50:	20000cef 	.word	0x20000cef
    2f54:	20000cf0 	.word	0x20000cf0

00002f58 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    2f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f5a:	4604      	mov	r4, r0
    2f5c:	460e      	mov	r6, r1
    2f5e:	4617      	mov	r7, r2
    2f60:	461d      	mov	r5, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    2f62:	4b1c      	ldr	r3, [pc, #112]	; (2fd4 <twim_set_callback+0x7c>)
    2f64:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    2f66:	4b1c      	ldr	r3, [pc, #112]	; (2fd8 <twim_set_callback+0x80>)
    2f68:	429c      	cmp	r4, r3
    2f6a:	d023      	beq.n	2fb4 <twim_set_callback+0x5c>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    2f6c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2f70:	429c      	cmp	r4, r3
    2f72:	d021      	beq.n	2fb8 <twim_set_callback+0x60>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    2f74:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    2f78:	429c      	cmp	r4, r3
    2f7a:	d025      	beq.n	2fc8 <twim_set_callback+0x70>
	uint32_t irq_line = 0;
    2f7c:	2200      	movs	r2, #0
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    2f7e:	4b17      	ldr	r3, [pc, #92]	; (2fdc <twim_set_callback+0x84>)
    2f80:	429c      	cmp	r4, r3
    2f82:	d01b      	beq.n	2fbc <twim_set_callback+0x64>
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    2f84:	4b16      	ldr	r3, [pc, #88]	; (2fe0 <twim_set_callback+0x88>)
    2f86:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2f8a:	b253      	sxtb	r3, r2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f8c:	0958      	lsrs	r0, r3, #5
    2f8e:	f002 021f 	and.w	r2, r2, #31
    2f92:	2101      	movs	r1, #1
    2f94:	fa01 f202 	lsl.w	r2, r1, r2
    2f98:	4912      	ldr	r1, [pc, #72]	; (2fe4 <twim_set_callback+0x8c>)
    2f9a:	f100 0760 	add.w	r7, r0, #96	; 0x60
    2f9e:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2fa2:	012d      	lsls	r5, r5, #4
    2fa4:	b2ed      	uxtb	r5, r5
    2fa6:	440b      	add	r3, r1
    2fa8:	f883 5300 	strb.w	r5, [r3, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fac:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	twim->TWIM_IER = interrupt_source;
    2fb0:	6226      	str	r6, [r4, #32]
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	twim_enable_interrupt(twim, interrupt_source);
}
    2fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		irq_line = TWIM3_IRQn;
    2fb4:	224e      	movs	r2, #78	; 0x4e
    2fb6:	e7e2      	b.n	2f7e <twim_set_callback+0x26>
		irq_line = TWIM2_IRQn;
    2fb8:	224d      	movs	r2, #77	; 0x4d
    2fba:	e7e3      	b.n	2f84 <twim_set_callback+0x2c>
	twim_callback_pointer[twim_ch] = callback;
    2fbc:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <twim_set_callback+0x88>)
    2fbe:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2fc2:	233d      	movs	r3, #61	; 0x3d
		irq_line = TWIM0_IRQn;
    2fc4:	461a      	mov	r2, r3
    2fc6:	e7e1      	b.n	2f8c <twim_set_callback+0x34>
	twim_callback_pointer[twim_ch] = callback;
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <twim_set_callback+0x88>)
    2fca:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    2fce:	233f      	movs	r3, #63	; 0x3f
		irq_line = TWIM1_IRQn;
    2fd0:	461a      	mov	r2, r3
    2fd2:	e7db      	b.n	2f8c <twim_set_callback+0x34>
    2fd4:	00002a75 	.word	0x00002a75
    2fd8:	4007c000 	.word	0x4007c000
    2fdc:	40018000 	.word	0x40018000
    2fe0:	20000e18 	.word	0x20000e18
    2fe4:	e000e100 	.word	0xe000e100

00002fe8 <TWIM0_Handler>:

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    2fe8:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    2fea:	4b02      	ldr	r3, [pc, #8]	; (2ff4 <TWIM0_Handler+0xc>)
    2fec:	681b      	ldr	r3, [r3, #0]
    2fee:	4802      	ldr	r0, [pc, #8]	; (2ff8 <TWIM0_Handler+0x10>)
    2ff0:	4798      	blx	r3
    2ff2:	bd08      	pop	{r3, pc}
    2ff4:	20000e18 	.word	0x20000e18
    2ff8:	40018000 	.word	0x40018000

00002ffc <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    2ffc:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    2ffe:	4b02      	ldr	r3, [pc, #8]	; (3008 <TWIM1_Handler+0xc>)
    3000:	685b      	ldr	r3, [r3, #4]
    3002:	4802      	ldr	r0, [pc, #8]	; (300c <TWIM1_Handler+0x10>)
    3004:	4798      	blx	r3
    3006:	bd08      	pop	{r3, pc}
    3008:	20000e18 	.word	0x20000e18
    300c:	4001c000 	.word	0x4001c000

00003010 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    3010:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    3012:	4b02      	ldr	r3, [pc, #8]	; (301c <TWIM2_Handler+0xc>)
    3014:	689b      	ldr	r3, [r3, #8]
    3016:	4802      	ldr	r0, [pc, #8]	; (3020 <TWIM2_Handler+0x10>)
    3018:	4798      	blx	r3
    301a:	bd08      	pop	{r3, pc}
    301c:	20000e18 	.word	0x20000e18
    3020:	40078000 	.word	0x40078000

00003024 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    3024:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    3026:	4b02      	ldr	r3, [pc, #8]	; (3030 <TWIM3_Handler+0xc>)
    3028:	68db      	ldr	r3, [r3, #12]
    302a:	4802      	ldr	r0, [pc, #8]	; (3034 <TWIM3_Handler+0x10>)
    302c:	4798      	blx	r3
    302e:	bd08      	pop	{r3, pc}
    3030:	20000e18 	.word	0x20000e18
    3034:	4007c000 	.word	0x4007c000

00003038 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3038:	e7fe      	b.n	3038 <Dummy_Handler>
	...

0000303c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    303c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    303e:	4b17      	ldr	r3, [pc, #92]	; (309c <Reset_Handler+0x60>)
    3040:	4a17      	ldr	r2, [pc, #92]	; (30a0 <Reset_Handler+0x64>)
    3042:	429a      	cmp	r2, r3
    3044:	d010      	beq.n	3068 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
    3046:	4b17      	ldr	r3, [pc, #92]	; (30a4 <Reset_Handler+0x68>)
    3048:	4a14      	ldr	r2, [pc, #80]	; (309c <Reset_Handler+0x60>)
    304a:	429a      	cmp	r2, r3
    304c:	d20c      	bcs.n	3068 <Reset_Handler+0x2c>
    304e:	3b01      	subs	r3, #1
    3050:	1a9b      	subs	r3, r3, r2
    3052:	f023 0303 	bic.w	r3, r3, #3
    3056:	3304      	adds	r3, #4
    3058:	4413      	add	r3, r2
    305a:	4911      	ldr	r1, [pc, #68]	; (30a0 <Reset_Handler+0x64>)
			*pDest++ = *pSrc++;
    305c:	f851 0b04 	ldr.w	r0, [r1], #4
    3060:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
    3064:	429a      	cmp	r2, r3
    3066:	d1f9      	bne.n	305c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3068:	4b0f      	ldr	r3, [pc, #60]	; (30a8 <Reset_Handler+0x6c>)
    306a:	4a10      	ldr	r2, [pc, #64]	; (30ac <Reset_Handler+0x70>)
    306c:	429a      	cmp	r2, r3
    306e:	d20a      	bcs.n	3086 <Reset_Handler+0x4a>
    3070:	3b01      	subs	r3, #1
    3072:	1a9b      	subs	r3, r3, r2
    3074:	f023 0303 	bic.w	r3, r3, #3
    3078:	3304      	adds	r3, #4
    307a:	4413      	add	r3, r2
		*pDest++ = 0;
    307c:	2100      	movs	r1, #0
    307e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
    3082:	4293      	cmp	r3, r2
    3084:	d1fb      	bne.n	307e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3086:	4a0a      	ldr	r2, [pc, #40]	; (30b0 <Reset_Handler+0x74>)
    3088:	4b0a      	ldr	r3, [pc, #40]	; (30b4 <Reset_Handler+0x78>)
    308a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    308e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    3090:	4b09      	ldr	r3, [pc, #36]	; (30b8 <Reset_Handler+0x7c>)
    3092:	4798      	blx	r3

	/* Branch to main function */
	main();
    3094:	4b09      	ldr	r3, [pc, #36]	; (30bc <Reset_Handler+0x80>)
    3096:	4798      	blx	r3
    3098:	e7fe      	b.n	3098 <Reset_Handler+0x5c>
    309a:	bf00      	nop
    309c:	20000000 	.word	0x20000000
    30a0:	00006418 	.word	0x00006418
    30a4:	20000ab8 	.word	0x20000ab8
    30a8:	20000e50 	.word	0x20000e50
    30ac:	20000ac0 	.word	0x20000ac0
    30b0:	e000ed00 	.word	0xe000ed00
    30b4:	00000000 	.word	0x00000000
    30b8:	0000345d 	.word	0x0000345d
    30bc:	00003421 	.word	0x00003421

000030c0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    30c0:	4b0a      	ldr	r3, [pc, #40]	; (30ec <_sbrk+0x2c>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	b153      	cbz	r3, 30dc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    30c6:	4b09      	ldr	r3, [pc, #36]	; (30ec <_sbrk+0x2c>)
    30c8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    30ca:	181a      	adds	r2, r3, r0
    30cc:	4908      	ldr	r1, [pc, #32]	; (30f0 <_sbrk+0x30>)
    30ce:	4291      	cmp	r1, r2
    30d0:	db08      	blt.n	30e4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
    30d2:	4610      	mov	r0, r2
    30d4:	4a05      	ldr	r2, [pc, #20]	; (30ec <_sbrk+0x2c>)
    30d6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    30d8:	4618      	mov	r0, r3
    30da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    30dc:	4a05      	ldr	r2, [pc, #20]	; (30f4 <_sbrk+0x34>)
    30de:	4b03      	ldr	r3, [pc, #12]	; (30ec <_sbrk+0x2c>)
    30e0:	601a      	str	r2, [r3, #0]
    30e2:	e7f0      	b.n	30c6 <_sbrk+0x6>
		return (caddr_t) -1;	
    30e4:	f04f 30ff 	mov.w	r0, #4294967295
}
    30e8:	4770      	bx	lr
    30ea:	bf00      	nop
    30ec:	20000cb0 	.word	0x20000cb0
    30f0:	20007ffc 	.word	0x20007ffc
    30f4:	20001e50 	.word	0x20001e50

000030f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    30f8:	f04f 30ff 	mov.w	r0, #4294967295
    30fc:	4770      	bx	lr

000030fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    30fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3102:	604b      	str	r3, [r1, #4]

	return 0;
}
    3104:	2000      	movs	r0, #0
    3106:	4770      	bx	lr

00003108 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3108:	2001      	movs	r0, #1
    310a:	4770      	bx	lr

0000310c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    310c:	2000      	movs	r0, #0
    310e:	4770      	bx	lr

00003110 <coder_detect>:
void set_feature(uint8_t * report) {
	uint8_t t = 0;
	t = 3;
}

void coder_detect() {
    3110:	b430      	push	{r4, r5}
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
    3112:	4b18      	ldr	r3, [pc, #96]	; (3174 <coder_detect+0x64>)
    3114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    3116:	f002 0230 	and.w	r2, r2, #48	; 0x30
	uint16_t A = 0;
	uint16_t B = 0;
	
	uint32_t pins = ioport_get_port_level(IOPORT_PIOA, GPIO_PA04 | GPIO_PA05);
	
	A = (pins >> PIN_PA04) & 1;
    311a:	f3c2 1400 	ubfx	r4, r2, #4, #1
	B = (pins >> PIN_PA05) & 1;
    311e:	0952      	lsrs	r2, r2, #5

	int valid = (A << 2) | (prev_A << 3) | B | (prev_B << 1);
    3120:	4815      	ldr	r0, [pc, #84]	; (3178 <coder_detect+0x68>)
    3122:	f990 5000 	ldrsb.w	r5, [r0]
    3126:	4915      	ldr	r1, [pc, #84]	; (317c <coder_detect+0x6c>)
    3128:	f991 3000 	ldrsb.w	r3, [r1]
    312c:	005b      	lsls	r3, r3, #1
    312e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    3132:	4313      	orrs	r3, r2
    3134:	ea43 0384 	orr.w	r3, r3, r4, lsl #2

	prev_A = A;
    3138:	7004      	strb	r4, [r0, #0]
	prev_B = B;
    313a:	700a      	strb	r2, [r1, #0]

	if(valid == 0b0111 | valid == 0b1000 | valid == 0b0001 | valid == 0b1110) {
    313c:	2b0e      	cmp	r3, #14
    313e:	d80b      	bhi.n	3158 <coder_detect+0x48>
    3140:	f244 1282 	movw	r2, #16770	; 0x4182
    3144:	40da      	lsrs	r2, r3
    3146:	f012 0f01 	tst.w	r2, #1
    314a:	d005      	beq.n	3158 <coder_detect+0x48>
		smooth_cnt++;
    314c:	4a0c      	ldr	r2, [pc, #48]	; (3180 <coder_detect+0x70>)
    314e:	8813      	ldrh	r3, [r2, #0]
    3150:	3301      	adds	r3, #1
    3152:	8013      	strh	r3, [r2, #0]
		} else if (valid == 0b0100 | valid == 0b1011 | valid == 0b1101 | valid == 0b0010) {
		smooth_cnt--;
	}
}
    3154:	bc30      	pop	{r4, r5}
    3156:	4770      	bx	lr
		} else if (valid == 0b0100 | valid == 0b1011 | valid == 0b1101 | valid == 0b0010) {
    3158:	2b0d      	cmp	r3, #13
    315a:	d8fb      	bhi.n	3154 <coder_detect+0x44>
    315c:	f642 0214 	movw	r2, #10260	; 0x2814
    3160:	fa22 f303 	lsr.w	r3, r2, r3
    3164:	f013 0f01 	tst.w	r3, #1
    3168:	d0f4      	beq.n	3154 <coder_detect+0x44>
		smooth_cnt--;
    316a:	4a05      	ldr	r2, [pc, #20]	; (3180 <coder_detect+0x70>)
    316c:	8813      	ldrh	r3, [r2, #0]
    316e:	3b01      	subs	r3, #1
    3170:	8013      	strh	r3, [r2, #0]
}
    3172:	e7ef      	b.n	3154 <coder_detect+0x44>
    3174:	400e1000 	.word	0x400e1000
    3178:	20000cb5 	.word	0x20000cb5
    317c:	20000cb6 	.word	0x20000cb6
    3180:	20000cb8 	.word	0x20000cb8

00003184 <Periodic_Int>:
void Periodic_Int(void) {
    3184:	b508      	push	{r3, lr}
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);
    3186:	2101      	movs	r1, #1
    3188:	4811      	ldr	r0, [pc, #68]	; (31d0 <Periodic_Int+0x4c>)
    318a:	4b12      	ldr	r3, [pc, #72]	; (31d4 <Periodic_Int+0x50>)
    318c:	4798      	blx	r3
	ioport_set_pin_level(GLED, debug_state & 1);
    318e:	4b12      	ldr	r3, [pc, #72]	; (31d8 <Periodic_Int+0x54>)
    3190:	781b      	ldrb	r3, [r3, #0]
	if (level) {
    3192:	f013 0f01 	tst.w	r3, #1
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3196:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    319a:	4a10      	ldr	r2, [pc, #64]	; (31dc <Periodic_Int+0x58>)
    319c:	bf14      	ite	ne
    319e:	6551      	strne	r1, [r2, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    31a0:	6591      	streq	r1, [r2, #88]	; 0x58
	debug_state = ~debug_state;
    31a2:	43db      	mvns	r3, r3
    31a4:	4a0c      	ldr	r2, [pc, #48]	; (31d8 <Periodic_Int+0x54>)
    31a6:	7013      	strb	r3, [r2, #0]
	ioport_set_pin_level(BLED, smooth_cnt & 1);
    31a8:	4b0d      	ldr	r3, [pc, #52]	; (31e0 <Periodic_Int+0x5c>)
    31aa:	f9b3 3000 	ldrsh.w	r3, [r3]
	if (level) {
    31ae:	f013 0f01 	tst.w	r3, #1
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    31b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    31b6:	4a09      	ldr	r2, [pc, #36]	; (31dc <Periodic_Int+0x58>)
    31b8:	bf14      	ite	ne
    31ba:	6551      	strne	r1, [r2, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    31bc:	6591      	streq	r1, [r2, #88]	; 0x58
	_vfo_report.smoothdial = smooth_cnt;
    31be:	4809      	ldr	r0, [pc, #36]	; (31e4 <Periodic_Int+0x60>)
    31c0:	8043      	strh	r3, [r0, #2]
	smooth_cnt = 0;
    31c2:	2200      	movs	r2, #0
    31c4:	4b06      	ldr	r3, [pc, #24]	; (31e0 <Periodic_Int+0x5c>)
    31c6:	801a      	strh	r2, [r3, #0]
	udi_hid_generic_send_report_in((uint8_t *)&_vfo_report);
    31c8:	4b07      	ldr	r3, [pc, #28]	; (31e8 <Periodic_Int+0x64>)
    31ca:	4798      	blx	r3
    31cc:	bd08      	pop	{r3, pc}
    31ce:	bf00      	nop
    31d0:	400f0800 	.word	0x400f0800
    31d4:	00000ba9 	.word	0x00000ba9
    31d8:	20000cb4 	.word	0x20000cb4
    31dc:	400e1000 	.word	0x400e1000
    31e0:	20000cb8 	.word	0x20000cb8
    31e4:	20000cf8 	.word	0x20000cf8
    31e8:	000002f9 	.word	0x000002f9

000031ec <init_dial>:
void init_dial(void) {
    31ec:	b530      	push	{r4, r5, lr}
    31ee:	b087      	sub	sp, #28
	sysclk_enable_peripheral_clock(GPIO);
    31f0:	4c5d      	ldr	r4, [pc, #372]	; (3368 <init_dial+0x17c>)
    31f2:	4620      	mov	r0, r4
    31f4:	4b5d      	ldr	r3, [pc, #372]	; (336c <init_dial+0x180>)
    31f6:	4798      	blx	r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    31f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    31fc:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    31fe:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3202:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    3208:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    320a:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    320e:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3214:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3216:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    321a:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    321c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3220:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3222:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3226:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    322c:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    322e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3232:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3238:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    323a:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    323e:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3240:	2304      	movs	r3, #4
    3242:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3244:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3248:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    324a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    324e:	6463      	str	r3, [r4, #68]	; 0x44
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3250:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3254:	6563      	str	r3, [r4, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    3256:	2220      	movs	r2, #32
    3258:	64a2      	str	r2, [r4, #72]	; 0x48
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    325a:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    325e:	2310      	movs	r3, #16
    3260:	64a3      	str	r3, [r4, #72]	; 0x48
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    3262:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
		base->GPIO_PUERS = mask;
    3266:	6762      	str	r2, [r4, #116]	; 0x74
		base->GPIO_PDERC = mask;
    3268:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
		base->GPIO_GFERS = mask;
    326c:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
		base->GPIO_ODCR0C = mask;
    3270:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3274:	61a2      	str	r2, [r4, #24]
		base->GPIO_PMR1C = mask;
    3276:	62a2      	str	r2, [r4, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    3278:	63a2      	str	r2, [r4, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    327a:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
    327e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
		base->GPIO_PUERS = mask;
    3282:	6763      	str	r3, [r4, #116]	; 0x74
		base->GPIO_PDERC = mask;
    3284:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		base->GPIO_GFERS = mask;
    3288:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		base->GPIO_ODCR0C = mask;
    328c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3290:	61a3      	str	r3, [r4, #24]
		base->GPIO_PMR1C = mask;
    3292:	62a3      	str	r3, [r4, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    3294:	63a3      	str	r3, [r4, #56]	; 0x38
		base->GPIO_IMR0C = mask;
    3296:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		base->GPIO_IMR1C = mask;
    329a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	if (!gpio_set_pin_callback(SM_COD_N, coder_detect, 1) || !gpio_set_pin_callback(SM_COD_P, coder_detect, 1)) {
    329e:	2201      	movs	r2, #1
    32a0:	4933      	ldr	r1, [pc, #204]	; (3370 <init_dial+0x184>)
    32a2:	2005      	movs	r0, #5
    32a4:	4b33      	ldr	r3, [pc, #204]	; (3374 <init_dial+0x188>)
    32a6:	4798      	blx	r3
    32a8:	b128      	cbz	r0, 32b6 <init_dial+0xca>
    32aa:	2201      	movs	r2, #1
    32ac:	4930      	ldr	r1, [pc, #192]	; (3370 <init_dial+0x184>)
    32ae:	2004      	movs	r0, #4
    32b0:	4b30      	ldr	r3, [pc, #192]	; (3374 <init_dial+0x188>)
    32b2:	4798      	blx	r3
    32b4:	b918      	cbnz	r0, 32be <init_dial+0xd2>
		printf("Set pin callback failure!\r\n");
    32b6:	4830      	ldr	r0, [pc, #192]	; (3378 <init_dial+0x18c>)
    32b8:	4b30      	ldr	r3, [pc, #192]	; (337c <init_dial+0x190>)
    32ba:	4798      	blx	r3
    32bc:	e7fe      	b.n	32bc <init_dial+0xd0>
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    32be:	4b2a      	ldr	r3, [pc, #168]	; (3368 <init_dial+0x17c>)
    32c0:	2220      	movs	r2, #32
    32c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    32c6:	2210      	movs	r2, #16
    32c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->GPIO_PUERC = mask;
    32cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    32d0:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    32d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    32d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    32da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    32de:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    32e0:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2S = mask;
    32e2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    32e4:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    32e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    32ea:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    32ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    32f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    32f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    32f8:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    32fa:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2S = mask;
    32fc:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    32fe:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    3300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    3304:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    3306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    330a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    330e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    3312:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    3314:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    3316:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3318:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    331a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    331e:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    3320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    3324:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    3328:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    332c:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    332e:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    3330:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    3332:	609a      	str	r2, [r3, #8]
	twimconf.twim_clk = sysclk_get_cpu_hz();
    3334:	4b12      	ldr	r3, [pc, #72]	; (3380 <init_dial+0x194>)
    3336:	9300      	str	r3, [sp, #0]
	twimconf.speed = TWI_FAST_MODE_SPEED;
    3338:	4b12      	ldr	r3, [pc, #72]	; (3384 <init_dial+0x198>)
    333a:	9301      	str	r3, [sp, #4]
	twimconf.smbus = false;
    333c:	2400      	movs	r4, #0
    333e:	f88d 400e 	strb.w	r4, [sp, #14]
	twimconf.hsmode_speed = 0;
    3342:	9402      	str	r4, [sp, #8]
	twimconf.data_setup_cycles = 0;
    3344:	f88d 400c 	strb.w	r4, [sp, #12]
	twimconf.hsmode_data_setup_cycles = 0;
    3348:	f88d 400d 	strb.w	r4, [sp, #13]
	twim_set_config(TWIM2, &twimconf);
    334c:	4d0e      	ldr	r5, [pc, #56]	; (3388 <init_dial+0x19c>)
    334e:	4669      	mov	r1, sp
    3350:	4628      	mov	r0, r5
    3352:	4b0e      	ldr	r3, [pc, #56]	; (338c <init_dial+0x1a0>)
    3354:	4798      	blx	r3
	twim_set_callback(TWIM2, 0, twim_default_callback, 1);
    3356:	2301      	movs	r3, #1
    3358:	4a0d      	ldr	r2, [pc, #52]	; (3390 <init_dial+0x1a4>)
    335a:	4621      	mov	r1, r4
    335c:	4628      	mov	r0, r5
    335e:	4c0d      	ldr	r4, [pc, #52]	; (3394 <init_dial+0x1a8>)
    3360:	47a0      	blx	r4
}
    3362:	b007      	add	sp, #28
    3364:	bd30      	pop	{r4, r5, pc}
    3366:	bf00      	nop
    3368:	400e1000 	.word	0x400e1000
    336c:	00001f7d 	.word	0x00001f7d
    3370:	00003111 	.word	0x00003111
    3374:	00002779 	.word	0x00002779
    3378:	00006268 	.word	0x00006268
    337c:	000034ad 	.word	0x000034ad
    3380:	00f42400 	.word	0x00f42400
    3384:	00061a80 	.word	0x00061a80
    3388:	40078000 	.word	0x40078000
    338c:	00002e5d 	.word	0x00002e5d
    3390:	00002a9d 	.word	0x00002a9d
    3394:	00002f59 	.word	0x00002f59

00003398 <init_ast_timer>:
void init_ast_timer(void) {
    3398:	b510      	push	{r4, lr}
    339a:	b086      	sub	sp, #24
	aconf.mode = AST_COUNTER_MODE;
    339c:	2300      	movs	r3, #0
    339e:	f88d 300c 	strb.w	r3, [sp, #12]
	aconf.osc_type = AST_OSC_PB;
    33a2:	2202      	movs	r2, #2
    33a4:	f88d 200d 	strb.w	r2, [sp, #13]
	aconf.psel = 19;
    33a8:	2213      	movs	r2, #19
    33aa:	f88d 200e 	strb.w	r2, [sp, #14]
	aconf.counter = 0;
    33ae:	9304      	str	r3, [sp, #16]
	ast_enable(AST);
    33b0:	4c12      	ldr	r4, [pc, #72]	; (33fc <init_ast_timer+0x64>)
    33b2:	4620      	mov	r0, r4
    33b4:	4b12      	ldr	r3, [pc, #72]	; (3400 <init_ast_timer+0x68>)
    33b6:	4798      	blx	r3
	ast_set_config(AST, &aconf);
    33b8:	a903      	add	r1, sp, #12
    33ba:	4620      	mov	r0, r4
    33bc:	4b11      	ldr	r3, [pc, #68]	; (3404 <init_ast_timer+0x6c>)
    33be:	4798      	blx	r3
	ast_write_periodic0_value(AST, 18);
    33c0:	2112      	movs	r1, #18
    33c2:	4620      	mov	r0, r4
    33c4:	4b10      	ldr	r3, [pc, #64]	; (3408 <init_ast_timer+0x70>)
    33c6:	4798      	blx	r3
	int8_t status = ast_set_callback(AST, AST_INTERRUPT_PER, Periodic_Int, AST_PER_IRQn, 5);
    33c8:	2305      	movs	r3, #5
    33ca:	9300      	str	r3, [sp, #0]
    33cc:	2328      	movs	r3, #40	; 0x28
    33ce:	4a0f      	ldr	r2, [pc, #60]	; (340c <init_ast_timer+0x74>)
    33d0:	2101      	movs	r1, #1
    33d2:	4620      	mov	r0, r4
    33d4:	4c0e      	ldr	r4, [pc, #56]	; (3410 <init_ast_timer+0x78>)
    33d6:	47a0      	blx	r4
	if(status == 1) {
    33d8:	2801      	cmp	r0, #1
    33da:	d009      	beq.n	33f0 <init_ast_timer+0x58>
	} else if(status == 2) {
    33dc:	2802      	cmp	r0, #2
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    33de:	bf0c      	ite	eq
    33e0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    33e4:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
    33e8:	4b0a      	ldr	r3, [pc, #40]	; (3414 <init_ast_timer+0x7c>)
    33ea:	659a      	str	r2, [r3, #88]	; 0x58
}
    33ec:	b006      	add	sp, #24
    33ee:	bd10      	pop	{r4, pc}
    33f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    33f4:	4b07      	ldr	r3, [pc, #28]	; (3414 <init_ast_timer+0x7c>)
    33f6:	659a      	str	r2, [r3, #88]	; 0x58
    33f8:	e7f8      	b.n	33ec <init_ast_timer+0x54>
    33fa:	bf00      	nop
    33fc:	400f0800 	.word	0x400f0800
    3400:	00000a05 	.word	0x00000a05
    3404:	00000a81 	.word	0x00000a81
    3408:	00000b35 	.word	0x00000b35
    340c:	00003185 	.word	0x00003185
    3410:	00000bed 	.word	0x00000bed
    3414:	400e1000 	.word	0x400e1000

00003418 <user_callback_sof_action>:
void user_callback_sof_action() {
    3418:	4770      	bx	lr

0000341a <process_report>:
void process_report(uint8_t * report) {
    341a:	4770      	bx	lr

0000341c <set_feature>:
void set_feature(uint8_t * report) {
    341c:	4770      	bx	lr
	...

00003420 <main>:

int main (void)
{
    3420:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
    3422:	4b09      	ldr	r3, [pc, #36]	; (3448 <main+0x28>)
    3424:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
    3426:	2201      	movs	r2, #1
    3428:	4b08      	ldr	r3, [pc, #32]	; (344c <main+0x2c>)
    342a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    342c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3430:	b662      	cpsie	i
	
	init_dial();
    3432:	4b07      	ldr	r3, [pc, #28]	; (3450 <main+0x30>)
    3434:	4798      	blx	r3
	
	/* Init USB */
	
	udc_start();
    3436:	4b07      	ldr	r3, [pc, #28]	; (3454 <main+0x34>)
    3438:	4798      	blx	r3
	
	init_ast_timer();
    343a:	4b07      	ldr	r3, [pc, #28]	; (3458 <main+0x38>)
    343c:	4798      	blx	r3
{
    343e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Insert application code here, after the board has been initialized. */
	while(1) {
		//sleepmgr_enter_sleep();
		cnt++;
		if(cnt == 500) {
    3442:	3b01      	subs	r3, #1
    3444:	d1fd      	bne.n	3442 <main+0x22>
    3446:	e7fa      	b.n	343e <main+0x1e>
    3448:	00002401 	.word	0x00002401
    344c:	20000104 	.word	0x20000104
    3450:	000031ed 	.word	0x000031ed
    3454:	0000051d 	.word	0x0000051d
    3458:	00003399 	.word	0x00003399

0000345c <__libc_init_array>:
    345c:	b570      	push	{r4, r5, r6, lr}
    345e:	4e0f      	ldr	r6, [pc, #60]	; (349c <__libc_init_array+0x40>)
    3460:	4d0f      	ldr	r5, [pc, #60]	; (34a0 <__libc_init_array+0x44>)
    3462:	1b76      	subs	r6, r6, r5
    3464:	10b6      	asrs	r6, r6, #2
    3466:	bf18      	it	ne
    3468:	2400      	movne	r4, #0
    346a:	d005      	beq.n	3478 <__libc_init_array+0x1c>
    346c:	3401      	adds	r4, #1
    346e:	f855 3b04 	ldr.w	r3, [r5], #4
    3472:	4798      	blx	r3
    3474:	42a6      	cmp	r6, r4
    3476:	d1f9      	bne.n	346c <__libc_init_array+0x10>
    3478:	4e0a      	ldr	r6, [pc, #40]	; (34a4 <__libc_init_array+0x48>)
    347a:	4d0b      	ldr	r5, [pc, #44]	; (34a8 <__libc_init_array+0x4c>)
    347c:	1b76      	subs	r6, r6, r5
    347e:	f002 ffb5 	bl	63ec <_init>
    3482:	10b6      	asrs	r6, r6, #2
    3484:	bf18      	it	ne
    3486:	2400      	movne	r4, #0
    3488:	d006      	beq.n	3498 <__libc_init_array+0x3c>
    348a:	3401      	adds	r4, #1
    348c:	f855 3b04 	ldr.w	r3, [r5], #4
    3490:	4798      	blx	r3
    3492:	42a6      	cmp	r6, r4
    3494:	d1f9      	bne.n	348a <__libc_init_array+0x2e>
    3496:	bd70      	pop	{r4, r5, r6, pc}
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	bf00      	nop
    349c:	000063f8 	.word	0x000063f8
    34a0:	000063f8 	.word	0x000063f8
    34a4:	00006400 	.word	0x00006400
    34a8:	000063f8 	.word	0x000063f8

000034ac <iprintf>:
    34ac:	b40f      	push	{r0, r1, r2, r3}
    34ae:	b500      	push	{lr}
    34b0:	4907      	ldr	r1, [pc, #28]	; (34d0 <iprintf+0x24>)
    34b2:	b083      	sub	sp, #12
    34b4:	ab04      	add	r3, sp, #16
    34b6:	6808      	ldr	r0, [r1, #0]
    34b8:	f853 2b04 	ldr.w	r2, [r3], #4
    34bc:	6881      	ldr	r1, [r0, #8]
    34be:	9301      	str	r3, [sp, #4]
    34c0:	f000 f930 	bl	3724 <_vfiprintf_r>
    34c4:	b003      	add	sp, #12
    34c6:	f85d eb04 	ldr.w	lr, [sp], #4
    34ca:	b004      	add	sp, #16
    34cc:	4770      	bx	lr
    34ce:	bf00      	nop
    34d0:	20000108 	.word	0x20000108

000034d4 <memcpy>:
    34d4:	4684      	mov	ip, r0
    34d6:	ea41 0300 	orr.w	r3, r1, r0
    34da:	f013 0303 	ands.w	r3, r3, #3
    34de:	d16d      	bne.n	35bc <memcpy+0xe8>
    34e0:	3a40      	subs	r2, #64	; 0x40
    34e2:	d341      	bcc.n	3568 <memcpy+0x94>
    34e4:	f851 3b04 	ldr.w	r3, [r1], #4
    34e8:	f840 3b04 	str.w	r3, [r0], #4
    34ec:	f851 3b04 	ldr.w	r3, [r1], #4
    34f0:	f840 3b04 	str.w	r3, [r0], #4
    34f4:	f851 3b04 	ldr.w	r3, [r1], #4
    34f8:	f840 3b04 	str.w	r3, [r0], #4
    34fc:	f851 3b04 	ldr.w	r3, [r1], #4
    3500:	f840 3b04 	str.w	r3, [r0], #4
    3504:	f851 3b04 	ldr.w	r3, [r1], #4
    3508:	f840 3b04 	str.w	r3, [r0], #4
    350c:	f851 3b04 	ldr.w	r3, [r1], #4
    3510:	f840 3b04 	str.w	r3, [r0], #4
    3514:	f851 3b04 	ldr.w	r3, [r1], #4
    3518:	f840 3b04 	str.w	r3, [r0], #4
    351c:	f851 3b04 	ldr.w	r3, [r1], #4
    3520:	f840 3b04 	str.w	r3, [r0], #4
    3524:	f851 3b04 	ldr.w	r3, [r1], #4
    3528:	f840 3b04 	str.w	r3, [r0], #4
    352c:	f851 3b04 	ldr.w	r3, [r1], #4
    3530:	f840 3b04 	str.w	r3, [r0], #4
    3534:	f851 3b04 	ldr.w	r3, [r1], #4
    3538:	f840 3b04 	str.w	r3, [r0], #4
    353c:	f851 3b04 	ldr.w	r3, [r1], #4
    3540:	f840 3b04 	str.w	r3, [r0], #4
    3544:	f851 3b04 	ldr.w	r3, [r1], #4
    3548:	f840 3b04 	str.w	r3, [r0], #4
    354c:	f851 3b04 	ldr.w	r3, [r1], #4
    3550:	f840 3b04 	str.w	r3, [r0], #4
    3554:	f851 3b04 	ldr.w	r3, [r1], #4
    3558:	f840 3b04 	str.w	r3, [r0], #4
    355c:	f851 3b04 	ldr.w	r3, [r1], #4
    3560:	f840 3b04 	str.w	r3, [r0], #4
    3564:	3a40      	subs	r2, #64	; 0x40
    3566:	d2bd      	bcs.n	34e4 <memcpy+0x10>
    3568:	3230      	adds	r2, #48	; 0x30
    356a:	d311      	bcc.n	3590 <memcpy+0xbc>
    356c:	f851 3b04 	ldr.w	r3, [r1], #4
    3570:	f840 3b04 	str.w	r3, [r0], #4
    3574:	f851 3b04 	ldr.w	r3, [r1], #4
    3578:	f840 3b04 	str.w	r3, [r0], #4
    357c:	f851 3b04 	ldr.w	r3, [r1], #4
    3580:	f840 3b04 	str.w	r3, [r0], #4
    3584:	f851 3b04 	ldr.w	r3, [r1], #4
    3588:	f840 3b04 	str.w	r3, [r0], #4
    358c:	3a10      	subs	r2, #16
    358e:	d2ed      	bcs.n	356c <memcpy+0x98>
    3590:	320c      	adds	r2, #12
    3592:	d305      	bcc.n	35a0 <memcpy+0xcc>
    3594:	f851 3b04 	ldr.w	r3, [r1], #4
    3598:	f840 3b04 	str.w	r3, [r0], #4
    359c:	3a04      	subs	r2, #4
    359e:	d2f9      	bcs.n	3594 <memcpy+0xc0>
    35a0:	3204      	adds	r2, #4
    35a2:	d008      	beq.n	35b6 <memcpy+0xe2>
    35a4:	07d2      	lsls	r2, r2, #31
    35a6:	bf1c      	itt	ne
    35a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    35ac:	f800 3b01 	strbne.w	r3, [r0], #1
    35b0:	d301      	bcc.n	35b6 <memcpy+0xe2>
    35b2:	880b      	ldrh	r3, [r1, #0]
    35b4:	8003      	strh	r3, [r0, #0]
    35b6:	4660      	mov	r0, ip
    35b8:	4770      	bx	lr
    35ba:	bf00      	nop
    35bc:	2a08      	cmp	r2, #8
    35be:	d313      	bcc.n	35e8 <memcpy+0x114>
    35c0:	078b      	lsls	r3, r1, #30
    35c2:	d08d      	beq.n	34e0 <memcpy+0xc>
    35c4:	f010 0303 	ands.w	r3, r0, #3
    35c8:	d08a      	beq.n	34e0 <memcpy+0xc>
    35ca:	f1c3 0304 	rsb	r3, r3, #4
    35ce:	1ad2      	subs	r2, r2, r3
    35d0:	07db      	lsls	r3, r3, #31
    35d2:	bf1c      	itt	ne
    35d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    35d8:	f800 3b01 	strbne.w	r3, [r0], #1
    35dc:	d380      	bcc.n	34e0 <memcpy+0xc>
    35de:	f831 3b02 	ldrh.w	r3, [r1], #2
    35e2:	f820 3b02 	strh.w	r3, [r0], #2
    35e6:	e77b      	b.n	34e0 <memcpy+0xc>
    35e8:	3a04      	subs	r2, #4
    35ea:	d3d9      	bcc.n	35a0 <memcpy+0xcc>
    35ec:	3a01      	subs	r2, #1
    35ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    35f2:	f800 3b01 	strb.w	r3, [r0], #1
    35f6:	d2f9      	bcs.n	35ec <memcpy+0x118>
    35f8:	780b      	ldrb	r3, [r1, #0]
    35fa:	7003      	strb	r3, [r0, #0]
    35fc:	784b      	ldrb	r3, [r1, #1]
    35fe:	7043      	strb	r3, [r0, #1]
    3600:	788b      	ldrb	r3, [r1, #2]
    3602:	7083      	strb	r3, [r0, #2]
    3604:	4660      	mov	r0, ip
    3606:	4770      	bx	lr

00003608 <memset>:
    3608:	b470      	push	{r4, r5, r6}
    360a:	0786      	lsls	r6, r0, #30
    360c:	d046      	beq.n	369c <memset+0x94>
    360e:	1e54      	subs	r4, r2, #1
    3610:	2a00      	cmp	r2, #0
    3612:	d041      	beq.n	3698 <memset+0x90>
    3614:	b2ca      	uxtb	r2, r1
    3616:	4603      	mov	r3, r0
    3618:	e002      	b.n	3620 <memset+0x18>
    361a:	f114 34ff 	adds.w	r4, r4, #4294967295
    361e:	d33b      	bcc.n	3698 <memset+0x90>
    3620:	f803 2b01 	strb.w	r2, [r3], #1
    3624:	079d      	lsls	r5, r3, #30
    3626:	d1f8      	bne.n	361a <memset+0x12>
    3628:	2c03      	cmp	r4, #3
    362a:	d92e      	bls.n	368a <memset+0x82>
    362c:	b2cd      	uxtb	r5, r1
    362e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3632:	2c0f      	cmp	r4, #15
    3634:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3638:	d919      	bls.n	366e <memset+0x66>
    363a:	f103 0210 	add.w	r2, r3, #16
    363e:	4626      	mov	r6, r4
    3640:	3e10      	subs	r6, #16
    3642:	2e0f      	cmp	r6, #15
    3644:	f842 5c10 	str.w	r5, [r2, #-16]
    3648:	f842 5c0c 	str.w	r5, [r2, #-12]
    364c:	f842 5c08 	str.w	r5, [r2, #-8]
    3650:	f842 5c04 	str.w	r5, [r2, #-4]
    3654:	f102 0210 	add.w	r2, r2, #16
    3658:	d8f2      	bhi.n	3640 <memset+0x38>
    365a:	f1a4 0210 	sub.w	r2, r4, #16
    365e:	f022 020f 	bic.w	r2, r2, #15
    3662:	f004 040f 	and.w	r4, r4, #15
    3666:	3210      	adds	r2, #16
    3668:	2c03      	cmp	r4, #3
    366a:	4413      	add	r3, r2
    366c:	d90d      	bls.n	368a <memset+0x82>
    366e:	461e      	mov	r6, r3
    3670:	4622      	mov	r2, r4
    3672:	3a04      	subs	r2, #4
    3674:	2a03      	cmp	r2, #3
    3676:	f846 5b04 	str.w	r5, [r6], #4
    367a:	d8fa      	bhi.n	3672 <memset+0x6a>
    367c:	1f22      	subs	r2, r4, #4
    367e:	f022 0203 	bic.w	r2, r2, #3
    3682:	3204      	adds	r2, #4
    3684:	4413      	add	r3, r2
    3686:	f004 0403 	and.w	r4, r4, #3
    368a:	b12c      	cbz	r4, 3698 <memset+0x90>
    368c:	b2c9      	uxtb	r1, r1
    368e:	441c      	add	r4, r3
    3690:	f803 1b01 	strb.w	r1, [r3], #1
    3694:	429c      	cmp	r4, r3
    3696:	d1fb      	bne.n	3690 <memset+0x88>
    3698:	bc70      	pop	{r4, r5, r6}
    369a:	4770      	bx	lr
    369c:	4614      	mov	r4, r2
    369e:	4603      	mov	r3, r0
    36a0:	e7c2      	b.n	3628 <memset+0x20>
    36a2:	bf00      	nop

000036a4 <__sprint_r.part.0>:
    36a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    36aa:	049c      	lsls	r4, r3, #18
    36ac:	4693      	mov	fp, r2
    36ae:	d52f      	bpl.n	3710 <__sprint_r.part.0+0x6c>
    36b0:	6893      	ldr	r3, [r2, #8]
    36b2:	6812      	ldr	r2, [r2, #0]
    36b4:	b353      	cbz	r3, 370c <__sprint_r.part.0+0x68>
    36b6:	460e      	mov	r6, r1
    36b8:	4607      	mov	r7, r0
    36ba:	f102 0908 	add.w	r9, r2, #8
    36be:	e919 0420 	ldmdb	r9, {r5, sl}
    36c2:	ea5f 089a 	movs.w	r8, sl, lsr #2
    36c6:	d017      	beq.n	36f8 <__sprint_r.part.0+0x54>
    36c8:	3d04      	subs	r5, #4
    36ca:	2400      	movs	r4, #0
    36cc:	e001      	b.n	36d2 <__sprint_r.part.0+0x2e>
    36ce:	45a0      	cmp	r8, r4
    36d0:	d010      	beq.n	36f4 <__sprint_r.part.0+0x50>
    36d2:	4632      	mov	r2, r6
    36d4:	f855 1f04 	ldr.w	r1, [r5, #4]!
    36d8:	4638      	mov	r0, r7
    36da:	f001 f8bb 	bl	4854 <_fputwc_r>
    36de:	1c43      	adds	r3, r0, #1
    36e0:	f104 0401 	add.w	r4, r4, #1
    36e4:	d1f3      	bne.n	36ce <__sprint_r.part.0+0x2a>
    36e6:	2300      	movs	r3, #0
    36e8:	f8cb 3008 	str.w	r3, [fp, #8]
    36ec:	f8cb 3004 	str.w	r3, [fp, #4]
    36f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36f4:	f8db 3008 	ldr.w	r3, [fp, #8]
    36f8:	f02a 0a03 	bic.w	sl, sl, #3
    36fc:	eba3 030a 	sub.w	r3, r3, sl
    3700:	f8cb 3008 	str.w	r3, [fp, #8]
    3704:	f109 0908 	add.w	r9, r9, #8
    3708:	2b00      	cmp	r3, #0
    370a:	d1d8      	bne.n	36be <__sprint_r.part.0+0x1a>
    370c:	2000      	movs	r0, #0
    370e:	e7ea      	b.n	36e6 <__sprint_r.part.0+0x42>
    3710:	f001 fa0a 	bl	4b28 <__sfvwrite_r>
    3714:	2300      	movs	r3, #0
    3716:	f8cb 3008 	str.w	r3, [fp, #8]
    371a:	f8cb 3004 	str.w	r3, [fp, #4]
    371e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3722:	bf00      	nop

00003724 <_vfiprintf_r>:
    3724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3728:	b0ad      	sub	sp, #180	; 0xb4
    372a:	461d      	mov	r5, r3
    372c:	468b      	mov	fp, r1
    372e:	4690      	mov	r8, r2
    3730:	9307      	str	r3, [sp, #28]
    3732:	9006      	str	r0, [sp, #24]
    3734:	b118      	cbz	r0, 373e <_vfiprintf_r+0x1a>
    3736:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3738:	2b00      	cmp	r3, #0
    373a:	f000 80f3 	beq.w	3924 <_vfiprintf_r+0x200>
    373e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    3742:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    3746:	07df      	lsls	r7, r3, #31
    3748:	b281      	uxth	r1, r0
    374a:	d402      	bmi.n	3752 <_vfiprintf_r+0x2e>
    374c:	058e      	lsls	r6, r1, #22
    374e:	f140 80fc 	bpl.w	394a <_vfiprintf_r+0x226>
    3752:	048c      	lsls	r4, r1, #18
    3754:	d40a      	bmi.n	376c <_vfiprintf_r+0x48>
    3756:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    375a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
    375e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3762:	f8ab 100c 	strh.w	r1, [fp, #12]
    3766:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    376a:	b289      	uxth	r1, r1
    376c:	0708      	lsls	r0, r1, #28
    376e:	f140 80b3 	bpl.w	38d8 <_vfiprintf_r+0x1b4>
    3772:	f8db 3010 	ldr.w	r3, [fp, #16]
    3776:	2b00      	cmp	r3, #0
    3778:	f000 80ae 	beq.w	38d8 <_vfiprintf_r+0x1b4>
    377c:	f001 031a 	and.w	r3, r1, #26
    3780:	2b0a      	cmp	r3, #10
    3782:	f000 80b5 	beq.w	38f0 <_vfiprintf_r+0x1cc>
    3786:	2300      	movs	r3, #0
    3788:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    378c:	930b      	str	r3, [sp, #44]	; 0x2c
    378e:	9311      	str	r3, [sp, #68]	; 0x44
    3790:	9310      	str	r3, [sp, #64]	; 0x40
    3792:	9303      	str	r3, [sp, #12]
    3794:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    3798:	46ca      	mov	sl, r9
    379a:	f8cd b010 	str.w	fp, [sp, #16]
    379e:	f898 3000 	ldrb.w	r3, [r8]
    37a2:	4644      	mov	r4, r8
    37a4:	b1fb      	cbz	r3, 37e6 <_vfiprintf_r+0xc2>
    37a6:	2b25      	cmp	r3, #37	; 0x25
    37a8:	d102      	bne.n	37b0 <_vfiprintf_r+0x8c>
    37aa:	e01c      	b.n	37e6 <_vfiprintf_r+0xc2>
    37ac:	2b25      	cmp	r3, #37	; 0x25
    37ae:	d003      	beq.n	37b8 <_vfiprintf_r+0x94>
    37b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    37b4:	2b00      	cmp	r3, #0
    37b6:	d1f9      	bne.n	37ac <_vfiprintf_r+0x88>
    37b8:	eba4 0508 	sub.w	r5, r4, r8
    37bc:	b19d      	cbz	r5, 37e6 <_vfiprintf_r+0xc2>
    37be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    37c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    37c2:	f8ca 8000 	str.w	r8, [sl]
    37c6:	3301      	adds	r3, #1
    37c8:	442a      	add	r2, r5
    37ca:	2b07      	cmp	r3, #7
    37cc:	f8ca 5004 	str.w	r5, [sl, #4]
    37d0:	9211      	str	r2, [sp, #68]	; 0x44
    37d2:	9310      	str	r3, [sp, #64]	; 0x40
    37d4:	dd7a      	ble.n	38cc <_vfiprintf_r+0x1a8>
    37d6:	2a00      	cmp	r2, #0
    37d8:	f040 84b0 	bne.w	413c <_vfiprintf_r+0xa18>
    37dc:	9b03      	ldr	r3, [sp, #12]
    37de:	9210      	str	r2, [sp, #64]	; 0x40
    37e0:	442b      	add	r3, r5
    37e2:	46ca      	mov	sl, r9
    37e4:	9303      	str	r3, [sp, #12]
    37e6:	7823      	ldrb	r3, [r4, #0]
    37e8:	2b00      	cmp	r3, #0
    37ea:	f000 83e0 	beq.w	3fae <_vfiprintf_r+0x88a>
    37ee:	2000      	movs	r0, #0
    37f0:	f04f 0300 	mov.w	r3, #0
    37f4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    37f8:	f104 0801 	add.w	r8, r4, #1
    37fc:	7862      	ldrb	r2, [r4, #1]
    37fe:	4605      	mov	r5, r0
    3800:	4606      	mov	r6, r0
    3802:	4603      	mov	r3, r0
    3804:	f04f 34ff 	mov.w	r4, #4294967295
    3808:	f108 0801 	add.w	r8, r8, #1
    380c:	f1a2 0120 	sub.w	r1, r2, #32
    3810:	2958      	cmp	r1, #88	; 0x58
    3812:	f200 82de 	bhi.w	3dd2 <_vfiprintf_r+0x6ae>
    3816:	e8df f011 	tbh	[pc, r1, lsl #1]
    381a:	0221      	.short	0x0221
    381c:	02dc02dc 	.word	0x02dc02dc
    3820:	02dc0229 	.word	0x02dc0229
    3824:	02dc02dc 	.word	0x02dc02dc
    3828:	02dc02dc 	.word	0x02dc02dc
    382c:	028902dc 	.word	0x028902dc
    3830:	02dc0295 	.word	0x02dc0295
    3834:	02bd00a2 	.word	0x02bd00a2
    3838:	019f02dc 	.word	0x019f02dc
    383c:	01a401a4 	.word	0x01a401a4
    3840:	01a401a4 	.word	0x01a401a4
    3844:	01a401a4 	.word	0x01a401a4
    3848:	01a401a4 	.word	0x01a401a4
    384c:	02dc01a4 	.word	0x02dc01a4
    3850:	02dc02dc 	.word	0x02dc02dc
    3854:	02dc02dc 	.word	0x02dc02dc
    3858:	02dc02dc 	.word	0x02dc02dc
    385c:	02dc02dc 	.word	0x02dc02dc
    3860:	01b202dc 	.word	0x01b202dc
    3864:	02dc02dc 	.word	0x02dc02dc
    3868:	02dc02dc 	.word	0x02dc02dc
    386c:	02dc02dc 	.word	0x02dc02dc
    3870:	02dc02dc 	.word	0x02dc02dc
    3874:	02dc02dc 	.word	0x02dc02dc
    3878:	02dc0197 	.word	0x02dc0197
    387c:	02dc02dc 	.word	0x02dc02dc
    3880:	02dc02dc 	.word	0x02dc02dc
    3884:	02dc019b 	.word	0x02dc019b
    3888:	025302dc 	.word	0x025302dc
    388c:	02dc02dc 	.word	0x02dc02dc
    3890:	02dc02dc 	.word	0x02dc02dc
    3894:	02dc02dc 	.word	0x02dc02dc
    3898:	02dc02dc 	.word	0x02dc02dc
    389c:	02dc02dc 	.word	0x02dc02dc
    38a0:	021b025a 	.word	0x021b025a
    38a4:	02dc02dc 	.word	0x02dc02dc
    38a8:	026e02dc 	.word	0x026e02dc
    38ac:	02dc021b 	.word	0x02dc021b
    38b0:	027302dc 	.word	0x027302dc
    38b4:	01f502dc 	.word	0x01f502dc
    38b8:	02090182 	.word	0x02090182
    38bc:	02dc02d7 	.word	0x02dc02d7
    38c0:	02dc029a 	.word	0x02dc029a
    38c4:	02dc00a7 	.word	0x02dc00a7
    38c8:	022e02dc 	.word	0x022e02dc
    38cc:	f10a 0a08 	add.w	sl, sl, #8
    38d0:	9b03      	ldr	r3, [sp, #12]
    38d2:	442b      	add	r3, r5
    38d4:	9303      	str	r3, [sp, #12]
    38d6:	e786      	b.n	37e6 <_vfiprintf_r+0xc2>
    38d8:	4659      	mov	r1, fp
    38da:	9806      	ldr	r0, [sp, #24]
    38dc:	f000 fdac 	bl	4438 <__swsetup_r>
    38e0:	bb18      	cbnz	r0, 392a <_vfiprintf_r+0x206>
    38e2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
    38e6:	f001 031a 	and.w	r3, r1, #26
    38ea:	2b0a      	cmp	r3, #10
    38ec:	f47f af4b 	bne.w	3786 <_vfiprintf_r+0x62>
    38f0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
    38f4:	2b00      	cmp	r3, #0
    38f6:	f6ff af46 	blt.w	3786 <_vfiprintf_r+0x62>
    38fa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    38fe:	07db      	lsls	r3, r3, #31
    3900:	d405      	bmi.n	390e <_vfiprintf_r+0x1ea>
    3902:	058f      	lsls	r7, r1, #22
    3904:	d403      	bmi.n	390e <_vfiprintf_r+0x1ea>
    3906:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    390a:	f001 fac3 	bl	4e94 <__retarget_lock_release_recursive>
    390e:	462b      	mov	r3, r5
    3910:	4642      	mov	r2, r8
    3912:	4659      	mov	r1, fp
    3914:	9806      	ldr	r0, [sp, #24]
    3916:	f000 fd4d 	bl	43b4 <__sbprintf>
    391a:	9003      	str	r0, [sp, #12]
    391c:	9803      	ldr	r0, [sp, #12]
    391e:	b02d      	add	sp, #180	; 0xb4
    3920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3924:	f000 fef4 	bl	4710 <__sinit>
    3928:	e709      	b.n	373e <_vfiprintf_r+0x1a>
    392a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    392e:	07d9      	lsls	r1, r3, #31
    3930:	d404      	bmi.n	393c <_vfiprintf_r+0x218>
    3932:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    3936:	059a      	lsls	r2, r3, #22
    3938:	f140 84aa 	bpl.w	4290 <_vfiprintf_r+0xb6c>
    393c:	f04f 33ff 	mov.w	r3, #4294967295
    3940:	9303      	str	r3, [sp, #12]
    3942:	9803      	ldr	r0, [sp, #12]
    3944:	b02d      	add	sp, #180	; 0xb4
    3946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    394a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    394e:	f001 fa9f 	bl	4e90 <__retarget_lock_acquire_recursive>
    3952:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    3956:	b281      	uxth	r1, r0
    3958:	e6fb      	b.n	3752 <_vfiprintf_r+0x2e>
    395a:	4276      	negs	r6, r6
    395c:	9207      	str	r2, [sp, #28]
    395e:	f043 0304 	orr.w	r3, r3, #4
    3962:	f898 2000 	ldrb.w	r2, [r8]
    3966:	e74f      	b.n	3808 <_vfiprintf_r+0xe4>
    3968:	9608      	str	r6, [sp, #32]
    396a:	069e      	lsls	r6, r3, #26
    396c:	f100 8450 	bmi.w	4210 <_vfiprintf_r+0xaec>
    3970:	9907      	ldr	r1, [sp, #28]
    3972:	06dd      	lsls	r5, r3, #27
    3974:	460a      	mov	r2, r1
    3976:	f100 83ef 	bmi.w	4158 <_vfiprintf_r+0xa34>
    397a:	0658      	lsls	r0, r3, #25
    397c:	f140 83ec 	bpl.w	4158 <_vfiprintf_r+0xa34>
    3980:	880e      	ldrh	r6, [r1, #0]
    3982:	3104      	adds	r1, #4
    3984:	2700      	movs	r7, #0
    3986:	2201      	movs	r2, #1
    3988:	9107      	str	r1, [sp, #28]
    398a:	f04f 0100 	mov.w	r1, #0
    398e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    3992:	2500      	movs	r5, #0
    3994:	1c61      	adds	r1, r4, #1
    3996:	f000 8116 	beq.w	3bc6 <_vfiprintf_r+0x4a2>
    399a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    399e:	9102      	str	r1, [sp, #8]
    39a0:	ea56 0107 	orrs.w	r1, r6, r7
    39a4:	f040 8114 	bne.w	3bd0 <_vfiprintf_r+0x4ac>
    39a8:	2c00      	cmp	r4, #0
    39aa:	f040 835c 	bne.w	4066 <_vfiprintf_r+0x942>
    39ae:	2a00      	cmp	r2, #0
    39b0:	f040 83b7 	bne.w	4122 <_vfiprintf_r+0x9fe>
    39b4:	f013 0301 	ands.w	r3, r3, #1
    39b8:	9305      	str	r3, [sp, #20]
    39ba:	f000 8457 	beq.w	426c <_vfiprintf_r+0xb48>
    39be:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    39c2:	2330      	movs	r3, #48	; 0x30
    39c4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
    39c8:	9b05      	ldr	r3, [sp, #20]
    39ca:	42a3      	cmp	r3, r4
    39cc:	bfb8      	it	lt
    39ce:	4623      	movlt	r3, r4
    39d0:	9301      	str	r3, [sp, #4]
    39d2:	b10d      	cbz	r5, 39d8 <_vfiprintf_r+0x2b4>
    39d4:	3301      	adds	r3, #1
    39d6:	9301      	str	r3, [sp, #4]
    39d8:	9b02      	ldr	r3, [sp, #8]
    39da:	f013 0302 	ands.w	r3, r3, #2
    39de:	9309      	str	r3, [sp, #36]	; 0x24
    39e0:	d002      	beq.n	39e8 <_vfiprintf_r+0x2c4>
    39e2:	9b01      	ldr	r3, [sp, #4]
    39e4:	3302      	adds	r3, #2
    39e6:	9301      	str	r3, [sp, #4]
    39e8:	9b02      	ldr	r3, [sp, #8]
    39ea:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    39ee:	930a      	str	r3, [sp, #40]	; 0x28
    39f0:	f040 8217 	bne.w	3e22 <_vfiprintf_r+0x6fe>
    39f4:	9b08      	ldr	r3, [sp, #32]
    39f6:	9a01      	ldr	r2, [sp, #4]
    39f8:	1a9d      	subs	r5, r3, r2
    39fa:	2d00      	cmp	r5, #0
    39fc:	f340 8211 	ble.w	3e22 <_vfiprintf_r+0x6fe>
    3a00:	2d10      	cmp	r5, #16
    3a02:	f340 8490 	ble.w	4326 <_vfiprintf_r+0xc02>
    3a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a0a:	4ec4      	ldr	r6, [pc, #784]	; (3d1c <_vfiprintf_r+0x5f8>)
    3a0c:	46d6      	mov	lr, sl
    3a0e:	2710      	movs	r7, #16
    3a10:	46a2      	mov	sl, r4
    3a12:	4619      	mov	r1, r3
    3a14:	9c06      	ldr	r4, [sp, #24]
    3a16:	e007      	b.n	3a28 <_vfiprintf_r+0x304>
    3a18:	f101 0c02 	add.w	ip, r1, #2
    3a1c:	f10e 0e08 	add.w	lr, lr, #8
    3a20:	4601      	mov	r1, r0
    3a22:	3d10      	subs	r5, #16
    3a24:	2d10      	cmp	r5, #16
    3a26:	dd11      	ble.n	3a4c <_vfiprintf_r+0x328>
    3a28:	1c48      	adds	r0, r1, #1
    3a2a:	3210      	adds	r2, #16
    3a2c:	2807      	cmp	r0, #7
    3a2e:	9211      	str	r2, [sp, #68]	; 0x44
    3a30:	e88e 00c0 	stmia.w	lr, {r6, r7}
    3a34:	9010      	str	r0, [sp, #64]	; 0x40
    3a36:	ddef      	ble.n	3a18 <_vfiprintf_r+0x2f4>
    3a38:	2a00      	cmp	r2, #0
    3a3a:	f040 81e4 	bne.w	3e06 <_vfiprintf_r+0x6e2>
    3a3e:	3d10      	subs	r5, #16
    3a40:	2d10      	cmp	r5, #16
    3a42:	4611      	mov	r1, r2
    3a44:	f04f 0c01 	mov.w	ip, #1
    3a48:	46ce      	mov	lr, r9
    3a4a:	dced      	bgt.n	3a28 <_vfiprintf_r+0x304>
    3a4c:	4654      	mov	r4, sl
    3a4e:	4661      	mov	r1, ip
    3a50:	46f2      	mov	sl, lr
    3a52:	442a      	add	r2, r5
    3a54:	2907      	cmp	r1, #7
    3a56:	9211      	str	r2, [sp, #68]	; 0x44
    3a58:	f8ca 6000 	str.w	r6, [sl]
    3a5c:	f8ca 5004 	str.w	r5, [sl, #4]
    3a60:	9110      	str	r1, [sp, #64]	; 0x40
    3a62:	f300 82ec 	bgt.w	403e <_vfiprintf_r+0x91a>
    3a66:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3a6a:	f10a 0a08 	add.w	sl, sl, #8
    3a6e:	1c48      	adds	r0, r1, #1
    3a70:	2d00      	cmp	r5, #0
    3a72:	f040 81de 	bne.w	3e32 <_vfiprintf_r+0x70e>
    3a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a78:	2b00      	cmp	r3, #0
    3a7a:	f000 81f8 	beq.w	3e6e <_vfiprintf_r+0x74a>
    3a7e:	3202      	adds	r2, #2
    3a80:	a90e      	add	r1, sp, #56	; 0x38
    3a82:	2302      	movs	r3, #2
    3a84:	2807      	cmp	r0, #7
    3a86:	9211      	str	r2, [sp, #68]	; 0x44
    3a88:	9010      	str	r0, [sp, #64]	; 0x40
    3a8a:	e88a 000a 	stmia.w	sl, {r1, r3}
    3a8e:	f340 81ea 	ble.w	3e66 <_vfiprintf_r+0x742>
    3a92:	2a00      	cmp	r2, #0
    3a94:	f040 838c 	bne.w	41b0 <_vfiprintf_r+0xa8c>
    3a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a9a:	2b80      	cmp	r3, #128	; 0x80
    3a9c:	f04f 0001 	mov.w	r0, #1
    3aa0:	4611      	mov	r1, r2
    3aa2:	46ca      	mov	sl, r9
    3aa4:	f040 81e7 	bne.w	3e76 <_vfiprintf_r+0x752>
    3aa8:	9b08      	ldr	r3, [sp, #32]
    3aaa:	9d01      	ldr	r5, [sp, #4]
    3aac:	1b5e      	subs	r6, r3, r5
    3aae:	2e00      	cmp	r6, #0
    3ab0:	f340 81e1 	ble.w	3e76 <_vfiprintf_r+0x752>
    3ab4:	2e10      	cmp	r6, #16
    3ab6:	4d9a      	ldr	r5, [pc, #616]	; (3d20 <_vfiprintf_r+0x5fc>)
    3ab8:	f340 8450 	ble.w	435c <_vfiprintf_r+0xc38>
    3abc:	46d4      	mov	ip, sl
    3abe:	2710      	movs	r7, #16
    3ac0:	46a2      	mov	sl, r4
    3ac2:	9c06      	ldr	r4, [sp, #24]
    3ac4:	e007      	b.n	3ad6 <_vfiprintf_r+0x3b2>
    3ac6:	f101 0e02 	add.w	lr, r1, #2
    3aca:	f10c 0c08 	add.w	ip, ip, #8
    3ace:	4601      	mov	r1, r0
    3ad0:	3e10      	subs	r6, #16
    3ad2:	2e10      	cmp	r6, #16
    3ad4:	dd11      	ble.n	3afa <_vfiprintf_r+0x3d6>
    3ad6:	1c48      	adds	r0, r1, #1
    3ad8:	3210      	adds	r2, #16
    3ada:	2807      	cmp	r0, #7
    3adc:	9211      	str	r2, [sp, #68]	; 0x44
    3ade:	e88c 00a0 	stmia.w	ip, {r5, r7}
    3ae2:	9010      	str	r0, [sp, #64]	; 0x40
    3ae4:	ddef      	ble.n	3ac6 <_vfiprintf_r+0x3a2>
    3ae6:	2a00      	cmp	r2, #0
    3ae8:	f040 829d 	bne.w	4026 <_vfiprintf_r+0x902>
    3aec:	3e10      	subs	r6, #16
    3aee:	2e10      	cmp	r6, #16
    3af0:	f04f 0e01 	mov.w	lr, #1
    3af4:	4611      	mov	r1, r2
    3af6:	46cc      	mov	ip, r9
    3af8:	dced      	bgt.n	3ad6 <_vfiprintf_r+0x3b2>
    3afa:	4654      	mov	r4, sl
    3afc:	46e2      	mov	sl, ip
    3afe:	4432      	add	r2, r6
    3b00:	f1be 0f07 	cmp.w	lr, #7
    3b04:	9211      	str	r2, [sp, #68]	; 0x44
    3b06:	e88a 0060 	stmia.w	sl, {r5, r6}
    3b0a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    3b0e:	f300 8369 	bgt.w	41e4 <_vfiprintf_r+0xac0>
    3b12:	f10a 0a08 	add.w	sl, sl, #8
    3b16:	f10e 0001 	add.w	r0, lr, #1
    3b1a:	4671      	mov	r1, lr
    3b1c:	e1ab      	b.n	3e76 <_vfiprintf_r+0x752>
    3b1e:	9608      	str	r6, [sp, #32]
    3b20:	f013 0220 	ands.w	r2, r3, #32
    3b24:	f040 838c 	bne.w	4240 <_vfiprintf_r+0xb1c>
    3b28:	f013 0110 	ands.w	r1, r3, #16
    3b2c:	f040 831a 	bne.w	4164 <_vfiprintf_r+0xa40>
    3b30:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    3b34:	f000 8316 	beq.w	4164 <_vfiprintf_r+0xa40>
    3b38:	9807      	ldr	r0, [sp, #28]
    3b3a:	460a      	mov	r2, r1
    3b3c:	4601      	mov	r1, r0
    3b3e:	3104      	adds	r1, #4
    3b40:	8806      	ldrh	r6, [r0, #0]
    3b42:	9107      	str	r1, [sp, #28]
    3b44:	2700      	movs	r7, #0
    3b46:	e720      	b.n	398a <_vfiprintf_r+0x266>
    3b48:	9608      	str	r6, [sp, #32]
    3b4a:	f043 0310 	orr.w	r3, r3, #16
    3b4e:	e7e7      	b.n	3b20 <_vfiprintf_r+0x3fc>
    3b50:	9608      	str	r6, [sp, #32]
    3b52:	f043 0310 	orr.w	r3, r3, #16
    3b56:	e708      	b.n	396a <_vfiprintf_r+0x246>
    3b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3b5c:	f898 2000 	ldrb.w	r2, [r8]
    3b60:	e652      	b.n	3808 <_vfiprintf_r+0xe4>
    3b62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3b66:	2600      	movs	r6, #0
    3b68:	f818 2b01 	ldrb.w	r2, [r8], #1
    3b6c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3b70:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    3b74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3b78:	2909      	cmp	r1, #9
    3b7a:	d9f5      	bls.n	3b68 <_vfiprintf_r+0x444>
    3b7c:	e646      	b.n	380c <_vfiprintf_r+0xe8>
    3b7e:	9608      	str	r6, [sp, #32]
    3b80:	2800      	cmp	r0, #0
    3b82:	f040 8408 	bne.w	4396 <_vfiprintf_r+0xc72>
    3b86:	f043 0310 	orr.w	r3, r3, #16
    3b8a:	069e      	lsls	r6, r3, #26
    3b8c:	f100 834c 	bmi.w	4228 <_vfiprintf_r+0xb04>
    3b90:	06dd      	lsls	r5, r3, #27
    3b92:	f100 82f3 	bmi.w	417c <_vfiprintf_r+0xa58>
    3b96:	0658      	lsls	r0, r3, #25
    3b98:	f140 82f0 	bpl.w	417c <_vfiprintf_r+0xa58>
    3b9c:	9d07      	ldr	r5, [sp, #28]
    3b9e:	f9b5 6000 	ldrsh.w	r6, [r5]
    3ba2:	462a      	mov	r2, r5
    3ba4:	17f7      	asrs	r7, r6, #31
    3ba6:	3204      	adds	r2, #4
    3ba8:	4630      	mov	r0, r6
    3baa:	4639      	mov	r1, r7
    3bac:	9207      	str	r2, [sp, #28]
    3bae:	2800      	cmp	r0, #0
    3bb0:	f171 0200 	sbcs.w	r2, r1, #0
    3bb4:	f2c0 835d 	blt.w	4272 <_vfiprintf_r+0xb4e>
    3bb8:	1c61      	adds	r1, r4, #1
    3bba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3bbe:	f04f 0201 	mov.w	r2, #1
    3bc2:	f47f aeea 	bne.w	399a <_vfiprintf_r+0x276>
    3bc6:	ea56 0107 	orrs.w	r1, r6, r7
    3bca:	f000 824d 	beq.w	4068 <_vfiprintf_r+0x944>
    3bce:	9302      	str	r3, [sp, #8]
    3bd0:	2a01      	cmp	r2, #1
    3bd2:	f000 828c 	beq.w	40ee <_vfiprintf_r+0x9ca>
    3bd6:	2a02      	cmp	r2, #2
    3bd8:	f040 825c 	bne.w	4094 <_vfiprintf_r+0x970>
    3bdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3bde:	46cb      	mov	fp, r9
    3be0:	0933      	lsrs	r3, r6, #4
    3be2:	f006 010f 	and.w	r1, r6, #15
    3be6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
    3bea:	093a      	lsrs	r2, r7, #4
    3bec:	461e      	mov	r6, r3
    3bee:	4617      	mov	r7, r2
    3bf0:	5c43      	ldrb	r3, [r0, r1]
    3bf2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
    3bf6:	ea56 0307 	orrs.w	r3, r6, r7
    3bfa:	d1f1      	bne.n	3be0 <_vfiprintf_r+0x4bc>
    3bfc:	eba9 030b 	sub.w	r3, r9, fp
    3c00:	9305      	str	r3, [sp, #20]
    3c02:	e6e1      	b.n	39c8 <_vfiprintf_r+0x2a4>
    3c04:	2800      	cmp	r0, #0
    3c06:	f040 83c0 	bne.w	438a <_vfiprintf_r+0xc66>
    3c0a:	0699      	lsls	r1, r3, #26
    3c0c:	f100 8367 	bmi.w	42de <_vfiprintf_r+0xbba>
    3c10:	06da      	lsls	r2, r3, #27
    3c12:	f100 80f1 	bmi.w	3df8 <_vfiprintf_r+0x6d4>
    3c16:	065b      	lsls	r3, r3, #25
    3c18:	f140 80ee 	bpl.w	3df8 <_vfiprintf_r+0x6d4>
    3c1c:	9a07      	ldr	r2, [sp, #28]
    3c1e:	6813      	ldr	r3, [r2, #0]
    3c20:	3204      	adds	r2, #4
    3c22:	9207      	str	r2, [sp, #28]
    3c24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    3c28:	801a      	strh	r2, [r3, #0]
    3c2a:	e5b8      	b.n	379e <_vfiprintf_r+0x7a>
    3c2c:	9807      	ldr	r0, [sp, #28]
    3c2e:	4a3d      	ldr	r2, [pc, #244]	; (3d24 <_vfiprintf_r+0x600>)
    3c30:	9608      	str	r6, [sp, #32]
    3c32:	920b      	str	r2, [sp, #44]	; 0x2c
    3c34:	6806      	ldr	r6, [r0, #0]
    3c36:	2278      	movs	r2, #120	; 0x78
    3c38:	2130      	movs	r1, #48	; 0x30
    3c3a:	3004      	adds	r0, #4
    3c3c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    3c40:	f043 0302 	orr.w	r3, r3, #2
    3c44:	9007      	str	r0, [sp, #28]
    3c46:	2700      	movs	r7, #0
    3c48:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    3c4c:	2202      	movs	r2, #2
    3c4e:	e69c      	b.n	398a <_vfiprintf_r+0x266>
    3c50:	9608      	str	r6, [sp, #32]
    3c52:	2800      	cmp	r0, #0
    3c54:	d099      	beq.n	3b8a <_vfiprintf_r+0x466>
    3c56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    3c5a:	e796      	b.n	3b8a <_vfiprintf_r+0x466>
    3c5c:	f898 2000 	ldrb.w	r2, [r8]
    3c60:	2d00      	cmp	r5, #0
    3c62:	f47f add1 	bne.w	3808 <_vfiprintf_r+0xe4>
    3c66:	2001      	movs	r0, #1
    3c68:	2520      	movs	r5, #32
    3c6a:	e5cd      	b.n	3808 <_vfiprintf_r+0xe4>
    3c6c:	f043 0301 	orr.w	r3, r3, #1
    3c70:	f898 2000 	ldrb.w	r2, [r8]
    3c74:	e5c8      	b.n	3808 <_vfiprintf_r+0xe4>
    3c76:	9608      	str	r6, [sp, #32]
    3c78:	2800      	cmp	r0, #0
    3c7a:	f040 8393 	bne.w	43a4 <_vfiprintf_r+0xc80>
    3c7e:	4929      	ldr	r1, [pc, #164]	; (3d24 <_vfiprintf_r+0x600>)
    3c80:	910b      	str	r1, [sp, #44]	; 0x2c
    3c82:	069f      	lsls	r7, r3, #26
    3c84:	f100 82e8 	bmi.w	4258 <_vfiprintf_r+0xb34>
    3c88:	9807      	ldr	r0, [sp, #28]
    3c8a:	06de      	lsls	r6, r3, #27
    3c8c:	4601      	mov	r1, r0
    3c8e:	f100 8270 	bmi.w	4172 <_vfiprintf_r+0xa4e>
    3c92:	065d      	lsls	r5, r3, #25
    3c94:	f140 826d 	bpl.w	4172 <_vfiprintf_r+0xa4e>
    3c98:	3104      	adds	r1, #4
    3c9a:	8806      	ldrh	r6, [r0, #0]
    3c9c:	9107      	str	r1, [sp, #28]
    3c9e:	2700      	movs	r7, #0
    3ca0:	07d8      	lsls	r0, r3, #31
    3ca2:	f140 8222 	bpl.w	40ea <_vfiprintf_r+0x9c6>
    3ca6:	ea56 0107 	orrs.w	r1, r6, r7
    3caa:	f000 821e 	beq.w	40ea <_vfiprintf_r+0x9c6>
    3cae:	2130      	movs	r1, #48	; 0x30
    3cb0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    3cb4:	f043 0302 	orr.w	r3, r3, #2
    3cb8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    3cbc:	2202      	movs	r2, #2
    3cbe:	e664      	b.n	398a <_vfiprintf_r+0x266>
    3cc0:	9608      	str	r6, [sp, #32]
    3cc2:	2800      	cmp	r0, #0
    3cc4:	f040 836b 	bne.w	439e <_vfiprintf_r+0xc7a>
    3cc8:	4917      	ldr	r1, [pc, #92]	; (3d28 <_vfiprintf_r+0x604>)
    3cca:	910b      	str	r1, [sp, #44]	; 0x2c
    3ccc:	e7d9      	b.n	3c82 <_vfiprintf_r+0x55e>
    3cce:	9907      	ldr	r1, [sp, #28]
    3cd0:	9608      	str	r6, [sp, #32]
    3cd2:	680a      	ldr	r2, [r1, #0]
    3cd4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    3cd8:	f04f 0000 	mov.w	r0, #0
    3cdc:	460a      	mov	r2, r1
    3cde:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    3ce2:	3204      	adds	r2, #4
    3ce4:	2001      	movs	r0, #1
    3ce6:	9001      	str	r0, [sp, #4]
    3ce8:	9207      	str	r2, [sp, #28]
    3cea:	9005      	str	r0, [sp, #20]
    3cec:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    3cf0:	9302      	str	r3, [sp, #8]
    3cf2:	2400      	movs	r4, #0
    3cf4:	e670      	b.n	39d8 <_vfiprintf_r+0x2b4>
    3cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3cfa:	f898 2000 	ldrb.w	r2, [r8]
    3cfe:	e583      	b.n	3808 <_vfiprintf_r+0xe4>
    3d00:	f898 2000 	ldrb.w	r2, [r8]
    3d04:	2a6c      	cmp	r2, #108	; 0x6c
    3d06:	bf03      	ittte	eq
    3d08:	f898 2001 	ldrbeq.w	r2, [r8, #1]
    3d0c:	f043 0320 	orreq.w	r3, r3, #32
    3d10:	f108 0801 	addeq.w	r8, r8, #1
    3d14:	f043 0310 	orrne.w	r3, r3, #16
    3d18:	e576      	b.n	3808 <_vfiprintf_r+0xe4>
    3d1a:	bf00      	nop
    3d1c:	000062b8 	.word	0x000062b8
    3d20:	000062c8 	.word	0x000062c8
    3d24:	0000629c 	.word	0x0000629c
    3d28:	00006288 	.word	0x00006288
    3d2c:	9907      	ldr	r1, [sp, #28]
    3d2e:	680e      	ldr	r6, [r1, #0]
    3d30:	460a      	mov	r2, r1
    3d32:	2e00      	cmp	r6, #0
    3d34:	f102 0204 	add.w	r2, r2, #4
    3d38:	f6ff ae0f 	blt.w	395a <_vfiprintf_r+0x236>
    3d3c:	9207      	str	r2, [sp, #28]
    3d3e:	f898 2000 	ldrb.w	r2, [r8]
    3d42:	e561      	b.n	3808 <_vfiprintf_r+0xe4>
    3d44:	f898 2000 	ldrb.w	r2, [r8]
    3d48:	2001      	movs	r0, #1
    3d4a:	252b      	movs	r5, #43	; 0x2b
    3d4c:	e55c      	b.n	3808 <_vfiprintf_r+0xe4>
    3d4e:	9907      	ldr	r1, [sp, #28]
    3d50:	9608      	str	r6, [sp, #32]
    3d52:	f8d1 b000 	ldr.w	fp, [r1]
    3d56:	f04f 0200 	mov.w	r2, #0
    3d5a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3d5e:	1d0e      	adds	r6, r1, #4
    3d60:	f1bb 0f00 	cmp.w	fp, #0
    3d64:	f000 82e5 	beq.w	4332 <_vfiprintf_r+0xc0e>
    3d68:	1c67      	adds	r7, r4, #1
    3d6a:	f000 82c4 	beq.w	42f6 <_vfiprintf_r+0xbd2>
    3d6e:	4622      	mov	r2, r4
    3d70:	2100      	movs	r1, #0
    3d72:	4658      	mov	r0, fp
    3d74:	9301      	str	r3, [sp, #4]
    3d76:	f001 fbd3 	bl	5520 <memchr>
    3d7a:	9b01      	ldr	r3, [sp, #4]
    3d7c:	2800      	cmp	r0, #0
    3d7e:	f000 82e5 	beq.w	434c <_vfiprintf_r+0xc28>
    3d82:	eba0 020b 	sub.w	r2, r0, fp
    3d86:	9205      	str	r2, [sp, #20]
    3d88:	9607      	str	r6, [sp, #28]
    3d8a:	9302      	str	r3, [sp, #8]
    3d8c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3d90:	2400      	movs	r4, #0
    3d92:	e619      	b.n	39c8 <_vfiprintf_r+0x2a4>
    3d94:	f898 2000 	ldrb.w	r2, [r8]
    3d98:	2a2a      	cmp	r2, #42	; 0x2a
    3d9a:	f108 0701 	add.w	r7, r8, #1
    3d9e:	f000 82e9 	beq.w	4374 <_vfiprintf_r+0xc50>
    3da2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3da6:	2909      	cmp	r1, #9
    3da8:	46b8      	mov	r8, r7
    3daa:	f04f 0400 	mov.w	r4, #0
    3dae:	f63f ad2d 	bhi.w	380c <_vfiprintf_r+0xe8>
    3db2:	f818 2b01 	ldrb.w	r2, [r8], #1
    3db6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3dba:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    3dbe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3dc2:	2909      	cmp	r1, #9
    3dc4:	d9f5      	bls.n	3db2 <_vfiprintf_r+0x68e>
    3dc6:	e521      	b.n	380c <_vfiprintf_r+0xe8>
    3dc8:	f043 0320 	orr.w	r3, r3, #32
    3dcc:	f898 2000 	ldrb.w	r2, [r8]
    3dd0:	e51a      	b.n	3808 <_vfiprintf_r+0xe4>
    3dd2:	9608      	str	r6, [sp, #32]
    3dd4:	2800      	cmp	r0, #0
    3dd6:	f040 82db 	bne.w	4390 <_vfiprintf_r+0xc6c>
    3dda:	2a00      	cmp	r2, #0
    3ddc:	f000 80e7 	beq.w	3fae <_vfiprintf_r+0x88a>
    3de0:	2101      	movs	r1, #1
    3de2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    3de6:	f04f 0200 	mov.w	r2, #0
    3dea:	9101      	str	r1, [sp, #4]
    3dec:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3df0:	9105      	str	r1, [sp, #20]
    3df2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    3df6:	e77b      	b.n	3cf0 <_vfiprintf_r+0x5cc>
    3df8:	9a07      	ldr	r2, [sp, #28]
    3dfa:	6813      	ldr	r3, [r2, #0]
    3dfc:	3204      	adds	r2, #4
    3dfe:	9207      	str	r2, [sp, #28]
    3e00:	9a03      	ldr	r2, [sp, #12]
    3e02:	601a      	str	r2, [r3, #0]
    3e04:	e4cb      	b.n	379e <_vfiprintf_r+0x7a>
    3e06:	aa0f      	add	r2, sp, #60	; 0x3c
    3e08:	9904      	ldr	r1, [sp, #16]
    3e0a:	4620      	mov	r0, r4
    3e0c:	f7ff fc4a 	bl	36a4 <__sprint_r.part.0>
    3e10:	2800      	cmp	r0, #0
    3e12:	f040 8139 	bne.w	4088 <_vfiprintf_r+0x964>
    3e16:	9910      	ldr	r1, [sp, #64]	; 0x40
    3e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e1a:	f101 0c01 	add.w	ip, r1, #1
    3e1e:	46ce      	mov	lr, r9
    3e20:	e5ff      	b.n	3a22 <_vfiprintf_r+0x2fe>
    3e22:	9910      	ldr	r1, [sp, #64]	; 0x40
    3e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e26:	1c48      	adds	r0, r1, #1
    3e28:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    3e2c:	2d00      	cmp	r5, #0
    3e2e:	f43f ae22 	beq.w	3a76 <_vfiprintf_r+0x352>
    3e32:	3201      	adds	r2, #1
    3e34:	f10d 0537 	add.w	r5, sp, #55	; 0x37
    3e38:	2101      	movs	r1, #1
    3e3a:	2807      	cmp	r0, #7
    3e3c:	9211      	str	r2, [sp, #68]	; 0x44
    3e3e:	9010      	str	r0, [sp, #64]	; 0x40
    3e40:	f8ca 5000 	str.w	r5, [sl]
    3e44:	f8ca 1004 	str.w	r1, [sl, #4]
    3e48:	f340 8108 	ble.w	405c <_vfiprintf_r+0x938>
    3e4c:	2a00      	cmp	r2, #0
    3e4e:	f040 81bc 	bne.w	41ca <_vfiprintf_r+0xaa6>
    3e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e54:	2b00      	cmp	r3, #0
    3e56:	f43f ae1f 	beq.w	3a98 <_vfiprintf_r+0x374>
    3e5a:	ab0e      	add	r3, sp, #56	; 0x38
    3e5c:	2202      	movs	r2, #2
    3e5e:	4608      	mov	r0, r1
    3e60:	931c      	str	r3, [sp, #112]	; 0x70
    3e62:	921d      	str	r2, [sp, #116]	; 0x74
    3e64:	46ca      	mov	sl, r9
    3e66:	4601      	mov	r1, r0
    3e68:	f10a 0a08 	add.w	sl, sl, #8
    3e6c:	3001      	adds	r0, #1
    3e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e70:	2b80      	cmp	r3, #128	; 0x80
    3e72:	f43f ae19 	beq.w	3aa8 <_vfiprintf_r+0x384>
    3e76:	9b05      	ldr	r3, [sp, #20]
    3e78:	1ae4      	subs	r4, r4, r3
    3e7a:	2c00      	cmp	r4, #0
    3e7c:	dd2e      	ble.n	3edc <_vfiprintf_r+0x7b8>
    3e7e:	2c10      	cmp	r4, #16
    3e80:	4db3      	ldr	r5, [pc, #716]	; (4150 <_vfiprintf_r+0xa2c>)
    3e82:	dd1e      	ble.n	3ec2 <_vfiprintf_r+0x79e>
    3e84:	46d6      	mov	lr, sl
    3e86:	2610      	movs	r6, #16
    3e88:	9f06      	ldr	r7, [sp, #24]
    3e8a:	f8dd a010 	ldr.w	sl, [sp, #16]
    3e8e:	e006      	b.n	3e9e <_vfiprintf_r+0x77a>
    3e90:	1c88      	adds	r0, r1, #2
    3e92:	f10e 0e08 	add.w	lr, lr, #8
    3e96:	4619      	mov	r1, r3
    3e98:	3c10      	subs	r4, #16
    3e9a:	2c10      	cmp	r4, #16
    3e9c:	dd10      	ble.n	3ec0 <_vfiprintf_r+0x79c>
    3e9e:	1c4b      	adds	r3, r1, #1
    3ea0:	3210      	adds	r2, #16
    3ea2:	2b07      	cmp	r3, #7
    3ea4:	9211      	str	r2, [sp, #68]	; 0x44
    3ea6:	e88e 0060 	stmia.w	lr, {r5, r6}
    3eaa:	9310      	str	r3, [sp, #64]	; 0x40
    3eac:	ddf0      	ble.n	3e90 <_vfiprintf_r+0x76c>
    3eae:	2a00      	cmp	r2, #0
    3eb0:	d165      	bne.n	3f7e <_vfiprintf_r+0x85a>
    3eb2:	3c10      	subs	r4, #16
    3eb4:	2c10      	cmp	r4, #16
    3eb6:	f04f 0001 	mov.w	r0, #1
    3eba:	4611      	mov	r1, r2
    3ebc:	46ce      	mov	lr, r9
    3ebe:	dcee      	bgt.n	3e9e <_vfiprintf_r+0x77a>
    3ec0:	46f2      	mov	sl, lr
    3ec2:	4422      	add	r2, r4
    3ec4:	2807      	cmp	r0, #7
    3ec6:	9211      	str	r2, [sp, #68]	; 0x44
    3ec8:	f8ca 5000 	str.w	r5, [sl]
    3ecc:	f8ca 4004 	str.w	r4, [sl, #4]
    3ed0:	9010      	str	r0, [sp, #64]	; 0x40
    3ed2:	f300 8085 	bgt.w	3fe0 <_vfiprintf_r+0x8bc>
    3ed6:	f10a 0a08 	add.w	sl, sl, #8
    3eda:	3001      	adds	r0, #1
    3edc:	9905      	ldr	r1, [sp, #20]
    3ede:	f8ca b000 	str.w	fp, [sl]
    3ee2:	440a      	add	r2, r1
    3ee4:	2807      	cmp	r0, #7
    3ee6:	9211      	str	r2, [sp, #68]	; 0x44
    3ee8:	f8ca 1004 	str.w	r1, [sl, #4]
    3eec:	9010      	str	r0, [sp, #64]	; 0x40
    3eee:	f340 8082 	ble.w	3ff6 <_vfiprintf_r+0x8d2>
    3ef2:	2a00      	cmp	r2, #0
    3ef4:	f040 8118 	bne.w	4128 <_vfiprintf_r+0xa04>
    3ef8:	9b02      	ldr	r3, [sp, #8]
    3efa:	9210      	str	r2, [sp, #64]	; 0x40
    3efc:	0758      	lsls	r0, r3, #29
    3efe:	d535      	bpl.n	3f6c <_vfiprintf_r+0x848>
    3f00:	9b08      	ldr	r3, [sp, #32]
    3f02:	9901      	ldr	r1, [sp, #4]
    3f04:	1a5c      	subs	r4, r3, r1
    3f06:	2c00      	cmp	r4, #0
    3f08:	f340 80e7 	ble.w	40da <_vfiprintf_r+0x9b6>
    3f0c:	46ca      	mov	sl, r9
    3f0e:	2c10      	cmp	r4, #16
    3f10:	f340 8218 	ble.w	4344 <_vfiprintf_r+0xc20>
    3f14:	9910      	ldr	r1, [sp, #64]	; 0x40
    3f16:	4e8f      	ldr	r6, [pc, #572]	; (4154 <_vfiprintf_r+0xa30>)
    3f18:	9f06      	ldr	r7, [sp, #24]
    3f1a:	f8dd b010 	ldr.w	fp, [sp, #16]
    3f1e:	2510      	movs	r5, #16
    3f20:	e006      	b.n	3f30 <_vfiprintf_r+0x80c>
    3f22:	1c88      	adds	r0, r1, #2
    3f24:	f10a 0a08 	add.w	sl, sl, #8
    3f28:	4619      	mov	r1, r3
    3f2a:	3c10      	subs	r4, #16
    3f2c:	2c10      	cmp	r4, #16
    3f2e:	dd11      	ble.n	3f54 <_vfiprintf_r+0x830>
    3f30:	1c4b      	adds	r3, r1, #1
    3f32:	3210      	adds	r2, #16
    3f34:	2b07      	cmp	r3, #7
    3f36:	9211      	str	r2, [sp, #68]	; 0x44
    3f38:	f8ca 6000 	str.w	r6, [sl]
    3f3c:	f8ca 5004 	str.w	r5, [sl, #4]
    3f40:	9310      	str	r3, [sp, #64]	; 0x40
    3f42:	ddee      	ble.n	3f22 <_vfiprintf_r+0x7fe>
    3f44:	bb42      	cbnz	r2, 3f98 <_vfiprintf_r+0x874>
    3f46:	3c10      	subs	r4, #16
    3f48:	2c10      	cmp	r4, #16
    3f4a:	f04f 0001 	mov.w	r0, #1
    3f4e:	4611      	mov	r1, r2
    3f50:	46ca      	mov	sl, r9
    3f52:	dced      	bgt.n	3f30 <_vfiprintf_r+0x80c>
    3f54:	4422      	add	r2, r4
    3f56:	2807      	cmp	r0, #7
    3f58:	9211      	str	r2, [sp, #68]	; 0x44
    3f5a:	f8ca 6000 	str.w	r6, [sl]
    3f5e:	f8ca 4004 	str.w	r4, [sl, #4]
    3f62:	9010      	str	r0, [sp, #64]	; 0x40
    3f64:	dd51      	ble.n	400a <_vfiprintf_r+0x8e6>
    3f66:	2a00      	cmp	r2, #0
    3f68:	f040 819b 	bne.w	42a2 <_vfiprintf_r+0xb7e>
    3f6c:	9b03      	ldr	r3, [sp, #12]
    3f6e:	9a08      	ldr	r2, [sp, #32]
    3f70:	9901      	ldr	r1, [sp, #4]
    3f72:	428a      	cmp	r2, r1
    3f74:	bfac      	ite	ge
    3f76:	189b      	addge	r3, r3, r2
    3f78:	185b      	addlt	r3, r3, r1
    3f7a:	9303      	str	r3, [sp, #12]
    3f7c:	e04e      	b.n	401c <_vfiprintf_r+0x8f8>
    3f7e:	aa0f      	add	r2, sp, #60	; 0x3c
    3f80:	4651      	mov	r1, sl
    3f82:	4638      	mov	r0, r7
    3f84:	f7ff fb8e 	bl	36a4 <__sprint_r.part.0>
    3f88:	2800      	cmp	r0, #0
    3f8a:	f040 813f 	bne.w	420c <_vfiprintf_r+0xae8>
    3f8e:	9910      	ldr	r1, [sp, #64]	; 0x40
    3f90:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3f92:	1c48      	adds	r0, r1, #1
    3f94:	46ce      	mov	lr, r9
    3f96:	e77f      	b.n	3e98 <_vfiprintf_r+0x774>
    3f98:	aa0f      	add	r2, sp, #60	; 0x3c
    3f9a:	4659      	mov	r1, fp
    3f9c:	4638      	mov	r0, r7
    3f9e:	f7ff fb81 	bl	36a4 <__sprint_r.part.0>
    3fa2:	b960      	cbnz	r0, 3fbe <_vfiprintf_r+0x89a>
    3fa4:	9910      	ldr	r1, [sp, #64]	; 0x40
    3fa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3fa8:	1c48      	adds	r0, r1, #1
    3faa:	46ca      	mov	sl, r9
    3fac:	e7bd      	b.n	3f2a <_vfiprintf_r+0x806>
    3fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fb0:	f8dd b010 	ldr.w	fp, [sp, #16]
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	f040 81d4 	bne.w	4362 <_vfiprintf_r+0xc3e>
    3fba:	2300      	movs	r3, #0
    3fbc:	9310      	str	r3, [sp, #64]	; 0x40
    3fbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    3fc2:	f013 0f01 	tst.w	r3, #1
    3fc6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    3fca:	d102      	bne.n	3fd2 <_vfiprintf_r+0x8ae>
    3fcc:	059a      	lsls	r2, r3, #22
    3fce:	f140 80de 	bpl.w	418e <_vfiprintf_r+0xa6a>
    3fd2:	065b      	lsls	r3, r3, #25
    3fd4:	f53f acb2 	bmi.w	393c <_vfiprintf_r+0x218>
    3fd8:	9803      	ldr	r0, [sp, #12]
    3fda:	b02d      	add	sp, #180	; 0xb4
    3fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fe0:	2a00      	cmp	r2, #0
    3fe2:	f040 8106 	bne.w	41f2 <_vfiprintf_r+0xace>
    3fe6:	9a05      	ldr	r2, [sp, #20]
    3fe8:	921d      	str	r2, [sp, #116]	; 0x74
    3fea:	2301      	movs	r3, #1
    3fec:	9211      	str	r2, [sp, #68]	; 0x44
    3fee:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
    3ff2:	9310      	str	r3, [sp, #64]	; 0x40
    3ff4:	46ca      	mov	sl, r9
    3ff6:	f10a 0a08 	add.w	sl, sl, #8
    3ffa:	9b02      	ldr	r3, [sp, #8]
    3ffc:	0759      	lsls	r1, r3, #29
    3ffe:	d504      	bpl.n	400a <_vfiprintf_r+0x8e6>
    4000:	9b08      	ldr	r3, [sp, #32]
    4002:	9901      	ldr	r1, [sp, #4]
    4004:	1a5c      	subs	r4, r3, r1
    4006:	2c00      	cmp	r4, #0
    4008:	dc81      	bgt.n	3f0e <_vfiprintf_r+0x7ea>
    400a:	9b03      	ldr	r3, [sp, #12]
    400c:	9908      	ldr	r1, [sp, #32]
    400e:	9801      	ldr	r0, [sp, #4]
    4010:	4281      	cmp	r1, r0
    4012:	bfac      	ite	ge
    4014:	185b      	addge	r3, r3, r1
    4016:	181b      	addlt	r3, r3, r0
    4018:	9303      	str	r3, [sp, #12]
    401a:	bb72      	cbnz	r2, 407a <_vfiprintf_r+0x956>
    401c:	2300      	movs	r3, #0
    401e:	9310      	str	r3, [sp, #64]	; 0x40
    4020:	46ca      	mov	sl, r9
    4022:	f7ff bbbc 	b.w	379e <_vfiprintf_r+0x7a>
    4026:	aa0f      	add	r2, sp, #60	; 0x3c
    4028:	9904      	ldr	r1, [sp, #16]
    402a:	4620      	mov	r0, r4
    402c:	f7ff fb3a 	bl	36a4 <__sprint_r.part.0>
    4030:	bb50      	cbnz	r0, 4088 <_vfiprintf_r+0x964>
    4032:	9910      	ldr	r1, [sp, #64]	; 0x40
    4034:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4036:	f101 0e01 	add.w	lr, r1, #1
    403a:	46cc      	mov	ip, r9
    403c:	e548      	b.n	3ad0 <_vfiprintf_r+0x3ac>
    403e:	2a00      	cmp	r2, #0
    4040:	f040 8140 	bne.w	42c4 <_vfiprintf_r+0xba0>
    4044:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
    4048:	2900      	cmp	r1, #0
    404a:	f000 811b 	beq.w	4284 <_vfiprintf_r+0xb60>
    404e:	2201      	movs	r2, #1
    4050:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    4054:	4610      	mov	r0, r2
    4056:	921d      	str	r2, [sp, #116]	; 0x74
    4058:	911c      	str	r1, [sp, #112]	; 0x70
    405a:	46ca      	mov	sl, r9
    405c:	4601      	mov	r1, r0
    405e:	f10a 0a08 	add.w	sl, sl, #8
    4062:	3001      	adds	r0, #1
    4064:	e507      	b.n	3a76 <_vfiprintf_r+0x352>
    4066:	9b02      	ldr	r3, [sp, #8]
    4068:	2a01      	cmp	r2, #1
    406a:	f000 8098 	beq.w	419e <_vfiprintf_r+0xa7a>
    406e:	2a02      	cmp	r2, #2
    4070:	d10d      	bne.n	408e <_vfiprintf_r+0x96a>
    4072:	9302      	str	r3, [sp, #8]
    4074:	2600      	movs	r6, #0
    4076:	2700      	movs	r7, #0
    4078:	e5b0      	b.n	3bdc <_vfiprintf_r+0x4b8>
    407a:	aa0f      	add	r2, sp, #60	; 0x3c
    407c:	9904      	ldr	r1, [sp, #16]
    407e:	9806      	ldr	r0, [sp, #24]
    4080:	f7ff fb10 	bl	36a4 <__sprint_r.part.0>
    4084:	2800      	cmp	r0, #0
    4086:	d0c9      	beq.n	401c <_vfiprintf_r+0x8f8>
    4088:	f8dd b010 	ldr.w	fp, [sp, #16]
    408c:	e797      	b.n	3fbe <_vfiprintf_r+0x89a>
    408e:	9302      	str	r3, [sp, #8]
    4090:	2600      	movs	r6, #0
    4092:	2700      	movs	r7, #0
    4094:	4649      	mov	r1, r9
    4096:	e000      	b.n	409a <_vfiprintf_r+0x976>
    4098:	4659      	mov	r1, fp
    409a:	08f2      	lsrs	r2, r6, #3
    409c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
    40a0:	08f8      	lsrs	r0, r7, #3
    40a2:	f006 0307 	and.w	r3, r6, #7
    40a6:	4607      	mov	r7, r0
    40a8:	4616      	mov	r6, r2
    40aa:	3330      	adds	r3, #48	; 0x30
    40ac:	ea56 0207 	orrs.w	r2, r6, r7
    40b0:	f801 3c01 	strb.w	r3, [r1, #-1]
    40b4:	f101 3bff 	add.w	fp, r1, #4294967295
    40b8:	d1ee      	bne.n	4098 <_vfiprintf_r+0x974>
    40ba:	9a02      	ldr	r2, [sp, #8]
    40bc:	07d6      	lsls	r6, r2, #31
    40be:	f57f ad9d 	bpl.w	3bfc <_vfiprintf_r+0x4d8>
    40c2:	2b30      	cmp	r3, #48	; 0x30
    40c4:	f43f ad9a 	beq.w	3bfc <_vfiprintf_r+0x4d8>
    40c8:	3902      	subs	r1, #2
    40ca:	2330      	movs	r3, #48	; 0x30
    40cc:	f80b 3c01 	strb.w	r3, [fp, #-1]
    40d0:	eba9 0301 	sub.w	r3, r9, r1
    40d4:	9305      	str	r3, [sp, #20]
    40d6:	468b      	mov	fp, r1
    40d8:	e476      	b.n	39c8 <_vfiprintf_r+0x2a4>
    40da:	9b03      	ldr	r3, [sp, #12]
    40dc:	9a08      	ldr	r2, [sp, #32]
    40de:	428a      	cmp	r2, r1
    40e0:	bfac      	ite	ge
    40e2:	189b      	addge	r3, r3, r2
    40e4:	185b      	addlt	r3, r3, r1
    40e6:	9303      	str	r3, [sp, #12]
    40e8:	e798      	b.n	401c <_vfiprintf_r+0x8f8>
    40ea:	2202      	movs	r2, #2
    40ec:	e44d      	b.n	398a <_vfiprintf_r+0x266>
    40ee:	2f00      	cmp	r7, #0
    40f0:	bf08      	it	eq
    40f2:	2e0a      	cmpeq	r6, #10
    40f4:	d352      	bcc.n	419c <_vfiprintf_r+0xa78>
    40f6:	46cb      	mov	fp, r9
    40f8:	4630      	mov	r0, r6
    40fa:	4639      	mov	r1, r7
    40fc:	220a      	movs	r2, #10
    40fe:	2300      	movs	r3, #0
    4100:	f001 ff1a 	bl	5f38 <__aeabi_uldivmod>
    4104:	3230      	adds	r2, #48	; 0x30
    4106:	f80b 2d01 	strb.w	r2, [fp, #-1]!
    410a:	4630      	mov	r0, r6
    410c:	4639      	mov	r1, r7
    410e:	2300      	movs	r3, #0
    4110:	220a      	movs	r2, #10
    4112:	f001 ff11 	bl	5f38 <__aeabi_uldivmod>
    4116:	4606      	mov	r6, r0
    4118:	460f      	mov	r7, r1
    411a:	ea56 0307 	orrs.w	r3, r6, r7
    411e:	d1eb      	bne.n	40f8 <_vfiprintf_r+0x9d4>
    4120:	e56c      	b.n	3bfc <_vfiprintf_r+0x4d8>
    4122:	9405      	str	r4, [sp, #20]
    4124:	46cb      	mov	fp, r9
    4126:	e44f      	b.n	39c8 <_vfiprintf_r+0x2a4>
    4128:	aa0f      	add	r2, sp, #60	; 0x3c
    412a:	9904      	ldr	r1, [sp, #16]
    412c:	9806      	ldr	r0, [sp, #24]
    412e:	f7ff fab9 	bl	36a4 <__sprint_r.part.0>
    4132:	2800      	cmp	r0, #0
    4134:	d1a8      	bne.n	4088 <_vfiprintf_r+0x964>
    4136:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4138:	46ca      	mov	sl, r9
    413a:	e75e      	b.n	3ffa <_vfiprintf_r+0x8d6>
    413c:	aa0f      	add	r2, sp, #60	; 0x3c
    413e:	9904      	ldr	r1, [sp, #16]
    4140:	9806      	ldr	r0, [sp, #24]
    4142:	f7ff faaf 	bl	36a4 <__sprint_r.part.0>
    4146:	2800      	cmp	r0, #0
    4148:	d19e      	bne.n	4088 <_vfiprintf_r+0x964>
    414a:	46ca      	mov	sl, r9
    414c:	f7ff bbc0 	b.w	38d0 <_vfiprintf_r+0x1ac>
    4150:	000062c8 	.word	0x000062c8
    4154:	000062b8 	.word	0x000062b8
    4158:	3104      	adds	r1, #4
    415a:	6816      	ldr	r6, [r2, #0]
    415c:	9107      	str	r1, [sp, #28]
    415e:	2201      	movs	r2, #1
    4160:	2700      	movs	r7, #0
    4162:	e412      	b.n	398a <_vfiprintf_r+0x266>
    4164:	9807      	ldr	r0, [sp, #28]
    4166:	4601      	mov	r1, r0
    4168:	3104      	adds	r1, #4
    416a:	6806      	ldr	r6, [r0, #0]
    416c:	9107      	str	r1, [sp, #28]
    416e:	2700      	movs	r7, #0
    4170:	e40b      	b.n	398a <_vfiprintf_r+0x266>
    4172:	680e      	ldr	r6, [r1, #0]
    4174:	3104      	adds	r1, #4
    4176:	9107      	str	r1, [sp, #28]
    4178:	2700      	movs	r7, #0
    417a:	e591      	b.n	3ca0 <_vfiprintf_r+0x57c>
    417c:	9907      	ldr	r1, [sp, #28]
    417e:	680e      	ldr	r6, [r1, #0]
    4180:	460a      	mov	r2, r1
    4182:	17f7      	asrs	r7, r6, #31
    4184:	3204      	adds	r2, #4
    4186:	9207      	str	r2, [sp, #28]
    4188:	4630      	mov	r0, r6
    418a:	4639      	mov	r1, r7
    418c:	e50f      	b.n	3bae <_vfiprintf_r+0x48a>
    418e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    4192:	f000 fe7f 	bl	4e94 <__retarget_lock_release_recursive>
    4196:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    419a:	e71a      	b.n	3fd2 <_vfiprintf_r+0x8ae>
    419c:	9b02      	ldr	r3, [sp, #8]
    419e:	9302      	str	r3, [sp, #8]
    41a0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    41a4:	3630      	adds	r6, #48	; 0x30
    41a6:	2301      	movs	r3, #1
    41a8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
    41ac:	9305      	str	r3, [sp, #20]
    41ae:	e40b      	b.n	39c8 <_vfiprintf_r+0x2a4>
    41b0:	aa0f      	add	r2, sp, #60	; 0x3c
    41b2:	9904      	ldr	r1, [sp, #16]
    41b4:	9806      	ldr	r0, [sp, #24]
    41b6:	f7ff fa75 	bl	36a4 <__sprint_r.part.0>
    41ba:	2800      	cmp	r0, #0
    41bc:	f47f af64 	bne.w	4088 <_vfiprintf_r+0x964>
    41c0:	9910      	ldr	r1, [sp, #64]	; 0x40
    41c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    41c4:	1c48      	adds	r0, r1, #1
    41c6:	46ca      	mov	sl, r9
    41c8:	e651      	b.n	3e6e <_vfiprintf_r+0x74a>
    41ca:	aa0f      	add	r2, sp, #60	; 0x3c
    41cc:	9904      	ldr	r1, [sp, #16]
    41ce:	9806      	ldr	r0, [sp, #24]
    41d0:	f7ff fa68 	bl	36a4 <__sprint_r.part.0>
    41d4:	2800      	cmp	r0, #0
    41d6:	f47f af57 	bne.w	4088 <_vfiprintf_r+0x964>
    41da:	9910      	ldr	r1, [sp, #64]	; 0x40
    41dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    41de:	1c48      	adds	r0, r1, #1
    41e0:	46ca      	mov	sl, r9
    41e2:	e448      	b.n	3a76 <_vfiprintf_r+0x352>
    41e4:	2a00      	cmp	r2, #0
    41e6:	f040 8091 	bne.w	430c <_vfiprintf_r+0xbe8>
    41ea:	2001      	movs	r0, #1
    41ec:	4611      	mov	r1, r2
    41ee:	46ca      	mov	sl, r9
    41f0:	e641      	b.n	3e76 <_vfiprintf_r+0x752>
    41f2:	aa0f      	add	r2, sp, #60	; 0x3c
    41f4:	9904      	ldr	r1, [sp, #16]
    41f6:	9806      	ldr	r0, [sp, #24]
    41f8:	f7ff fa54 	bl	36a4 <__sprint_r.part.0>
    41fc:	2800      	cmp	r0, #0
    41fe:	f47f af43 	bne.w	4088 <_vfiprintf_r+0x964>
    4202:	9810      	ldr	r0, [sp, #64]	; 0x40
    4204:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4206:	3001      	adds	r0, #1
    4208:	46ca      	mov	sl, r9
    420a:	e667      	b.n	3edc <_vfiprintf_r+0x7b8>
    420c:	46d3      	mov	fp, sl
    420e:	e6d6      	b.n	3fbe <_vfiprintf_r+0x89a>
    4210:	9e07      	ldr	r6, [sp, #28]
    4212:	3607      	adds	r6, #7
    4214:	f026 0207 	bic.w	r2, r6, #7
    4218:	f102 0108 	add.w	r1, r2, #8
    421c:	e9d2 6700 	ldrd	r6, r7, [r2]
    4220:	9107      	str	r1, [sp, #28]
    4222:	2201      	movs	r2, #1
    4224:	f7ff bbb1 	b.w	398a <_vfiprintf_r+0x266>
    4228:	9e07      	ldr	r6, [sp, #28]
    422a:	3607      	adds	r6, #7
    422c:	f026 0607 	bic.w	r6, r6, #7
    4230:	e9d6 0100 	ldrd	r0, r1, [r6]
    4234:	f106 0208 	add.w	r2, r6, #8
    4238:	9207      	str	r2, [sp, #28]
    423a:	4606      	mov	r6, r0
    423c:	460f      	mov	r7, r1
    423e:	e4b6      	b.n	3bae <_vfiprintf_r+0x48a>
    4240:	9e07      	ldr	r6, [sp, #28]
    4242:	3607      	adds	r6, #7
    4244:	f026 0207 	bic.w	r2, r6, #7
    4248:	f102 0108 	add.w	r1, r2, #8
    424c:	e9d2 6700 	ldrd	r6, r7, [r2]
    4250:	9107      	str	r1, [sp, #28]
    4252:	2200      	movs	r2, #0
    4254:	f7ff bb99 	b.w	398a <_vfiprintf_r+0x266>
    4258:	9e07      	ldr	r6, [sp, #28]
    425a:	3607      	adds	r6, #7
    425c:	f026 0107 	bic.w	r1, r6, #7
    4260:	f101 0008 	add.w	r0, r1, #8
    4264:	9007      	str	r0, [sp, #28]
    4266:	e9d1 6700 	ldrd	r6, r7, [r1]
    426a:	e519      	b.n	3ca0 <_vfiprintf_r+0x57c>
    426c:	46cb      	mov	fp, r9
    426e:	f7ff bbab 	b.w	39c8 <_vfiprintf_r+0x2a4>
    4272:	252d      	movs	r5, #45	; 0x2d
    4274:	4276      	negs	r6, r6
    4276:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    427a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    427e:	2201      	movs	r2, #1
    4280:	f7ff bb88 	b.w	3994 <_vfiprintf_r+0x270>
    4284:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4286:	b9b3      	cbnz	r3, 42b6 <_vfiprintf_r+0xb92>
    4288:	4611      	mov	r1, r2
    428a:	2001      	movs	r0, #1
    428c:	46ca      	mov	sl, r9
    428e:	e5f2      	b.n	3e76 <_vfiprintf_r+0x752>
    4290:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    4294:	f000 fdfe 	bl	4e94 <__retarget_lock_release_recursive>
    4298:	f04f 33ff 	mov.w	r3, #4294967295
    429c:	9303      	str	r3, [sp, #12]
    429e:	f7ff bb50 	b.w	3942 <_vfiprintf_r+0x21e>
    42a2:	aa0f      	add	r2, sp, #60	; 0x3c
    42a4:	9904      	ldr	r1, [sp, #16]
    42a6:	9806      	ldr	r0, [sp, #24]
    42a8:	f7ff f9fc 	bl	36a4 <__sprint_r.part.0>
    42ac:	2800      	cmp	r0, #0
    42ae:	f47f aeeb 	bne.w	4088 <_vfiprintf_r+0x964>
    42b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    42b4:	e6a9      	b.n	400a <_vfiprintf_r+0x8e6>
    42b6:	ab0e      	add	r3, sp, #56	; 0x38
    42b8:	2202      	movs	r2, #2
    42ba:	931c      	str	r3, [sp, #112]	; 0x70
    42bc:	921d      	str	r2, [sp, #116]	; 0x74
    42be:	2001      	movs	r0, #1
    42c0:	46ca      	mov	sl, r9
    42c2:	e5d0      	b.n	3e66 <_vfiprintf_r+0x742>
    42c4:	aa0f      	add	r2, sp, #60	; 0x3c
    42c6:	9904      	ldr	r1, [sp, #16]
    42c8:	9806      	ldr	r0, [sp, #24]
    42ca:	f7ff f9eb 	bl	36a4 <__sprint_r.part.0>
    42ce:	2800      	cmp	r0, #0
    42d0:	f47f aeda 	bne.w	4088 <_vfiprintf_r+0x964>
    42d4:	9910      	ldr	r1, [sp, #64]	; 0x40
    42d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    42d8:	1c48      	adds	r0, r1, #1
    42da:	46ca      	mov	sl, r9
    42dc:	e5a4      	b.n	3e28 <_vfiprintf_r+0x704>
    42de:	9a07      	ldr	r2, [sp, #28]
    42e0:	9903      	ldr	r1, [sp, #12]
    42e2:	6813      	ldr	r3, [r2, #0]
    42e4:	17cd      	asrs	r5, r1, #31
    42e6:	4608      	mov	r0, r1
    42e8:	3204      	adds	r2, #4
    42ea:	4629      	mov	r1, r5
    42ec:	9207      	str	r2, [sp, #28]
    42ee:	e9c3 0100 	strd	r0, r1, [r3]
    42f2:	f7ff ba54 	b.w	379e <_vfiprintf_r+0x7a>
    42f6:	4658      	mov	r0, fp
    42f8:	9607      	str	r6, [sp, #28]
    42fa:	9302      	str	r3, [sp, #8]
    42fc:	f001 fbe0 	bl	5ac0 <strlen>
    4300:	2400      	movs	r4, #0
    4302:	9005      	str	r0, [sp, #20]
    4304:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    4308:	f7ff bb5e 	b.w	39c8 <_vfiprintf_r+0x2a4>
    430c:	aa0f      	add	r2, sp, #60	; 0x3c
    430e:	9904      	ldr	r1, [sp, #16]
    4310:	9806      	ldr	r0, [sp, #24]
    4312:	f7ff f9c7 	bl	36a4 <__sprint_r.part.0>
    4316:	2800      	cmp	r0, #0
    4318:	f47f aeb6 	bne.w	4088 <_vfiprintf_r+0x964>
    431c:	9910      	ldr	r1, [sp, #64]	; 0x40
    431e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4320:	1c48      	adds	r0, r1, #1
    4322:	46ca      	mov	sl, r9
    4324:	e5a7      	b.n	3e76 <_vfiprintf_r+0x752>
    4326:	9910      	ldr	r1, [sp, #64]	; 0x40
    4328:	9a11      	ldr	r2, [sp, #68]	; 0x44
    432a:	4e20      	ldr	r6, [pc, #128]	; (43ac <_vfiprintf_r+0xc88>)
    432c:	3101      	adds	r1, #1
    432e:	f7ff bb90 	b.w	3a52 <_vfiprintf_r+0x32e>
    4332:	2c06      	cmp	r4, #6
    4334:	bf28      	it	cs
    4336:	2406      	movcs	r4, #6
    4338:	9405      	str	r4, [sp, #20]
    433a:	9607      	str	r6, [sp, #28]
    433c:	9401      	str	r4, [sp, #4]
    433e:	f8df b070 	ldr.w	fp, [pc, #112]	; 43b0 <_vfiprintf_r+0xc8c>
    4342:	e4d5      	b.n	3cf0 <_vfiprintf_r+0x5cc>
    4344:	9810      	ldr	r0, [sp, #64]	; 0x40
    4346:	4e19      	ldr	r6, [pc, #100]	; (43ac <_vfiprintf_r+0xc88>)
    4348:	3001      	adds	r0, #1
    434a:	e603      	b.n	3f54 <_vfiprintf_r+0x830>
    434c:	9405      	str	r4, [sp, #20]
    434e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    4352:	9607      	str	r6, [sp, #28]
    4354:	9302      	str	r3, [sp, #8]
    4356:	4604      	mov	r4, r0
    4358:	f7ff bb36 	b.w	39c8 <_vfiprintf_r+0x2a4>
    435c:	4686      	mov	lr, r0
    435e:	f7ff bbce 	b.w	3afe <_vfiprintf_r+0x3da>
    4362:	9806      	ldr	r0, [sp, #24]
    4364:	aa0f      	add	r2, sp, #60	; 0x3c
    4366:	4659      	mov	r1, fp
    4368:	f7ff f99c 	bl	36a4 <__sprint_r.part.0>
    436c:	2800      	cmp	r0, #0
    436e:	f43f ae24 	beq.w	3fba <_vfiprintf_r+0x896>
    4372:	e624      	b.n	3fbe <_vfiprintf_r+0x89a>
    4374:	9907      	ldr	r1, [sp, #28]
    4376:	f898 2001 	ldrb.w	r2, [r8, #1]
    437a:	680c      	ldr	r4, [r1, #0]
    437c:	3104      	adds	r1, #4
    437e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
    4382:	46b8      	mov	r8, r7
    4384:	9107      	str	r1, [sp, #28]
    4386:	f7ff ba3f 	b.w	3808 <_vfiprintf_r+0xe4>
    438a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    438e:	e43c      	b.n	3c0a <_vfiprintf_r+0x4e6>
    4390:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    4394:	e521      	b.n	3dda <_vfiprintf_r+0x6b6>
    4396:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    439a:	f7ff bbf4 	b.w	3b86 <_vfiprintf_r+0x462>
    439e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    43a2:	e491      	b.n	3cc8 <_vfiprintf_r+0x5a4>
    43a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    43a8:	e469      	b.n	3c7e <_vfiprintf_r+0x55a>
    43aa:	bf00      	nop
    43ac:	000062b8 	.word	0x000062b8
    43b0:	000062b0 	.word	0x000062b0

000043b4 <__sbprintf>:
    43b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b8:	460c      	mov	r4, r1
    43ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    43be:	8989      	ldrh	r1, [r1, #12]
    43c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
    43c2:	89e5      	ldrh	r5, [r4, #14]
    43c4:	9619      	str	r6, [sp, #100]	; 0x64
    43c6:	f021 0102 	bic.w	r1, r1, #2
    43ca:	4606      	mov	r6, r0
    43cc:	69e0      	ldr	r0, [r4, #28]
    43ce:	f8ad 100c 	strh.w	r1, [sp, #12]
    43d2:	4617      	mov	r7, r2
    43d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    43d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    43da:	f8ad 500e 	strh.w	r5, [sp, #14]
    43de:	4698      	mov	r8, r3
    43e0:	ad1a      	add	r5, sp, #104	; 0x68
    43e2:	2300      	movs	r3, #0
    43e4:	9007      	str	r0, [sp, #28]
    43e6:	a816      	add	r0, sp, #88	; 0x58
    43e8:	9209      	str	r2, [sp, #36]	; 0x24
    43ea:	9306      	str	r3, [sp, #24]
    43ec:	9500      	str	r5, [sp, #0]
    43ee:	9504      	str	r5, [sp, #16]
    43f0:	9102      	str	r1, [sp, #8]
    43f2:	9105      	str	r1, [sp, #20]
    43f4:	f000 fd48 	bl	4e88 <__retarget_lock_init_recursive>
    43f8:	4643      	mov	r3, r8
    43fa:	463a      	mov	r2, r7
    43fc:	4669      	mov	r1, sp
    43fe:	4630      	mov	r0, r6
    4400:	f7ff f990 	bl	3724 <_vfiprintf_r>
    4404:	1e05      	subs	r5, r0, #0
    4406:	db07      	blt.n	4418 <__sbprintf+0x64>
    4408:	4630      	mov	r0, r6
    440a:	4669      	mov	r1, sp
    440c:	f000 f928 	bl	4660 <_fflush_r>
    4410:	2800      	cmp	r0, #0
    4412:	bf18      	it	ne
    4414:	f04f 35ff 	movne.w	r5, #4294967295
    4418:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    441c:	065b      	lsls	r3, r3, #25
    441e:	d503      	bpl.n	4428 <__sbprintf+0x74>
    4420:	89a3      	ldrh	r3, [r4, #12]
    4422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4426:	81a3      	strh	r3, [r4, #12]
    4428:	9816      	ldr	r0, [sp, #88]	; 0x58
    442a:	f000 fd2f 	bl	4e8c <__retarget_lock_close_recursive>
    442e:	4628      	mov	r0, r5
    4430:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    4434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004438 <__swsetup_r>:
    4438:	b538      	push	{r3, r4, r5, lr}
    443a:	4b30      	ldr	r3, [pc, #192]	; (44fc <__swsetup_r+0xc4>)
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	4605      	mov	r5, r0
    4440:	460c      	mov	r4, r1
    4442:	b113      	cbz	r3, 444a <__swsetup_r+0x12>
    4444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4446:	2a00      	cmp	r2, #0
    4448:	d038      	beq.n	44bc <__swsetup_r+0x84>
    444a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    444e:	b293      	uxth	r3, r2
    4450:	0718      	lsls	r0, r3, #28
    4452:	d50c      	bpl.n	446e <__swsetup_r+0x36>
    4454:	6920      	ldr	r0, [r4, #16]
    4456:	b1a8      	cbz	r0, 4484 <__swsetup_r+0x4c>
    4458:	f013 0201 	ands.w	r2, r3, #1
    445c:	d01e      	beq.n	449c <__swsetup_r+0x64>
    445e:	6963      	ldr	r3, [r4, #20]
    4460:	2200      	movs	r2, #0
    4462:	425b      	negs	r3, r3
    4464:	61a3      	str	r3, [r4, #24]
    4466:	60a2      	str	r2, [r4, #8]
    4468:	b1f0      	cbz	r0, 44a8 <__swsetup_r+0x70>
    446a:	2000      	movs	r0, #0
    446c:	bd38      	pop	{r3, r4, r5, pc}
    446e:	06d9      	lsls	r1, r3, #27
    4470:	d53c      	bpl.n	44ec <__swsetup_r+0xb4>
    4472:	0758      	lsls	r0, r3, #29
    4474:	d426      	bmi.n	44c4 <__swsetup_r+0x8c>
    4476:	6920      	ldr	r0, [r4, #16]
    4478:	f042 0308 	orr.w	r3, r2, #8
    447c:	81a3      	strh	r3, [r4, #12]
    447e:	b29b      	uxth	r3, r3
    4480:	2800      	cmp	r0, #0
    4482:	d1e9      	bne.n	4458 <__swsetup_r+0x20>
    4484:	f403 7220 	and.w	r2, r3, #640	; 0x280
    4488:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    448c:	d0e4      	beq.n	4458 <__swsetup_r+0x20>
    448e:	4628      	mov	r0, r5
    4490:	4621      	mov	r1, r4
    4492:	f000 fd2f 	bl	4ef4 <__smakebuf_r>
    4496:	89a3      	ldrh	r3, [r4, #12]
    4498:	6920      	ldr	r0, [r4, #16]
    449a:	e7dd      	b.n	4458 <__swsetup_r+0x20>
    449c:	0799      	lsls	r1, r3, #30
    449e:	bf58      	it	pl
    44a0:	6962      	ldrpl	r2, [r4, #20]
    44a2:	60a2      	str	r2, [r4, #8]
    44a4:	2800      	cmp	r0, #0
    44a6:	d1e0      	bne.n	446a <__swsetup_r+0x32>
    44a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    44ac:	061a      	lsls	r2, r3, #24
    44ae:	d5dd      	bpl.n	446c <__swsetup_r+0x34>
    44b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    44b4:	81a3      	strh	r3, [r4, #12]
    44b6:	f04f 30ff 	mov.w	r0, #4294967295
    44ba:	bd38      	pop	{r3, r4, r5, pc}
    44bc:	4618      	mov	r0, r3
    44be:	f000 f927 	bl	4710 <__sinit>
    44c2:	e7c2      	b.n	444a <__swsetup_r+0x12>
    44c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    44c6:	b151      	cbz	r1, 44de <__swsetup_r+0xa6>
    44c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    44cc:	4299      	cmp	r1, r3
    44ce:	d004      	beq.n	44da <__swsetup_r+0xa2>
    44d0:	4628      	mov	r0, r5
    44d2:	f000 fa43 	bl	495c <_free_r>
    44d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    44da:	2300      	movs	r3, #0
    44dc:	6323      	str	r3, [r4, #48]	; 0x30
    44de:	2300      	movs	r3, #0
    44e0:	6920      	ldr	r0, [r4, #16]
    44e2:	6063      	str	r3, [r4, #4]
    44e4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    44e8:	6020      	str	r0, [r4, #0]
    44ea:	e7c5      	b.n	4478 <__swsetup_r+0x40>
    44ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    44f0:	2309      	movs	r3, #9
    44f2:	602b      	str	r3, [r5, #0]
    44f4:	f04f 30ff 	mov.w	r0, #4294967295
    44f8:	81a2      	strh	r2, [r4, #12]
    44fa:	bd38      	pop	{r3, r4, r5, pc}
    44fc:	20000108 	.word	0x20000108

00004500 <register_fini>:
    4500:	4b02      	ldr	r3, [pc, #8]	; (450c <register_fini+0xc>)
    4502:	b113      	cbz	r3, 450a <register_fini+0xa>
    4504:	4802      	ldr	r0, [pc, #8]	; (4510 <register_fini+0x10>)
    4506:	f000 b805 	b.w	4514 <atexit>
    450a:	4770      	bx	lr
    450c:	00000000 	.word	0x00000000
    4510:	00004781 	.word	0x00004781

00004514 <atexit>:
    4514:	2300      	movs	r3, #0
    4516:	4601      	mov	r1, r0
    4518:	461a      	mov	r2, r3
    451a:	4618      	mov	r0, r3
    451c:	f001 bbe4 	b.w	5ce8 <__register_exitproc>

00004520 <__sflush_r>:
    4520:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    4524:	b29a      	uxth	r2, r3
    4526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    452a:	460d      	mov	r5, r1
    452c:	0711      	lsls	r1, r2, #28
    452e:	4680      	mov	r8, r0
    4530:	d43a      	bmi.n	45a8 <__sflush_r+0x88>
    4532:	686a      	ldr	r2, [r5, #4]
    4534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    4538:	2a00      	cmp	r2, #0
    453a:	81ab      	strh	r3, [r5, #12]
    453c:	dd6f      	ble.n	461e <__sflush_r+0xfe>
    453e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    4540:	2c00      	cmp	r4, #0
    4542:	d049      	beq.n	45d8 <__sflush_r+0xb8>
    4544:	2200      	movs	r2, #0
    4546:	b29b      	uxth	r3, r3
    4548:	f8d8 6000 	ldr.w	r6, [r8]
    454c:	f8c8 2000 	str.w	r2, [r8]
    4550:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    4554:	d067      	beq.n	4626 <__sflush_r+0x106>
    4556:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    4558:	075f      	lsls	r7, r3, #29
    455a:	d505      	bpl.n	4568 <__sflush_r+0x48>
    455c:	6869      	ldr	r1, [r5, #4]
    455e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4560:	1a52      	subs	r2, r2, r1
    4562:	b10b      	cbz	r3, 4568 <__sflush_r+0x48>
    4564:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4566:	1ad2      	subs	r2, r2, r3
    4568:	2300      	movs	r3, #0
    456a:	69e9      	ldr	r1, [r5, #28]
    456c:	4640      	mov	r0, r8
    456e:	47a0      	blx	r4
    4570:	1c44      	adds	r4, r0, #1
    4572:	d03c      	beq.n	45ee <__sflush_r+0xce>
    4574:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    4578:	692a      	ldr	r2, [r5, #16]
    457a:	602a      	str	r2, [r5, #0]
    457c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4580:	2200      	movs	r2, #0
    4582:	81ab      	strh	r3, [r5, #12]
    4584:	04db      	lsls	r3, r3, #19
    4586:	606a      	str	r2, [r5, #4]
    4588:	d447      	bmi.n	461a <__sflush_r+0xfa>
    458a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    458c:	f8c8 6000 	str.w	r6, [r8]
    4590:	b311      	cbz	r1, 45d8 <__sflush_r+0xb8>
    4592:	f105 0340 	add.w	r3, r5, #64	; 0x40
    4596:	4299      	cmp	r1, r3
    4598:	d002      	beq.n	45a0 <__sflush_r+0x80>
    459a:	4640      	mov	r0, r8
    459c:	f000 f9de 	bl	495c <_free_r>
    45a0:	2000      	movs	r0, #0
    45a2:	6328      	str	r0, [r5, #48]	; 0x30
    45a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45a8:	692e      	ldr	r6, [r5, #16]
    45aa:	b1ae      	cbz	r6, 45d8 <__sflush_r+0xb8>
    45ac:	682c      	ldr	r4, [r5, #0]
    45ae:	602e      	str	r6, [r5, #0]
    45b0:	0791      	lsls	r1, r2, #30
    45b2:	bf0c      	ite	eq
    45b4:	696b      	ldreq	r3, [r5, #20]
    45b6:	2300      	movne	r3, #0
    45b8:	1ba4      	subs	r4, r4, r6
    45ba:	60ab      	str	r3, [r5, #8]
    45bc:	e00a      	b.n	45d4 <__sflush_r+0xb4>
    45be:	4623      	mov	r3, r4
    45c0:	4632      	mov	r2, r6
    45c2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    45c4:	69e9      	ldr	r1, [r5, #28]
    45c6:	4640      	mov	r0, r8
    45c8:	47b8      	blx	r7
    45ca:	2800      	cmp	r0, #0
    45cc:	eba4 0400 	sub.w	r4, r4, r0
    45d0:	4406      	add	r6, r0
    45d2:	dd04      	ble.n	45de <__sflush_r+0xbe>
    45d4:	2c00      	cmp	r4, #0
    45d6:	dcf2      	bgt.n	45be <__sflush_r+0x9e>
    45d8:	2000      	movs	r0, #0
    45da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45de:	89ab      	ldrh	r3, [r5, #12]
    45e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    45e4:	81ab      	strh	r3, [r5, #12]
    45e6:	f04f 30ff 	mov.w	r0, #4294967295
    45ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ee:	f8d8 4000 	ldr.w	r4, [r8]
    45f2:	2c1d      	cmp	r4, #29
    45f4:	d8f3      	bhi.n	45de <__sflush_r+0xbe>
    45f6:	4b19      	ldr	r3, [pc, #100]	; (465c <__sflush_r+0x13c>)
    45f8:	40e3      	lsrs	r3, r4
    45fa:	43db      	mvns	r3, r3
    45fc:	f013 0301 	ands.w	r3, r3, #1
    4600:	d1ed      	bne.n	45de <__sflush_r+0xbe>
    4602:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    4606:	606b      	str	r3, [r5, #4]
    4608:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
    460c:	6929      	ldr	r1, [r5, #16]
    460e:	81ab      	strh	r3, [r5, #12]
    4610:	04da      	lsls	r2, r3, #19
    4612:	6029      	str	r1, [r5, #0]
    4614:	d5b9      	bpl.n	458a <__sflush_r+0x6a>
    4616:	2c00      	cmp	r4, #0
    4618:	d1b7      	bne.n	458a <__sflush_r+0x6a>
    461a:	6528      	str	r0, [r5, #80]	; 0x50
    461c:	e7b5      	b.n	458a <__sflush_r+0x6a>
    461e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    4620:	2a00      	cmp	r2, #0
    4622:	dc8c      	bgt.n	453e <__sflush_r+0x1e>
    4624:	e7d8      	b.n	45d8 <__sflush_r+0xb8>
    4626:	2301      	movs	r3, #1
    4628:	69e9      	ldr	r1, [r5, #28]
    462a:	4640      	mov	r0, r8
    462c:	47a0      	blx	r4
    462e:	1c43      	adds	r3, r0, #1
    4630:	4602      	mov	r2, r0
    4632:	d002      	beq.n	463a <__sflush_r+0x11a>
    4634:	89ab      	ldrh	r3, [r5, #12]
    4636:	6aac      	ldr	r4, [r5, #40]	; 0x28
    4638:	e78e      	b.n	4558 <__sflush_r+0x38>
    463a:	f8d8 3000 	ldr.w	r3, [r8]
    463e:	2b00      	cmp	r3, #0
    4640:	d0f8      	beq.n	4634 <__sflush_r+0x114>
    4642:	2b1d      	cmp	r3, #29
    4644:	d001      	beq.n	464a <__sflush_r+0x12a>
    4646:	2b16      	cmp	r3, #22
    4648:	d102      	bne.n	4650 <__sflush_r+0x130>
    464a:	f8c8 6000 	str.w	r6, [r8]
    464e:	e7c3      	b.n	45d8 <__sflush_r+0xb8>
    4650:	89ab      	ldrh	r3, [r5, #12]
    4652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4656:	81ab      	strh	r3, [r5, #12]
    4658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    465c:	20400001 	.word	0x20400001

00004660 <_fflush_r>:
    4660:	b538      	push	{r3, r4, r5, lr}
    4662:	460d      	mov	r5, r1
    4664:	4604      	mov	r4, r0
    4666:	b108      	cbz	r0, 466c <_fflush_r+0xc>
    4668:	6b83      	ldr	r3, [r0, #56]	; 0x38
    466a:	b1bb      	cbz	r3, 469c <_fflush_r+0x3c>
    466c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    4670:	b188      	cbz	r0, 4696 <_fflush_r+0x36>
    4672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    4674:	07db      	lsls	r3, r3, #31
    4676:	d401      	bmi.n	467c <_fflush_r+0x1c>
    4678:	0581      	lsls	r1, r0, #22
    467a:	d517      	bpl.n	46ac <_fflush_r+0x4c>
    467c:	4620      	mov	r0, r4
    467e:	4629      	mov	r1, r5
    4680:	f7ff ff4e 	bl	4520 <__sflush_r>
    4684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    4686:	07da      	lsls	r2, r3, #31
    4688:	4604      	mov	r4, r0
    468a:	d402      	bmi.n	4692 <_fflush_r+0x32>
    468c:	89ab      	ldrh	r3, [r5, #12]
    468e:	059b      	lsls	r3, r3, #22
    4690:	d507      	bpl.n	46a2 <_fflush_r+0x42>
    4692:	4620      	mov	r0, r4
    4694:	bd38      	pop	{r3, r4, r5, pc}
    4696:	4604      	mov	r4, r0
    4698:	4620      	mov	r0, r4
    469a:	bd38      	pop	{r3, r4, r5, pc}
    469c:	f000 f838 	bl	4710 <__sinit>
    46a0:	e7e4      	b.n	466c <_fflush_r+0xc>
    46a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    46a4:	f000 fbf6 	bl	4e94 <__retarget_lock_release_recursive>
    46a8:	4620      	mov	r0, r4
    46aa:	bd38      	pop	{r3, r4, r5, pc}
    46ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
    46ae:	f000 fbef 	bl	4e90 <__retarget_lock_acquire_recursive>
    46b2:	e7e3      	b.n	467c <_fflush_r+0x1c>

000046b4 <_cleanup_r>:
    46b4:	4901      	ldr	r1, [pc, #4]	; (46bc <_cleanup_r+0x8>)
    46b6:	f000 bbaf 	b.w	4e18 <_fwalk_reent>
    46ba:	bf00      	nop
    46bc:	00005dd1 	.word	0x00005dd1

000046c0 <std.isra.0>:
    46c0:	b510      	push	{r4, lr}
    46c2:	2300      	movs	r3, #0
    46c4:	4604      	mov	r4, r0
    46c6:	8181      	strh	r1, [r0, #12]
    46c8:	81c2      	strh	r2, [r0, #14]
    46ca:	6003      	str	r3, [r0, #0]
    46cc:	6043      	str	r3, [r0, #4]
    46ce:	6083      	str	r3, [r0, #8]
    46d0:	6643      	str	r3, [r0, #100]	; 0x64
    46d2:	6103      	str	r3, [r0, #16]
    46d4:	6143      	str	r3, [r0, #20]
    46d6:	6183      	str	r3, [r0, #24]
    46d8:	4619      	mov	r1, r3
    46da:	2208      	movs	r2, #8
    46dc:	305c      	adds	r0, #92	; 0x5c
    46de:	f7fe ff93 	bl	3608 <memset>
    46e2:	4807      	ldr	r0, [pc, #28]	; (4700 <std.isra.0+0x40>)
    46e4:	4907      	ldr	r1, [pc, #28]	; (4704 <std.isra.0+0x44>)
    46e6:	4a08      	ldr	r2, [pc, #32]	; (4708 <std.isra.0+0x48>)
    46e8:	4b08      	ldr	r3, [pc, #32]	; (470c <std.isra.0+0x4c>)
    46ea:	6220      	str	r0, [r4, #32]
    46ec:	61e4      	str	r4, [r4, #28]
    46ee:	6261      	str	r1, [r4, #36]	; 0x24
    46f0:	62a2      	str	r2, [r4, #40]	; 0x28
    46f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    46f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46fc:	f000 bbc4 	b.w	4e88 <__retarget_lock_init_recursive>
    4700:	00005a11 	.word	0x00005a11
    4704:	00005a35 	.word	0x00005a35
    4708:	00005a71 	.word	0x00005a71
    470c:	00005a91 	.word	0x00005a91

00004710 <__sinit>:
    4710:	b510      	push	{r4, lr}
    4712:	4604      	mov	r4, r0
    4714:	4812      	ldr	r0, [pc, #72]	; (4760 <__sinit+0x50>)
    4716:	f000 fbbb 	bl	4e90 <__retarget_lock_acquire_recursive>
    471a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    471c:	b9d2      	cbnz	r2, 4754 <__sinit+0x44>
    471e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
    4722:	4810      	ldr	r0, [pc, #64]	; (4764 <__sinit+0x54>)
    4724:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    4728:	2103      	movs	r1, #3
    472a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
    472e:	63e0      	str	r0, [r4, #60]	; 0x3c
    4730:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    4734:	6860      	ldr	r0, [r4, #4]
    4736:	2104      	movs	r1, #4
    4738:	f7ff ffc2 	bl	46c0 <std.isra.0>
    473c:	2201      	movs	r2, #1
    473e:	2109      	movs	r1, #9
    4740:	68a0      	ldr	r0, [r4, #8]
    4742:	f7ff ffbd 	bl	46c0 <std.isra.0>
    4746:	2202      	movs	r2, #2
    4748:	2112      	movs	r1, #18
    474a:	68e0      	ldr	r0, [r4, #12]
    474c:	f7ff ffb8 	bl	46c0 <std.isra.0>
    4750:	2301      	movs	r3, #1
    4752:	63a3      	str	r3, [r4, #56]	; 0x38
    4754:	4802      	ldr	r0, [pc, #8]	; (4760 <__sinit+0x50>)
    4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    475a:	f000 bb9b 	b.w	4e94 <__retarget_lock_release_recursive>
    475e:	bf00      	nop
    4760:	20000e34 	.word	0x20000e34
    4764:	000046b5 	.word	0x000046b5

00004768 <__sfp_lock_acquire>:
    4768:	4801      	ldr	r0, [pc, #4]	; (4770 <__sfp_lock_acquire+0x8>)
    476a:	f000 bb91 	b.w	4e90 <__retarget_lock_acquire_recursive>
    476e:	bf00      	nop
    4770:	20000e48 	.word	0x20000e48

00004774 <__sfp_lock_release>:
    4774:	4801      	ldr	r0, [pc, #4]	; (477c <__sfp_lock_release+0x8>)
    4776:	f000 bb8d 	b.w	4e94 <__retarget_lock_release_recursive>
    477a:	bf00      	nop
    477c:	20000e48 	.word	0x20000e48

00004780 <__libc_fini_array>:
    4780:	b538      	push	{r3, r4, r5, lr}
    4782:	4c0a      	ldr	r4, [pc, #40]	; (47ac <__libc_fini_array+0x2c>)
    4784:	4d0a      	ldr	r5, [pc, #40]	; (47b0 <__libc_fini_array+0x30>)
    4786:	1b64      	subs	r4, r4, r5
    4788:	10a4      	asrs	r4, r4, #2
    478a:	d00a      	beq.n	47a2 <__libc_fini_array+0x22>
    478c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4790:	3b01      	subs	r3, #1
    4792:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4796:	3c01      	subs	r4, #1
    4798:	f855 3904 	ldr.w	r3, [r5], #-4
    479c:	4798      	blx	r3
    479e:	2c00      	cmp	r4, #0
    47a0:	d1f9      	bne.n	4796 <__libc_fini_array+0x16>
    47a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47a6:	f001 be2b 	b.w	6400 <_fini>
    47aa:	bf00      	nop
    47ac:	00006410 	.word	0x00006410
    47b0:	0000640c 	.word	0x0000640c

000047b4 <__fputwc>:
    47b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47b8:	b082      	sub	sp, #8
    47ba:	4680      	mov	r8, r0
    47bc:	4689      	mov	r9, r1
    47be:	4614      	mov	r4, r2
    47c0:	f000 fb54 	bl	4e6c <__locale_mb_cur_max>
    47c4:	2801      	cmp	r0, #1
    47c6:	d036      	beq.n	4836 <__fputwc+0x82>
    47c8:	464a      	mov	r2, r9
    47ca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    47ce:	a901      	add	r1, sp, #4
    47d0:	4640      	mov	r0, r8
    47d2:	f001 fa3b 	bl	5c4c <_wcrtomb_r>
    47d6:	1c42      	adds	r2, r0, #1
    47d8:	4606      	mov	r6, r0
    47da:	d025      	beq.n	4828 <__fputwc+0x74>
    47dc:	b3a8      	cbz	r0, 484a <__fputwc+0x96>
    47de:	f89d e004 	ldrb.w	lr, [sp, #4]
    47e2:	2500      	movs	r5, #0
    47e4:	f10d 0a04 	add.w	sl, sp, #4
    47e8:	e009      	b.n	47fe <__fputwc+0x4a>
    47ea:	6823      	ldr	r3, [r4, #0]
    47ec:	1c5a      	adds	r2, r3, #1
    47ee:	6022      	str	r2, [r4, #0]
    47f0:	f883 e000 	strb.w	lr, [r3]
    47f4:	3501      	adds	r5, #1
    47f6:	42b5      	cmp	r5, r6
    47f8:	d227      	bcs.n	484a <__fputwc+0x96>
    47fa:	f815 e00a 	ldrb.w	lr, [r5, sl]
    47fe:	68a3      	ldr	r3, [r4, #8]
    4800:	3b01      	subs	r3, #1
    4802:	2b00      	cmp	r3, #0
    4804:	60a3      	str	r3, [r4, #8]
    4806:	daf0      	bge.n	47ea <__fputwc+0x36>
    4808:	69a7      	ldr	r7, [r4, #24]
    480a:	42bb      	cmp	r3, r7
    480c:	4671      	mov	r1, lr
    480e:	4622      	mov	r2, r4
    4810:	4640      	mov	r0, r8
    4812:	db02      	blt.n	481a <__fputwc+0x66>
    4814:	f1be 0f0a 	cmp.w	lr, #10
    4818:	d1e7      	bne.n	47ea <__fputwc+0x36>
    481a:	f001 f9bf 	bl	5b9c <__swbuf_r>
    481e:	1c43      	adds	r3, r0, #1
    4820:	d1e8      	bne.n	47f4 <__fputwc+0x40>
    4822:	b002      	add	sp, #8
    4824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4828:	89a3      	ldrh	r3, [r4, #12]
    482a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    482e:	81a3      	strh	r3, [r4, #12]
    4830:	b002      	add	sp, #8
    4832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4836:	f109 33ff 	add.w	r3, r9, #4294967295
    483a:	2bfe      	cmp	r3, #254	; 0xfe
    483c:	d8c4      	bhi.n	47c8 <__fputwc+0x14>
    483e:	fa5f fe89 	uxtb.w	lr, r9
    4842:	4606      	mov	r6, r0
    4844:	f88d e004 	strb.w	lr, [sp, #4]
    4848:	e7cb      	b.n	47e2 <__fputwc+0x2e>
    484a:	4648      	mov	r0, r9
    484c:	b002      	add	sp, #8
    484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4852:	bf00      	nop

00004854 <_fputwc_r>:
    4854:	b530      	push	{r4, r5, lr}
    4856:	6e53      	ldr	r3, [r2, #100]	; 0x64
    4858:	f013 0f01 	tst.w	r3, #1
    485c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    4860:	4614      	mov	r4, r2
    4862:	b083      	sub	sp, #12
    4864:	4605      	mov	r5, r0
    4866:	b29a      	uxth	r2, r3
    4868:	d101      	bne.n	486e <_fputwc_r+0x1a>
    486a:	0590      	lsls	r0, r2, #22
    486c:	d51c      	bpl.n	48a8 <_fputwc_r+0x54>
    486e:	0490      	lsls	r0, r2, #18
    4870:	d406      	bmi.n	4880 <_fputwc_r+0x2c>
    4872:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4874:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    487c:	81a3      	strh	r3, [r4, #12]
    487e:	6662      	str	r2, [r4, #100]	; 0x64
    4880:	4628      	mov	r0, r5
    4882:	4622      	mov	r2, r4
    4884:	f7ff ff96 	bl	47b4 <__fputwc>
    4888:	6e63      	ldr	r3, [r4, #100]	; 0x64
    488a:	07da      	lsls	r2, r3, #31
    488c:	4605      	mov	r5, r0
    488e:	d402      	bmi.n	4896 <_fputwc_r+0x42>
    4890:	89a3      	ldrh	r3, [r4, #12]
    4892:	059b      	lsls	r3, r3, #22
    4894:	d502      	bpl.n	489c <_fputwc_r+0x48>
    4896:	4628      	mov	r0, r5
    4898:	b003      	add	sp, #12
    489a:	bd30      	pop	{r4, r5, pc}
    489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    489e:	f000 faf9 	bl	4e94 <__retarget_lock_release_recursive>
    48a2:	4628      	mov	r0, r5
    48a4:	b003      	add	sp, #12
    48a6:	bd30      	pop	{r4, r5, pc}
    48a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    48aa:	9101      	str	r1, [sp, #4]
    48ac:	f000 faf0 	bl	4e90 <__retarget_lock_acquire_recursive>
    48b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    48b4:	9901      	ldr	r1, [sp, #4]
    48b6:	b29a      	uxth	r2, r3
    48b8:	e7d9      	b.n	486e <_fputwc_r+0x1a>
    48ba:	bf00      	nop

000048bc <_malloc_trim_r>:
    48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48be:	4f24      	ldr	r7, [pc, #144]	; (4950 <_malloc_trim_r+0x94>)
    48c0:	460c      	mov	r4, r1
    48c2:	4606      	mov	r6, r0
    48c4:	f000 fee0 	bl	5688 <__malloc_lock>
    48c8:	68bb      	ldr	r3, [r7, #8]
    48ca:	685d      	ldr	r5, [r3, #4]
    48cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    48d0:	310f      	adds	r1, #15
    48d2:	f025 0503 	bic.w	r5, r5, #3
    48d6:	4429      	add	r1, r5
    48d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    48dc:	f021 010f 	bic.w	r1, r1, #15
    48e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    48e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    48e8:	db07      	blt.n	48fa <_malloc_trim_r+0x3e>
    48ea:	2100      	movs	r1, #0
    48ec:	4630      	mov	r0, r6
    48ee:	f001 f87d 	bl	59ec <_sbrk_r>
    48f2:	68bb      	ldr	r3, [r7, #8]
    48f4:	442b      	add	r3, r5
    48f6:	4298      	cmp	r0, r3
    48f8:	d004      	beq.n	4904 <_malloc_trim_r+0x48>
    48fa:	4630      	mov	r0, r6
    48fc:	f000 feca 	bl	5694 <__malloc_unlock>
    4900:	2000      	movs	r0, #0
    4902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4904:	4261      	negs	r1, r4
    4906:	4630      	mov	r0, r6
    4908:	f001 f870 	bl	59ec <_sbrk_r>
    490c:	3001      	adds	r0, #1
    490e:	d00d      	beq.n	492c <_malloc_trim_r+0x70>
    4910:	4b10      	ldr	r3, [pc, #64]	; (4954 <_malloc_trim_r+0x98>)
    4912:	68ba      	ldr	r2, [r7, #8]
    4914:	6819      	ldr	r1, [r3, #0]
    4916:	1b2d      	subs	r5, r5, r4
    4918:	f045 0501 	orr.w	r5, r5, #1
    491c:	4630      	mov	r0, r6
    491e:	1b09      	subs	r1, r1, r4
    4920:	6055      	str	r5, [r2, #4]
    4922:	6019      	str	r1, [r3, #0]
    4924:	f000 feb6 	bl	5694 <__malloc_unlock>
    4928:	2001      	movs	r0, #1
    492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    492c:	2100      	movs	r1, #0
    492e:	4630      	mov	r0, r6
    4930:	f001 f85c 	bl	59ec <_sbrk_r>
    4934:	68ba      	ldr	r2, [r7, #8]
    4936:	1a83      	subs	r3, r0, r2
    4938:	2b0f      	cmp	r3, #15
    493a:	ddde      	ble.n	48fa <_malloc_trim_r+0x3e>
    493c:	4c06      	ldr	r4, [pc, #24]	; (4958 <_malloc_trim_r+0x9c>)
    493e:	4905      	ldr	r1, [pc, #20]	; (4954 <_malloc_trim_r+0x98>)
    4940:	6824      	ldr	r4, [r4, #0]
    4942:	f043 0301 	orr.w	r3, r3, #1
    4946:	1b00      	subs	r0, r0, r4
    4948:	6053      	str	r3, [r2, #4]
    494a:	6008      	str	r0, [r1, #0]
    494c:	e7d5      	b.n	48fa <_malloc_trim_r+0x3e>
    494e:	bf00      	nop
    4950:	200006a8 	.word	0x200006a8
    4954:	20000cbc 	.word	0x20000cbc
    4958:	20000ab0 	.word	0x20000ab0

0000495c <_free_r>:
    495c:	2900      	cmp	r1, #0
    495e:	d044      	beq.n	49ea <_free_r+0x8e>
    4960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4964:	460d      	mov	r5, r1
    4966:	4680      	mov	r8, r0
    4968:	f000 fe8e 	bl	5688 <__malloc_lock>
    496c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    4970:	4969      	ldr	r1, [pc, #420]	; (4b18 <_free_r+0x1bc>)
    4972:	f027 0301 	bic.w	r3, r7, #1
    4976:	f1a5 0408 	sub.w	r4, r5, #8
    497a:	18e2      	adds	r2, r4, r3
    497c:	688e      	ldr	r6, [r1, #8]
    497e:	6850      	ldr	r0, [r2, #4]
    4980:	42b2      	cmp	r2, r6
    4982:	f020 0003 	bic.w	r0, r0, #3
    4986:	d05e      	beq.n	4a46 <_free_r+0xea>
    4988:	07fe      	lsls	r6, r7, #31
    498a:	6050      	str	r0, [r2, #4]
    498c:	d40b      	bmi.n	49a6 <_free_r+0x4a>
    498e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    4992:	1be4      	subs	r4, r4, r7
    4994:	f101 0e08 	add.w	lr, r1, #8
    4998:	68a5      	ldr	r5, [r4, #8]
    499a:	4575      	cmp	r5, lr
    499c:	443b      	add	r3, r7
    499e:	d06d      	beq.n	4a7c <_free_r+0x120>
    49a0:	68e7      	ldr	r7, [r4, #12]
    49a2:	60ef      	str	r7, [r5, #12]
    49a4:	60bd      	str	r5, [r7, #8]
    49a6:	1815      	adds	r5, r2, r0
    49a8:	686d      	ldr	r5, [r5, #4]
    49aa:	07ed      	lsls	r5, r5, #31
    49ac:	d53e      	bpl.n	4a2c <_free_r+0xd0>
    49ae:	f043 0201 	orr.w	r2, r3, #1
    49b2:	6062      	str	r2, [r4, #4]
    49b4:	50e3      	str	r3, [r4, r3]
    49b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    49ba:	d217      	bcs.n	49ec <_free_r+0x90>
    49bc:	08db      	lsrs	r3, r3, #3
    49be:	1c58      	adds	r0, r3, #1
    49c0:	109a      	asrs	r2, r3, #2
    49c2:	684d      	ldr	r5, [r1, #4]
    49c4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
    49c8:	60a7      	str	r7, [r4, #8]
    49ca:	2301      	movs	r3, #1
    49cc:	4093      	lsls	r3, r2
    49ce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    49d2:	432b      	orrs	r3, r5
    49d4:	3a08      	subs	r2, #8
    49d6:	60e2      	str	r2, [r4, #12]
    49d8:	604b      	str	r3, [r1, #4]
    49da:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    49de:	60fc      	str	r4, [r7, #12]
    49e0:	4640      	mov	r0, r8
    49e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49e6:	f000 be55 	b.w	5694 <__malloc_unlock>
    49ea:	4770      	bx	lr
    49ec:	0a5a      	lsrs	r2, r3, #9
    49ee:	2a04      	cmp	r2, #4
    49f0:	d852      	bhi.n	4a98 <_free_r+0x13c>
    49f2:	099a      	lsrs	r2, r3, #6
    49f4:	f102 0739 	add.w	r7, r2, #57	; 0x39
    49f8:	00ff      	lsls	r7, r7, #3
    49fa:	f102 0538 	add.w	r5, r2, #56	; 0x38
    49fe:	19c8      	adds	r0, r1, r7
    4a00:	59ca      	ldr	r2, [r1, r7]
    4a02:	3808      	subs	r0, #8
    4a04:	4290      	cmp	r0, r2
    4a06:	d04f      	beq.n	4aa8 <_free_r+0x14c>
    4a08:	6851      	ldr	r1, [r2, #4]
    4a0a:	f021 0103 	bic.w	r1, r1, #3
    4a0e:	428b      	cmp	r3, r1
    4a10:	d232      	bcs.n	4a78 <_free_r+0x11c>
    4a12:	6892      	ldr	r2, [r2, #8]
    4a14:	4290      	cmp	r0, r2
    4a16:	d1f7      	bne.n	4a08 <_free_r+0xac>
    4a18:	68c3      	ldr	r3, [r0, #12]
    4a1a:	60a0      	str	r0, [r4, #8]
    4a1c:	60e3      	str	r3, [r4, #12]
    4a1e:	609c      	str	r4, [r3, #8]
    4a20:	60c4      	str	r4, [r0, #12]
    4a22:	4640      	mov	r0, r8
    4a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a28:	f000 be34 	b.w	5694 <__malloc_unlock>
    4a2c:	6895      	ldr	r5, [r2, #8]
    4a2e:	4f3b      	ldr	r7, [pc, #236]	; (4b1c <_free_r+0x1c0>)
    4a30:	42bd      	cmp	r5, r7
    4a32:	4403      	add	r3, r0
    4a34:	d040      	beq.n	4ab8 <_free_r+0x15c>
    4a36:	68d0      	ldr	r0, [r2, #12]
    4a38:	60e8      	str	r0, [r5, #12]
    4a3a:	f043 0201 	orr.w	r2, r3, #1
    4a3e:	6085      	str	r5, [r0, #8]
    4a40:	6062      	str	r2, [r4, #4]
    4a42:	50e3      	str	r3, [r4, r3]
    4a44:	e7b7      	b.n	49b6 <_free_r+0x5a>
    4a46:	07ff      	lsls	r7, r7, #31
    4a48:	4403      	add	r3, r0
    4a4a:	d407      	bmi.n	4a5c <_free_r+0x100>
    4a4c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    4a50:	1aa4      	subs	r4, r4, r2
    4a52:	4413      	add	r3, r2
    4a54:	68a0      	ldr	r0, [r4, #8]
    4a56:	68e2      	ldr	r2, [r4, #12]
    4a58:	60c2      	str	r2, [r0, #12]
    4a5a:	6090      	str	r0, [r2, #8]
    4a5c:	4a30      	ldr	r2, [pc, #192]	; (4b20 <_free_r+0x1c4>)
    4a5e:	6812      	ldr	r2, [r2, #0]
    4a60:	f043 0001 	orr.w	r0, r3, #1
    4a64:	4293      	cmp	r3, r2
    4a66:	6060      	str	r0, [r4, #4]
    4a68:	608c      	str	r4, [r1, #8]
    4a6a:	d3b9      	bcc.n	49e0 <_free_r+0x84>
    4a6c:	4b2d      	ldr	r3, [pc, #180]	; (4b24 <_free_r+0x1c8>)
    4a6e:	4640      	mov	r0, r8
    4a70:	6819      	ldr	r1, [r3, #0]
    4a72:	f7ff ff23 	bl	48bc <_malloc_trim_r>
    4a76:	e7b3      	b.n	49e0 <_free_r+0x84>
    4a78:	4610      	mov	r0, r2
    4a7a:	e7cd      	b.n	4a18 <_free_r+0xbc>
    4a7c:	1811      	adds	r1, r2, r0
    4a7e:	6849      	ldr	r1, [r1, #4]
    4a80:	07c9      	lsls	r1, r1, #31
    4a82:	d444      	bmi.n	4b0e <_free_r+0x1b2>
    4a84:	6891      	ldr	r1, [r2, #8]
    4a86:	68d2      	ldr	r2, [r2, #12]
    4a88:	60ca      	str	r2, [r1, #12]
    4a8a:	4403      	add	r3, r0
    4a8c:	f043 0001 	orr.w	r0, r3, #1
    4a90:	6091      	str	r1, [r2, #8]
    4a92:	6060      	str	r0, [r4, #4]
    4a94:	50e3      	str	r3, [r4, r3]
    4a96:	e7a3      	b.n	49e0 <_free_r+0x84>
    4a98:	2a14      	cmp	r2, #20
    4a9a:	d816      	bhi.n	4aca <_free_r+0x16e>
    4a9c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    4aa0:	00ff      	lsls	r7, r7, #3
    4aa2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    4aa6:	e7aa      	b.n	49fe <_free_r+0xa2>
    4aa8:	10aa      	asrs	r2, r5, #2
    4aaa:	2301      	movs	r3, #1
    4aac:	684d      	ldr	r5, [r1, #4]
    4aae:	4093      	lsls	r3, r2
    4ab0:	432b      	orrs	r3, r5
    4ab2:	604b      	str	r3, [r1, #4]
    4ab4:	4603      	mov	r3, r0
    4ab6:	e7b0      	b.n	4a1a <_free_r+0xbe>
    4ab8:	f043 0201 	orr.w	r2, r3, #1
    4abc:	614c      	str	r4, [r1, #20]
    4abe:	610c      	str	r4, [r1, #16]
    4ac0:	60e5      	str	r5, [r4, #12]
    4ac2:	60a5      	str	r5, [r4, #8]
    4ac4:	6062      	str	r2, [r4, #4]
    4ac6:	50e3      	str	r3, [r4, r3]
    4ac8:	e78a      	b.n	49e0 <_free_r+0x84>
    4aca:	2a54      	cmp	r2, #84	; 0x54
    4acc:	d806      	bhi.n	4adc <_free_r+0x180>
    4ace:	0b1a      	lsrs	r2, r3, #12
    4ad0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    4ad4:	00ff      	lsls	r7, r7, #3
    4ad6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    4ada:	e790      	b.n	49fe <_free_r+0xa2>
    4adc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4ae0:	d806      	bhi.n	4af0 <_free_r+0x194>
    4ae2:	0bda      	lsrs	r2, r3, #15
    4ae4:	f102 0778 	add.w	r7, r2, #120	; 0x78
    4ae8:	00ff      	lsls	r7, r7, #3
    4aea:	f102 0577 	add.w	r5, r2, #119	; 0x77
    4aee:	e786      	b.n	49fe <_free_r+0xa2>
    4af0:	f240 5054 	movw	r0, #1364	; 0x554
    4af4:	4282      	cmp	r2, r0
    4af6:	d806      	bhi.n	4b06 <_free_r+0x1aa>
    4af8:	0c9a      	lsrs	r2, r3, #18
    4afa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    4afe:	00ff      	lsls	r7, r7, #3
    4b00:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    4b04:	e77b      	b.n	49fe <_free_r+0xa2>
    4b06:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
    4b0a:	257e      	movs	r5, #126	; 0x7e
    4b0c:	e777      	b.n	49fe <_free_r+0xa2>
    4b0e:	f043 0101 	orr.w	r1, r3, #1
    4b12:	6061      	str	r1, [r4, #4]
    4b14:	6013      	str	r3, [r2, #0]
    4b16:	e763      	b.n	49e0 <_free_r+0x84>
    4b18:	200006a8 	.word	0x200006a8
    4b1c:	200006b0 	.word	0x200006b0
    4b20:	20000ab4 	.word	0x20000ab4
    4b24:	20000cec 	.word	0x20000cec

00004b28 <__sfvwrite_r>:
    4b28:	6893      	ldr	r3, [r2, #8]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d073      	beq.n	4c16 <__sfvwrite_r+0xee>
    4b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b32:	898b      	ldrh	r3, [r1, #12]
    4b34:	b083      	sub	sp, #12
    4b36:	460c      	mov	r4, r1
    4b38:	0719      	lsls	r1, r3, #28
    4b3a:	9000      	str	r0, [sp, #0]
    4b3c:	4616      	mov	r6, r2
    4b3e:	d526      	bpl.n	4b8e <__sfvwrite_r+0x66>
    4b40:	6922      	ldr	r2, [r4, #16]
    4b42:	b322      	cbz	r2, 4b8e <__sfvwrite_r+0x66>
    4b44:	f013 0002 	ands.w	r0, r3, #2
    4b48:	6835      	ldr	r5, [r6, #0]
    4b4a:	d02c      	beq.n	4ba6 <__sfvwrite_r+0x7e>
    4b4c:	f04f 0900 	mov.w	r9, #0
    4b50:	4fb0      	ldr	r7, [pc, #704]	; (4e14 <__sfvwrite_r+0x2ec>)
    4b52:	46c8      	mov	r8, r9
    4b54:	46b2      	mov	sl, r6
    4b56:	45b8      	cmp	r8, r7
    4b58:	4643      	mov	r3, r8
    4b5a:	464a      	mov	r2, r9
    4b5c:	bf28      	it	cs
    4b5e:	463b      	movcs	r3, r7
    4b60:	9800      	ldr	r0, [sp, #0]
    4b62:	f1b8 0f00 	cmp.w	r8, #0
    4b66:	d050      	beq.n	4c0a <__sfvwrite_r+0xe2>
    4b68:	69e1      	ldr	r1, [r4, #28]
    4b6a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4b6c:	47b0      	blx	r6
    4b6e:	2800      	cmp	r0, #0
    4b70:	dd58      	ble.n	4c24 <__sfvwrite_r+0xfc>
    4b72:	f8da 3008 	ldr.w	r3, [sl, #8]
    4b76:	1a1b      	subs	r3, r3, r0
    4b78:	4481      	add	r9, r0
    4b7a:	eba8 0800 	sub.w	r8, r8, r0
    4b7e:	f8ca 3008 	str.w	r3, [sl, #8]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d1e7      	bne.n	4b56 <__sfvwrite_r+0x2e>
    4b86:	2000      	movs	r0, #0
    4b88:	b003      	add	sp, #12
    4b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b8e:	4621      	mov	r1, r4
    4b90:	9800      	ldr	r0, [sp, #0]
    4b92:	f7ff fc51 	bl	4438 <__swsetup_r>
    4b96:	2800      	cmp	r0, #0
    4b98:	f040 8133 	bne.w	4e02 <__sfvwrite_r+0x2da>
    4b9c:	89a3      	ldrh	r3, [r4, #12]
    4b9e:	6835      	ldr	r5, [r6, #0]
    4ba0:	f013 0002 	ands.w	r0, r3, #2
    4ba4:	d1d2      	bne.n	4b4c <__sfvwrite_r+0x24>
    4ba6:	f013 0901 	ands.w	r9, r3, #1
    4baa:	d145      	bne.n	4c38 <__sfvwrite_r+0x110>
    4bac:	464f      	mov	r7, r9
    4bae:	9601      	str	r6, [sp, #4]
    4bb0:	b337      	cbz	r7, 4c00 <__sfvwrite_r+0xd8>
    4bb2:	059a      	lsls	r2, r3, #22
    4bb4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    4bb8:	f140 8083 	bpl.w	4cc2 <__sfvwrite_r+0x19a>
    4bbc:	4547      	cmp	r7, r8
    4bbe:	46c3      	mov	fp, r8
    4bc0:	f0c0 80ab 	bcc.w	4d1a <__sfvwrite_r+0x1f2>
    4bc4:	f413 6f90 	tst.w	r3, #1152	; 0x480
    4bc8:	f040 80ac 	bne.w	4d24 <__sfvwrite_r+0x1fc>
    4bcc:	6820      	ldr	r0, [r4, #0]
    4bce:	46ba      	mov	sl, r7
    4bd0:	465a      	mov	r2, fp
    4bd2:	4649      	mov	r1, r9
    4bd4:	f000 fcf4 	bl	55c0 <memmove>
    4bd8:	68a2      	ldr	r2, [r4, #8]
    4bda:	6823      	ldr	r3, [r4, #0]
    4bdc:	eba2 0208 	sub.w	r2, r2, r8
    4be0:	445b      	add	r3, fp
    4be2:	60a2      	str	r2, [r4, #8]
    4be4:	6023      	str	r3, [r4, #0]
    4be6:	9a01      	ldr	r2, [sp, #4]
    4be8:	6893      	ldr	r3, [r2, #8]
    4bea:	eba3 030a 	sub.w	r3, r3, sl
    4bee:	44d1      	add	r9, sl
    4bf0:	eba7 070a 	sub.w	r7, r7, sl
    4bf4:	6093      	str	r3, [r2, #8]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d0c5      	beq.n	4b86 <__sfvwrite_r+0x5e>
    4bfa:	89a3      	ldrh	r3, [r4, #12]
    4bfc:	2f00      	cmp	r7, #0
    4bfe:	d1d8      	bne.n	4bb2 <__sfvwrite_r+0x8a>
    4c00:	f8d5 9000 	ldr.w	r9, [r5]
    4c04:	686f      	ldr	r7, [r5, #4]
    4c06:	3508      	adds	r5, #8
    4c08:	e7d2      	b.n	4bb0 <__sfvwrite_r+0x88>
    4c0a:	f8d5 9000 	ldr.w	r9, [r5]
    4c0e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    4c12:	3508      	adds	r5, #8
    4c14:	e79f      	b.n	4b56 <__sfvwrite_r+0x2e>
    4c16:	2000      	movs	r0, #0
    4c18:	4770      	bx	lr
    4c1a:	4621      	mov	r1, r4
    4c1c:	9800      	ldr	r0, [sp, #0]
    4c1e:	f7ff fd1f 	bl	4660 <_fflush_r>
    4c22:	b370      	cbz	r0, 4c82 <__sfvwrite_r+0x15a>
    4c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4c2c:	f04f 30ff 	mov.w	r0, #4294967295
    4c30:	81a3      	strh	r3, [r4, #12]
    4c32:	b003      	add	sp, #12
    4c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c38:	4681      	mov	r9, r0
    4c3a:	4633      	mov	r3, r6
    4c3c:	464e      	mov	r6, r9
    4c3e:	46a8      	mov	r8, r5
    4c40:	469a      	mov	sl, r3
    4c42:	464d      	mov	r5, r9
    4c44:	b34e      	cbz	r6, 4c9a <__sfvwrite_r+0x172>
    4c46:	b380      	cbz	r0, 4caa <__sfvwrite_r+0x182>
    4c48:	6820      	ldr	r0, [r4, #0]
    4c4a:	6923      	ldr	r3, [r4, #16]
    4c4c:	6962      	ldr	r2, [r4, #20]
    4c4e:	45b1      	cmp	r9, r6
    4c50:	46cb      	mov	fp, r9
    4c52:	bf28      	it	cs
    4c54:	46b3      	movcs	fp, r6
    4c56:	4298      	cmp	r0, r3
    4c58:	465f      	mov	r7, fp
    4c5a:	d904      	bls.n	4c66 <__sfvwrite_r+0x13e>
    4c5c:	68a3      	ldr	r3, [r4, #8]
    4c5e:	4413      	add	r3, r2
    4c60:	459b      	cmp	fp, r3
    4c62:	f300 80a6 	bgt.w	4db2 <__sfvwrite_r+0x28a>
    4c66:	4593      	cmp	fp, r2
    4c68:	db4b      	blt.n	4d02 <__sfvwrite_r+0x1da>
    4c6a:	4613      	mov	r3, r2
    4c6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    4c6e:	69e1      	ldr	r1, [r4, #28]
    4c70:	9800      	ldr	r0, [sp, #0]
    4c72:	462a      	mov	r2, r5
    4c74:	47b8      	blx	r7
    4c76:	1e07      	subs	r7, r0, #0
    4c78:	ddd4      	ble.n	4c24 <__sfvwrite_r+0xfc>
    4c7a:	ebb9 0907 	subs.w	r9, r9, r7
    4c7e:	d0cc      	beq.n	4c1a <__sfvwrite_r+0xf2>
    4c80:	2001      	movs	r0, #1
    4c82:	f8da 3008 	ldr.w	r3, [sl, #8]
    4c86:	1bdb      	subs	r3, r3, r7
    4c88:	443d      	add	r5, r7
    4c8a:	1bf6      	subs	r6, r6, r7
    4c8c:	f8ca 3008 	str.w	r3, [sl, #8]
    4c90:	2b00      	cmp	r3, #0
    4c92:	f43f af78 	beq.w	4b86 <__sfvwrite_r+0x5e>
    4c96:	2e00      	cmp	r6, #0
    4c98:	d1d5      	bne.n	4c46 <__sfvwrite_r+0x11e>
    4c9a:	f108 0308 	add.w	r3, r8, #8
    4c9e:	e913 0060 	ldmdb	r3, {r5, r6}
    4ca2:	4698      	mov	r8, r3
    4ca4:	3308      	adds	r3, #8
    4ca6:	2e00      	cmp	r6, #0
    4ca8:	d0f9      	beq.n	4c9e <__sfvwrite_r+0x176>
    4caa:	4632      	mov	r2, r6
    4cac:	210a      	movs	r1, #10
    4cae:	4628      	mov	r0, r5
    4cb0:	f000 fc36 	bl	5520 <memchr>
    4cb4:	2800      	cmp	r0, #0
    4cb6:	f000 80a1 	beq.w	4dfc <__sfvwrite_r+0x2d4>
    4cba:	3001      	adds	r0, #1
    4cbc:	eba0 0905 	sub.w	r9, r0, r5
    4cc0:	e7c2      	b.n	4c48 <__sfvwrite_r+0x120>
    4cc2:	6820      	ldr	r0, [r4, #0]
    4cc4:	6923      	ldr	r3, [r4, #16]
    4cc6:	4298      	cmp	r0, r3
    4cc8:	d802      	bhi.n	4cd0 <__sfvwrite_r+0x1a8>
    4cca:	6963      	ldr	r3, [r4, #20]
    4ccc:	429f      	cmp	r7, r3
    4cce:	d25d      	bcs.n	4d8c <__sfvwrite_r+0x264>
    4cd0:	45b8      	cmp	r8, r7
    4cd2:	bf28      	it	cs
    4cd4:	46b8      	movcs	r8, r7
    4cd6:	4642      	mov	r2, r8
    4cd8:	4649      	mov	r1, r9
    4cda:	f000 fc71 	bl	55c0 <memmove>
    4cde:	68a3      	ldr	r3, [r4, #8]
    4ce0:	6822      	ldr	r2, [r4, #0]
    4ce2:	eba3 0308 	sub.w	r3, r3, r8
    4ce6:	4442      	add	r2, r8
    4ce8:	60a3      	str	r3, [r4, #8]
    4cea:	6022      	str	r2, [r4, #0]
    4cec:	b10b      	cbz	r3, 4cf2 <__sfvwrite_r+0x1ca>
    4cee:	46c2      	mov	sl, r8
    4cf0:	e779      	b.n	4be6 <__sfvwrite_r+0xbe>
    4cf2:	4621      	mov	r1, r4
    4cf4:	9800      	ldr	r0, [sp, #0]
    4cf6:	f7ff fcb3 	bl	4660 <_fflush_r>
    4cfa:	2800      	cmp	r0, #0
    4cfc:	d192      	bne.n	4c24 <__sfvwrite_r+0xfc>
    4cfe:	46c2      	mov	sl, r8
    4d00:	e771      	b.n	4be6 <__sfvwrite_r+0xbe>
    4d02:	465a      	mov	r2, fp
    4d04:	4629      	mov	r1, r5
    4d06:	f000 fc5b 	bl	55c0 <memmove>
    4d0a:	68a2      	ldr	r2, [r4, #8]
    4d0c:	6823      	ldr	r3, [r4, #0]
    4d0e:	eba2 020b 	sub.w	r2, r2, fp
    4d12:	445b      	add	r3, fp
    4d14:	60a2      	str	r2, [r4, #8]
    4d16:	6023      	str	r3, [r4, #0]
    4d18:	e7af      	b.n	4c7a <__sfvwrite_r+0x152>
    4d1a:	6820      	ldr	r0, [r4, #0]
    4d1c:	46b8      	mov	r8, r7
    4d1e:	46ba      	mov	sl, r7
    4d20:	46bb      	mov	fp, r7
    4d22:	e755      	b.n	4bd0 <__sfvwrite_r+0xa8>
    4d24:	6962      	ldr	r2, [r4, #20]
    4d26:	6820      	ldr	r0, [r4, #0]
    4d28:	6921      	ldr	r1, [r4, #16]
    4d2a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    4d2e:	eba0 0a01 	sub.w	sl, r0, r1
    4d32:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    4d36:	f10a 0001 	add.w	r0, sl, #1
    4d3a:	ea4f 0868 	mov.w	r8, r8, asr #1
    4d3e:	4438      	add	r0, r7
    4d40:	4540      	cmp	r0, r8
    4d42:	4642      	mov	r2, r8
    4d44:	bf84      	itt	hi
    4d46:	4680      	movhi	r8, r0
    4d48:	4642      	movhi	r2, r8
    4d4a:	055b      	lsls	r3, r3, #21
    4d4c:	d544      	bpl.n	4dd8 <__sfvwrite_r+0x2b0>
    4d4e:	4611      	mov	r1, r2
    4d50:	9800      	ldr	r0, [sp, #0]
    4d52:	f000 f919 	bl	4f88 <_malloc_r>
    4d56:	4683      	mov	fp, r0
    4d58:	2800      	cmp	r0, #0
    4d5a:	d055      	beq.n	4e08 <__sfvwrite_r+0x2e0>
    4d5c:	4652      	mov	r2, sl
    4d5e:	6921      	ldr	r1, [r4, #16]
    4d60:	f7fe fbb8 	bl	34d4 <memcpy>
    4d64:	89a3      	ldrh	r3, [r4, #12]
    4d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    4d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4d6e:	81a3      	strh	r3, [r4, #12]
    4d70:	eb0b 000a 	add.w	r0, fp, sl
    4d74:	eba8 030a 	sub.w	r3, r8, sl
    4d78:	f8c4 b010 	str.w	fp, [r4, #16]
    4d7c:	f8c4 8014 	str.w	r8, [r4, #20]
    4d80:	6020      	str	r0, [r4, #0]
    4d82:	60a3      	str	r3, [r4, #8]
    4d84:	46b8      	mov	r8, r7
    4d86:	46ba      	mov	sl, r7
    4d88:	46bb      	mov	fp, r7
    4d8a:	e721      	b.n	4bd0 <__sfvwrite_r+0xa8>
    4d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4d90:	42b9      	cmp	r1, r7
    4d92:	bf28      	it	cs
    4d94:	4639      	movcs	r1, r7
    4d96:	464a      	mov	r2, r9
    4d98:	fb91 f1f3 	sdiv	r1, r1, r3
    4d9c:	9800      	ldr	r0, [sp, #0]
    4d9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4da0:	fb03 f301 	mul.w	r3, r3, r1
    4da4:	69e1      	ldr	r1, [r4, #28]
    4da6:	47b0      	blx	r6
    4da8:	f1b0 0a00 	subs.w	sl, r0, #0
    4dac:	f73f af1b 	bgt.w	4be6 <__sfvwrite_r+0xbe>
    4db0:	e738      	b.n	4c24 <__sfvwrite_r+0xfc>
    4db2:	461a      	mov	r2, r3
    4db4:	4629      	mov	r1, r5
    4db6:	9301      	str	r3, [sp, #4]
    4db8:	f000 fc02 	bl	55c0 <memmove>
    4dbc:	6822      	ldr	r2, [r4, #0]
    4dbe:	9b01      	ldr	r3, [sp, #4]
    4dc0:	9800      	ldr	r0, [sp, #0]
    4dc2:	441a      	add	r2, r3
    4dc4:	6022      	str	r2, [r4, #0]
    4dc6:	4621      	mov	r1, r4
    4dc8:	f7ff fc4a 	bl	4660 <_fflush_r>
    4dcc:	9b01      	ldr	r3, [sp, #4]
    4dce:	2800      	cmp	r0, #0
    4dd0:	f47f af28 	bne.w	4c24 <__sfvwrite_r+0xfc>
    4dd4:	461f      	mov	r7, r3
    4dd6:	e750      	b.n	4c7a <__sfvwrite_r+0x152>
    4dd8:	9800      	ldr	r0, [sp, #0]
    4dda:	f000 fc61 	bl	56a0 <_realloc_r>
    4dde:	4683      	mov	fp, r0
    4de0:	2800      	cmp	r0, #0
    4de2:	d1c5      	bne.n	4d70 <__sfvwrite_r+0x248>
    4de4:	9d00      	ldr	r5, [sp, #0]
    4de6:	6921      	ldr	r1, [r4, #16]
    4de8:	4628      	mov	r0, r5
    4dea:	f7ff fdb7 	bl	495c <_free_r>
    4dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4df2:	220c      	movs	r2, #12
    4df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4df8:	602a      	str	r2, [r5, #0]
    4dfa:	e715      	b.n	4c28 <__sfvwrite_r+0x100>
    4dfc:	f106 0901 	add.w	r9, r6, #1
    4e00:	e722      	b.n	4c48 <__sfvwrite_r+0x120>
    4e02:	f04f 30ff 	mov.w	r0, #4294967295
    4e06:	e6bf      	b.n	4b88 <__sfvwrite_r+0x60>
    4e08:	9a00      	ldr	r2, [sp, #0]
    4e0a:	230c      	movs	r3, #12
    4e0c:	6013      	str	r3, [r2, #0]
    4e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4e12:	e709      	b.n	4c28 <__sfvwrite_r+0x100>
    4e14:	7ffffc00 	.word	0x7ffffc00

00004e18 <_fwalk_reent>:
    4e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e1c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    4e20:	d01f      	beq.n	4e62 <_fwalk_reent+0x4a>
    4e22:	4688      	mov	r8, r1
    4e24:	4606      	mov	r6, r0
    4e26:	f04f 0900 	mov.w	r9, #0
    4e2a:	687d      	ldr	r5, [r7, #4]
    4e2c:	68bc      	ldr	r4, [r7, #8]
    4e2e:	3d01      	subs	r5, #1
    4e30:	d411      	bmi.n	4e56 <_fwalk_reent+0x3e>
    4e32:	89a3      	ldrh	r3, [r4, #12]
    4e34:	2b01      	cmp	r3, #1
    4e36:	f105 35ff 	add.w	r5, r5, #4294967295
    4e3a:	d908      	bls.n	4e4e <_fwalk_reent+0x36>
    4e3c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    4e40:	3301      	adds	r3, #1
    4e42:	4621      	mov	r1, r4
    4e44:	4630      	mov	r0, r6
    4e46:	d002      	beq.n	4e4e <_fwalk_reent+0x36>
    4e48:	47c0      	blx	r8
    4e4a:	ea49 0900 	orr.w	r9, r9, r0
    4e4e:	1c6b      	adds	r3, r5, #1
    4e50:	f104 0468 	add.w	r4, r4, #104	; 0x68
    4e54:	d1ed      	bne.n	4e32 <_fwalk_reent+0x1a>
    4e56:	683f      	ldr	r7, [r7, #0]
    4e58:	2f00      	cmp	r7, #0
    4e5a:	d1e6      	bne.n	4e2a <_fwalk_reent+0x12>
    4e5c:	4648      	mov	r0, r9
    4e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e62:	46b9      	mov	r9, r7
    4e64:	4648      	mov	r0, r9
    4e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e6a:	bf00      	nop

00004e6c <__locale_mb_cur_max>:
    4e6c:	4b04      	ldr	r3, [pc, #16]	; (4e80 <__locale_mb_cur_max+0x14>)
    4e6e:	4a05      	ldr	r2, [pc, #20]	; (4e84 <__locale_mb_cur_max+0x18>)
    4e70:	681b      	ldr	r3, [r3, #0]
    4e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e74:	2b00      	cmp	r3, #0
    4e76:	bf08      	it	eq
    4e78:	4613      	moveq	r3, r2
    4e7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    4e7e:	4770      	bx	lr
    4e80:	20000108 	.word	0x20000108
    4e84:	2000053c 	.word	0x2000053c

00004e88 <__retarget_lock_init_recursive>:
    4e88:	4770      	bx	lr
    4e8a:	bf00      	nop

00004e8c <__retarget_lock_close_recursive>:
    4e8c:	4770      	bx	lr
    4e8e:	bf00      	nop

00004e90 <__retarget_lock_acquire_recursive>:
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop

00004e94 <__retarget_lock_release_recursive>:
    4e94:	4770      	bx	lr
    4e96:	bf00      	nop

00004e98 <__swhatbuf_r>:
    4e98:	b570      	push	{r4, r5, r6, lr}
    4e9a:	460c      	mov	r4, r1
    4e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4ea0:	2900      	cmp	r1, #0
    4ea2:	b090      	sub	sp, #64	; 0x40
    4ea4:	4615      	mov	r5, r2
    4ea6:	461e      	mov	r6, r3
    4ea8:	db14      	blt.n	4ed4 <__swhatbuf_r+0x3c>
    4eaa:	aa01      	add	r2, sp, #4
    4eac:	f000 fff2 	bl	5e94 <_fstat_r>
    4eb0:	2800      	cmp	r0, #0
    4eb2:	db0f      	blt.n	4ed4 <__swhatbuf_r+0x3c>
    4eb4:	9a02      	ldr	r2, [sp, #8]
    4eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    4eba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    4ebe:	fab2 f282 	clz	r2, r2
    4ec2:	0952      	lsrs	r2, r2, #5
    4ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4ec8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4ecc:	6032      	str	r2, [r6, #0]
    4ece:	602b      	str	r3, [r5, #0]
    4ed0:	b010      	add	sp, #64	; 0x40
    4ed2:	bd70      	pop	{r4, r5, r6, pc}
    4ed4:	89a2      	ldrh	r2, [r4, #12]
    4ed6:	2300      	movs	r3, #0
    4ed8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    4edc:	6033      	str	r3, [r6, #0]
    4ede:	d004      	beq.n	4eea <__swhatbuf_r+0x52>
    4ee0:	2240      	movs	r2, #64	; 0x40
    4ee2:	4618      	mov	r0, r3
    4ee4:	602a      	str	r2, [r5, #0]
    4ee6:	b010      	add	sp, #64	; 0x40
    4ee8:	bd70      	pop	{r4, r5, r6, pc}
    4eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4eee:	602b      	str	r3, [r5, #0]
    4ef0:	b010      	add	sp, #64	; 0x40
    4ef2:	bd70      	pop	{r4, r5, r6, pc}

00004ef4 <__smakebuf_r>:
    4ef4:	898a      	ldrh	r2, [r1, #12]
    4ef6:	0792      	lsls	r2, r2, #30
    4ef8:	460b      	mov	r3, r1
    4efa:	d506      	bpl.n	4f0a <__smakebuf_r+0x16>
    4efc:	f101 0243 	add.w	r2, r1, #67	; 0x43
    4f00:	2101      	movs	r1, #1
    4f02:	601a      	str	r2, [r3, #0]
    4f04:	611a      	str	r2, [r3, #16]
    4f06:	6159      	str	r1, [r3, #20]
    4f08:	4770      	bx	lr
    4f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f0c:	b083      	sub	sp, #12
    4f0e:	ab01      	add	r3, sp, #4
    4f10:	466a      	mov	r2, sp
    4f12:	460c      	mov	r4, r1
    4f14:	4606      	mov	r6, r0
    4f16:	f7ff ffbf 	bl	4e98 <__swhatbuf_r>
    4f1a:	9900      	ldr	r1, [sp, #0]
    4f1c:	4605      	mov	r5, r0
    4f1e:	4630      	mov	r0, r6
    4f20:	f000 f832 	bl	4f88 <_malloc_r>
    4f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4f28:	b1d8      	cbz	r0, 4f62 <__smakebuf_r+0x6e>
    4f2a:	9a01      	ldr	r2, [sp, #4]
    4f2c:	4f15      	ldr	r7, [pc, #84]	; (4f84 <__smakebuf_r+0x90>)
    4f2e:	9900      	ldr	r1, [sp, #0]
    4f30:	63f7      	str	r7, [r6, #60]	; 0x3c
    4f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f36:	81a3      	strh	r3, [r4, #12]
    4f38:	6020      	str	r0, [r4, #0]
    4f3a:	6120      	str	r0, [r4, #16]
    4f3c:	6161      	str	r1, [r4, #20]
    4f3e:	b91a      	cbnz	r2, 4f48 <__smakebuf_r+0x54>
    4f40:	432b      	orrs	r3, r5
    4f42:	81a3      	strh	r3, [r4, #12]
    4f44:	b003      	add	sp, #12
    4f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f48:	4630      	mov	r0, r6
    4f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4f4e:	f000 ffb5 	bl	5ebc <_isatty_r>
    4f52:	b1a0      	cbz	r0, 4f7e <__smakebuf_r+0x8a>
    4f54:	89a3      	ldrh	r3, [r4, #12]
    4f56:	f023 0303 	bic.w	r3, r3, #3
    4f5a:	f043 0301 	orr.w	r3, r3, #1
    4f5e:	b21b      	sxth	r3, r3
    4f60:	e7ee      	b.n	4f40 <__smakebuf_r+0x4c>
    4f62:	059a      	lsls	r2, r3, #22
    4f64:	d4ee      	bmi.n	4f44 <__smakebuf_r+0x50>
    4f66:	f023 0303 	bic.w	r3, r3, #3
    4f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    4f6e:	f043 0302 	orr.w	r3, r3, #2
    4f72:	2101      	movs	r1, #1
    4f74:	81a3      	strh	r3, [r4, #12]
    4f76:	6022      	str	r2, [r4, #0]
    4f78:	6122      	str	r2, [r4, #16]
    4f7a:	6161      	str	r1, [r4, #20]
    4f7c:	e7e2      	b.n	4f44 <__smakebuf_r+0x50>
    4f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4f82:	e7dd      	b.n	4f40 <__smakebuf_r+0x4c>
    4f84:	000046b5 	.word	0x000046b5

00004f88 <_malloc_r>:
    4f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f8c:	f101 060b 	add.w	r6, r1, #11
    4f90:	2e16      	cmp	r6, #22
    4f92:	b083      	sub	sp, #12
    4f94:	4605      	mov	r5, r0
    4f96:	f240 809e 	bls.w	50d6 <_malloc_r+0x14e>
    4f9a:	f036 0607 	bics.w	r6, r6, #7
    4f9e:	f100 80bd 	bmi.w	511c <_malloc_r+0x194>
    4fa2:	42b1      	cmp	r1, r6
    4fa4:	f200 80ba 	bhi.w	511c <_malloc_r+0x194>
    4fa8:	f000 fb6e 	bl	5688 <__malloc_lock>
    4fac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4fb0:	f0c0 8293 	bcc.w	54da <_malloc_r+0x552>
    4fb4:	0a73      	lsrs	r3, r6, #9
    4fb6:	f000 80b8 	beq.w	512a <_malloc_r+0x1a2>
    4fba:	2b04      	cmp	r3, #4
    4fbc:	f200 8179 	bhi.w	52b2 <_malloc_r+0x32a>
    4fc0:	09b3      	lsrs	r3, r6, #6
    4fc2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4fc6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
    4fca:	00c3      	lsls	r3, r0, #3
    4fcc:	4fbf      	ldr	r7, [pc, #764]	; (52cc <_malloc_r+0x344>)
    4fce:	443b      	add	r3, r7
    4fd0:	f1a3 0108 	sub.w	r1, r3, #8
    4fd4:	685c      	ldr	r4, [r3, #4]
    4fd6:	42a1      	cmp	r1, r4
    4fd8:	d106      	bne.n	4fe8 <_malloc_r+0x60>
    4fda:	e00c      	b.n	4ff6 <_malloc_r+0x6e>
    4fdc:	2a00      	cmp	r2, #0
    4fde:	f280 80aa 	bge.w	5136 <_malloc_r+0x1ae>
    4fe2:	68e4      	ldr	r4, [r4, #12]
    4fe4:	42a1      	cmp	r1, r4
    4fe6:	d006      	beq.n	4ff6 <_malloc_r+0x6e>
    4fe8:	6863      	ldr	r3, [r4, #4]
    4fea:	f023 0303 	bic.w	r3, r3, #3
    4fee:	1b9a      	subs	r2, r3, r6
    4ff0:	2a0f      	cmp	r2, #15
    4ff2:	ddf3      	ble.n	4fdc <_malloc_r+0x54>
    4ff4:	4670      	mov	r0, lr
    4ff6:	693c      	ldr	r4, [r7, #16]
    4ff8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 52e0 <_malloc_r+0x358>
    4ffc:	4574      	cmp	r4, lr
    4ffe:	f000 81ab 	beq.w	5358 <_malloc_r+0x3d0>
    5002:	6863      	ldr	r3, [r4, #4]
    5004:	f023 0303 	bic.w	r3, r3, #3
    5008:	1b9a      	subs	r2, r3, r6
    500a:	2a0f      	cmp	r2, #15
    500c:	f300 8190 	bgt.w	5330 <_malloc_r+0x3a8>
    5010:	2a00      	cmp	r2, #0
    5012:	f8c7 e014 	str.w	lr, [r7, #20]
    5016:	f8c7 e010 	str.w	lr, [r7, #16]
    501a:	f280 809d 	bge.w	5158 <_malloc_r+0x1d0>
    501e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5022:	f080 8161 	bcs.w	52e8 <_malloc_r+0x360>
    5026:	08db      	lsrs	r3, r3, #3
    5028:	f103 0c01 	add.w	ip, r3, #1
    502c:	1099      	asrs	r1, r3, #2
    502e:	687a      	ldr	r2, [r7, #4]
    5030:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
    5034:	f8c4 8008 	str.w	r8, [r4, #8]
    5038:	2301      	movs	r3, #1
    503a:	408b      	lsls	r3, r1
    503c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
    5040:	4313      	orrs	r3, r2
    5042:	3908      	subs	r1, #8
    5044:	60e1      	str	r1, [r4, #12]
    5046:	607b      	str	r3, [r7, #4]
    5048:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
    504c:	f8c8 400c 	str.w	r4, [r8, #12]
    5050:	1082      	asrs	r2, r0, #2
    5052:	2401      	movs	r4, #1
    5054:	4094      	lsls	r4, r2
    5056:	429c      	cmp	r4, r3
    5058:	f200 808b 	bhi.w	5172 <_malloc_r+0x1ea>
    505c:	421c      	tst	r4, r3
    505e:	d106      	bne.n	506e <_malloc_r+0xe6>
    5060:	f020 0003 	bic.w	r0, r0, #3
    5064:	0064      	lsls	r4, r4, #1
    5066:	421c      	tst	r4, r3
    5068:	f100 0004 	add.w	r0, r0, #4
    506c:	d0fa      	beq.n	5064 <_malloc_r+0xdc>
    506e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    5072:	46cc      	mov	ip, r9
    5074:	4680      	mov	r8, r0
    5076:	f8dc 300c 	ldr.w	r3, [ip, #12]
    507a:	459c      	cmp	ip, r3
    507c:	d107      	bne.n	508e <_malloc_r+0x106>
    507e:	e16d      	b.n	535c <_malloc_r+0x3d4>
    5080:	2a00      	cmp	r2, #0
    5082:	f280 817b 	bge.w	537c <_malloc_r+0x3f4>
    5086:	68db      	ldr	r3, [r3, #12]
    5088:	459c      	cmp	ip, r3
    508a:	f000 8167 	beq.w	535c <_malloc_r+0x3d4>
    508e:	6859      	ldr	r1, [r3, #4]
    5090:	f021 0103 	bic.w	r1, r1, #3
    5094:	1b8a      	subs	r2, r1, r6
    5096:	2a0f      	cmp	r2, #15
    5098:	ddf2      	ble.n	5080 <_malloc_r+0xf8>
    509a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    509e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    50a2:	9300      	str	r3, [sp, #0]
    50a4:	199c      	adds	r4, r3, r6
    50a6:	4628      	mov	r0, r5
    50a8:	f046 0601 	orr.w	r6, r6, #1
    50ac:	f042 0501 	orr.w	r5, r2, #1
    50b0:	605e      	str	r6, [r3, #4]
    50b2:	f8c8 c00c 	str.w	ip, [r8, #12]
    50b6:	f8cc 8008 	str.w	r8, [ip, #8]
    50ba:	617c      	str	r4, [r7, #20]
    50bc:	613c      	str	r4, [r7, #16]
    50be:	f8c4 e00c 	str.w	lr, [r4, #12]
    50c2:	f8c4 e008 	str.w	lr, [r4, #8]
    50c6:	6065      	str	r5, [r4, #4]
    50c8:	505a      	str	r2, [r3, r1]
    50ca:	f000 fae3 	bl	5694 <__malloc_unlock>
    50ce:	9b00      	ldr	r3, [sp, #0]
    50d0:	f103 0408 	add.w	r4, r3, #8
    50d4:	e01e      	b.n	5114 <_malloc_r+0x18c>
    50d6:	2910      	cmp	r1, #16
    50d8:	d820      	bhi.n	511c <_malloc_r+0x194>
    50da:	f000 fad5 	bl	5688 <__malloc_lock>
    50de:	2610      	movs	r6, #16
    50e0:	2318      	movs	r3, #24
    50e2:	2002      	movs	r0, #2
    50e4:	4f79      	ldr	r7, [pc, #484]	; (52cc <_malloc_r+0x344>)
    50e6:	443b      	add	r3, r7
    50e8:	f1a3 0208 	sub.w	r2, r3, #8
    50ec:	685c      	ldr	r4, [r3, #4]
    50ee:	4294      	cmp	r4, r2
    50f0:	f000 813d 	beq.w	536e <_malloc_r+0x3e6>
    50f4:	6863      	ldr	r3, [r4, #4]
    50f6:	68e1      	ldr	r1, [r4, #12]
    50f8:	68a6      	ldr	r6, [r4, #8]
    50fa:	f023 0303 	bic.w	r3, r3, #3
    50fe:	4423      	add	r3, r4
    5100:	4628      	mov	r0, r5
    5102:	685a      	ldr	r2, [r3, #4]
    5104:	60f1      	str	r1, [r6, #12]
    5106:	f042 0201 	orr.w	r2, r2, #1
    510a:	608e      	str	r6, [r1, #8]
    510c:	605a      	str	r2, [r3, #4]
    510e:	f000 fac1 	bl	5694 <__malloc_unlock>
    5112:	3408      	adds	r4, #8
    5114:	4620      	mov	r0, r4
    5116:	b003      	add	sp, #12
    5118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    511c:	2400      	movs	r4, #0
    511e:	230c      	movs	r3, #12
    5120:	4620      	mov	r0, r4
    5122:	602b      	str	r3, [r5, #0]
    5124:	b003      	add	sp, #12
    5126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    512a:	2040      	movs	r0, #64	; 0x40
    512c:	f44f 7300 	mov.w	r3, #512	; 0x200
    5130:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    5134:	e74a      	b.n	4fcc <_malloc_r+0x44>
    5136:	4423      	add	r3, r4
    5138:	68e1      	ldr	r1, [r4, #12]
    513a:	685a      	ldr	r2, [r3, #4]
    513c:	68a6      	ldr	r6, [r4, #8]
    513e:	f042 0201 	orr.w	r2, r2, #1
    5142:	60f1      	str	r1, [r6, #12]
    5144:	4628      	mov	r0, r5
    5146:	608e      	str	r6, [r1, #8]
    5148:	605a      	str	r2, [r3, #4]
    514a:	f000 faa3 	bl	5694 <__malloc_unlock>
    514e:	3408      	adds	r4, #8
    5150:	4620      	mov	r0, r4
    5152:	b003      	add	sp, #12
    5154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5158:	4423      	add	r3, r4
    515a:	4628      	mov	r0, r5
    515c:	685a      	ldr	r2, [r3, #4]
    515e:	f042 0201 	orr.w	r2, r2, #1
    5162:	605a      	str	r2, [r3, #4]
    5164:	f000 fa96 	bl	5694 <__malloc_unlock>
    5168:	3408      	adds	r4, #8
    516a:	4620      	mov	r0, r4
    516c:	b003      	add	sp, #12
    516e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5172:	68bc      	ldr	r4, [r7, #8]
    5174:	6863      	ldr	r3, [r4, #4]
    5176:	f023 0803 	bic.w	r8, r3, #3
    517a:	45b0      	cmp	r8, r6
    517c:	d304      	bcc.n	5188 <_malloc_r+0x200>
    517e:	eba8 0306 	sub.w	r3, r8, r6
    5182:	2b0f      	cmp	r3, #15
    5184:	f300 8085 	bgt.w	5292 <_malloc_r+0x30a>
    5188:	f8df 9158 	ldr.w	r9, [pc, #344]	; 52e4 <_malloc_r+0x35c>
    518c:	4b50      	ldr	r3, [pc, #320]	; (52d0 <_malloc_r+0x348>)
    518e:	f8d9 2000 	ldr.w	r2, [r9]
    5192:	681b      	ldr	r3, [r3, #0]
    5194:	3201      	adds	r2, #1
    5196:	4433      	add	r3, r6
    5198:	eb04 0a08 	add.w	sl, r4, r8
    519c:	f000 8155 	beq.w	544a <_malloc_r+0x4c2>
    51a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    51a4:	330f      	adds	r3, #15
    51a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    51aa:	f02b 0b0f 	bic.w	fp, fp, #15
    51ae:	4659      	mov	r1, fp
    51b0:	4628      	mov	r0, r5
    51b2:	f000 fc1b 	bl	59ec <_sbrk_r>
    51b6:	1c41      	adds	r1, r0, #1
    51b8:	4602      	mov	r2, r0
    51ba:	f000 80fc 	beq.w	53b6 <_malloc_r+0x42e>
    51be:	4582      	cmp	sl, r0
    51c0:	f200 80f7 	bhi.w	53b2 <_malloc_r+0x42a>
    51c4:	4b43      	ldr	r3, [pc, #268]	; (52d4 <_malloc_r+0x34c>)
    51c6:	6819      	ldr	r1, [r3, #0]
    51c8:	4459      	add	r1, fp
    51ca:	6019      	str	r1, [r3, #0]
    51cc:	f000 814d 	beq.w	546a <_malloc_r+0x4e2>
    51d0:	f8d9 0000 	ldr.w	r0, [r9]
    51d4:	3001      	adds	r0, #1
    51d6:	bf1b      	ittet	ne
    51d8:	eba2 0a0a 	subne.w	sl, r2, sl
    51dc:	4451      	addne	r1, sl
    51de:	f8c9 2000 	streq.w	r2, [r9]
    51e2:	6019      	strne	r1, [r3, #0]
    51e4:	f012 0107 	ands.w	r1, r2, #7
    51e8:	f000 8115 	beq.w	5416 <_malloc_r+0x48e>
    51ec:	f1c1 0008 	rsb	r0, r1, #8
    51f0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    51f4:	4402      	add	r2, r0
    51f6:	3108      	adds	r1, #8
    51f8:	eb02 090b 	add.w	r9, r2, fp
    51fc:	f3c9 090b 	ubfx	r9, r9, #0, #12
    5200:	eba1 0909 	sub.w	r9, r1, r9
    5204:	4649      	mov	r1, r9
    5206:	4628      	mov	r0, r5
    5208:	9301      	str	r3, [sp, #4]
    520a:	9200      	str	r2, [sp, #0]
    520c:	f000 fbee 	bl	59ec <_sbrk_r>
    5210:	1c43      	adds	r3, r0, #1
    5212:	e89d 000c 	ldmia.w	sp, {r2, r3}
    5216:	f000 8143 	beq.w	54a0 <_malloc_r+0x518>
    521a:	1a80      	subs	r0, r0, r2
    521c:	4448      	add	r0, r9
    521e:	f040 0001 	orr.w	r0, r0, #1
    5222:	6819      	ldr	r1, [r3, #0]
    5224:	60ba      	str	r2, [r7, #8]
    5226:	4449      	add	r1, r9
    5228:	42bc      	cmp	r4, r7
    522a:	6050      	str	r0, [r2, #4]
    522c:	6019      	str	r1, [r3, #0]
    522e:	d017      	beq.n	5260 <_malloc_r+0x2d8>
    5230:	f1b8 0f0f 	cmp.w	r8, #15
    5234:	f240 80fb 	bls.w	542e <_malloc_r+0x4a6>
    5238:	6860      	ldr	r0, [r4, #4]
    523a:	f1a8 020c 	sub.w	r2, r8, #12
    523e:	f022 0207 	bic.w	r2, r2, #7
    5242:	eb04 0e02 	add.w	lr, r4, r2
    5246:	f000 0001 	and.w	r0, r0, #1
    524a:	f04f 0c05 	mov.w	ip, #5
    524e:	4310      	orrs	r0, r2
    5250:	2a0f      	cmp	r2, #15
    5252:	6060      	str	r0, [r4, #4]
    5254:	f8ce c004 	str.w	ip, [lr, #4]
    5258:	f8ce c008 	str.w	ip, [lr, #8]
    525c:	f200 8117 	bhi.w	548e <_malloc_r+0x506>
    5260:	4b1d      	ldr	r3, [pc, #116]	; (52d8 <_malloc_r+0x350>)
    5262:	68bc      	ldr	r4, [r7, #8]
    5264:	681a      	ldr	r2, [r3, #0]
    5266:	4291      	cmp	r1, r2
    5268:	bf88      	it	hi
    526a:	6019      	strhi	r1, [r3, #0]
    526c:	4b1b      	ldr	r3, [pc, #108]	; (52dc <_malloc_r+0x354>)
    526e:	681a      	ldr	r2, [r3, #0]
    5270:	4291      	cmp	r1, r2
    5272:	6862      	ldr	r2, [r4, #4]
    5274:	bf88      	it	hi
    5276:	6019      	strhi	r1, [r3, #0]
    5278:	f022 0203 	bic.w	r2, r2, #3
    527c:	4296      	cmp	r6, r2
    527e:	eba2 0306 	sub.w	r3, r2, r6
    5282:	d801      	bhi.n	5288 <_malloc_r+0x300>
    5284:	2b0f      	cmp	r3, #15
    5286:	dc04      	bgt.n	5292 <_malloc_r+0x30a>
    5288:	4628      	mov	r0, r5
    528a:	f000 fa03 	bl	5694 <__malloc_unlock>
    528e:	2400      	movs	r4, #0
    5290:	e740      	b.n	5114 <_malloc_r+0x18c>
    5292:	19a2      	adds	r2, r4, r6
    5294:	f043 0301 	orr.w	r3, r3, #1
    5298:	f046 0601 	orr.w	r6, r6, #1
    529c:	6066      	str	r6, [r4, #4]
    529e:	4628      	mov	r0, r5
    52a0:	60ba      	str	r2, [r7, #8]
    52a2:	6053      	str	r3, [r2, #4]
    52a4:	f000 f9f6 	bl	5694 <__malloc_unlock>
    52a8:	3408      	adds	r4, #8
    52aa:	4620      	mov	r0, r4
    52ac:	b003      	add	sp, #12
    52ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52b2:	2b14      	cmp	r3, #20
    52b4:	d971      	bls.n	539a <_malloc_r+0x412>
    52b6:	2b54      	cmp	r3, #84	; 0x54
    52b8:	f200 80a3 	bhi.w	5402 <_malloc_r+0x47a>
    52bc:	0b33      	lsrs	r3, r6, #12
    52be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    52c2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
    52c6:	00c3      	lsls	r3, r0, #3
    52c8:	e680      	b.n	4fcc <_malloc_r+0x44>
    52ca:	bf00      	nop
    52cc:	200006a8 	.word	0x200006a8
    52d0:	20000cec 	.word	0x20000cec
    52d4:	20000cbc 	.word	0x20000cbc
    52d8:	20000ce4 	.word	0x20000ce4
    52dc:	20000ce8 	.word	0x20000ce8
    52e0:	200006b0 	.word	0x200006b0
    52e4:	20000ab0 	.word	0x20000ab0
    52e8:	0a5a      	lsrs	r2, r3, #9
    52ea:	2a04      	cmp	r2, #4
    52ec:	d95b      	bls.n	53a6 <_malloc_r+0x41e>
    52ee:	2a14      	cmp	r2, #20
    52f0:	f200 80ae 	bhi.w	5450 <_malloc_r+0x4c8>
    52f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    52f8:	00c9      	lsls	r1, r1, #3
    52fa:	325b      	adds	r2, #91	; 0x5b
    52fc:	eb07 0c01 	add.w	ip, r7, r1
    5300:	5879      	ldr	r1, [r7, r1]
    5302:	f1ac 0c08 	sub.w	ip, ip, #8
    5306:	458c      	cmp	ip, r1
    5308:	f000 8088 	beq.w	541c <_malloc_r+0x494>
    530c:	684a      	ldr	r2, [r1, #4]
    530e:	f022 0203 	bic.w	r2, r2, #3
    5312:	4293      	cmp	r3, r2
    5314:	d273      	bcs.n	53fe <_malloc_r+0x476>
    5316:	6889      	ldr	r1, [r1, #8]
    5318:	458c      	cmp	ip, r1
    531a:	d1f7      	bne.n	530c <_malloc_r+0x384>
    531c:	f8dc 200c 	ldr.w	r2, [ip, #12]
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	60e2      	str	r2, [r4, #12]
    5324:	f8c4 c008 	str.w	ip, [r4, #8]
    5328:	6094      	str	r4, [r2, #8]
    532a:	f8cc 400c 	str.w	r4, [ip, #12]
    532e:	e68f      	b.n	5050 <_malloc_r+0xc8>
    5330:	19a1      	adds	r1, r4, r6
    5332:	f046 0c01 	orr.w	ip, r6, #1
    5336:	f042 0601 	orr.w	r6, r2, #1
    533a:	f8c4 c004 	str.w	ip, [r4, #4]
    533e:	4628      	mov	r0, r5
    5340:	6179      	str	r1, [r7, #20]
    5342:	6139      	str	r1, [r7, #16]
    5344:	f8c1 e00c 	str.w	lr, [r1, #12]
    5348:	f8c1 e008 	str.w	lr, [r1, #8]
    534c:	604e      	str	r6, [r1, #4]
    534e:	50e2      	str	r2, [r4, r3]
    5350:	f000 f9a0 	bl	5694 <__malloc_unlock>
    5354:	3408      	adds	r4, #8
    5356:	e6dd      	b.n	5114 <_malloc_r+0x18c>
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	e679      	b.n	5050 <_malloc_r+0xc8>
    535c:	f108 0801 	add.w	r8, r8, #1
    5360:	f018 0f03 	tst.w	r8, #3
    5364:	f10c 0c08 	add.w	ip, ip, #8
    5368:	f47f ae85 	bne.w	5076 <_malloc_r+0xee>
    536c:	e02d      	b.n	53ca <_malloc_r+0x442>
    536e:	68dc      	ldr	r4, [r3, #12]
    5370:	42a3      	cmp	r3, r4
    5372:	bf08      	it	eq
    5374:	3002      	addeq	r0, #2
    5376:	f43f ae3e 	beq.w	4ff6 <_malloc_r+0x6e>
    537a:	e6bb      	b.n	50f4 <_malloc_r+0x16c>
    537c:	4419      	add	r1, r3
    537e:	461c      	mov	r4, r3
    5380:	684a      	ldr	r2, [r1, #4]
    5382:	68db      	ldr	r3, [r3, #12]
    5384:	f854 6f08 	ldr.w	r6, [r4, #8]!
    5388:	f042 0201 	orr.w	r2, r2, #1
    538c:	604a      	str	r2, [r1, #4]
    538e:	4628      	mov	r0, r5
    5390:	60f3      	str	r3, [r6, #12]
    5392:	609e      	str	r6, [r3, #8]
    5394:	f000 f97e 	bl	5694 <__malloc_unlock>
    5398:	e6bc      	b.n	5114 <_malloc_r+0x18c>
    539a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    539e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
    53a2:	00c3      	lsls	r3, r0, #3
    53a4:	e612      	b.n	4fcc <_malloc_r+0x44>
    53a6:	099a      	lsrs	r2, r3, #6
    53a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
    53ac:	00c9      	lsls	r1, r1, #3
    53ae:	3238      	adds	r2, #56	; 0x38
    53b0:	e7a4      	b.n	52fc <_malloc_r+0x374>
    53b2:	42bc      	cmp	r4, r7
    53b4:	d054      	beq.n	5460 <_malloc_r+0x4d8>
    53b6:	68bc      	ldr	r4, [r7, #8]
    53b8:	6862      	ldr	r2, [r4, #4]
    53ba:	f022 0203 	bic.w	r2, r2, #3
    53be:	e75d      	b.n	527c <_malloc_r+0x2f4>
    53c0:	f859 3908 	ldr.w	r3, [r9], #-8
    53c4:	4599      	cmp	r9, r3
    53c6:	f040 8086 	bne.w	54d6 <_malloc_r+0x54e>
    53ca:	f010 0f03 	tst.w	r0, #3
    53ce:	f100 30ff 	add.w	r0, r0, #4294967295
    53d2:	d1f5      	bne.n	53c0 <_malloc_r+0x438>
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	ea23 0304 	bic.w	r3, r3, r4
    53da:	607b      	str	r3, [r7, #4]
    53dc:	0064      	lsls	r4, r4, #1
    53de:	429c      	cmp	r4, r3
    53e0:	f63f aec7 	bhi.w	5172 <_malloc_r+0x1ea>
    53e4:	2c00      	cmp	r4, #0
    53e6:	f43f aec4 	beq.w	5172 <_malloc_r+0x1ea>
    53ea:	421c      	tst	r4, r3
    53ec:	4640      	mov	r0, r8
    53ee:	f47f ae3e 	bne.w	506e <_malloc_r+0xe6>
    53f2:	0064      	lsls	r4, r4, #1
    53f4:	421c      	tst	r4, r3
    53f6:	f100 0004 	add.w	r0, r0, #4
    53fa:	d0fa      	beq.n	53f2 <_malloc_r+0x46a>
    53fc:	e637      	b.n	506e <_malloc_r+0xe6>
    53fe:	468c      	mov	ip, r1
    5400:	e78c      	b.n	531c <_malloc_r+0x394>
    5402:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5406:	d815      	bhi.n	5434 <_malloc_r+0x4ac>
    5408:	0bf3      	lsrs	r3, r6, #15
    540a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    540e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
    5412:	00c3      	lsls	r3, r0, #3
    5414:	e5da      	b.n	4fcc <_malloc_r+0x44>
    5416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    541a:	e6ed      	b.n	51f8 <_malloc_r+0x270>
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	1092      	asrs	r2, r2, #2
    5420:	2101      	movs	r1, #1
    5422:	fa01 f202 	lsl.w	r2, r1, r2
    5426:	4313      	orrs	r3, r2
    5428:	607b      	str	r3, [r7, #4]
    542a:	4662      	mov	r2, ip
    542c:	e779      	b.n	5322 <_malloc_r+0x39a>
    542e:	2301      	movs	r3, #1
    5430:	6053      	str	r3, [r2, #4]
    5432:	e729      	b.n	5288 <_malloc_r+0x300>
    5434:	f240 5254 	movw	r2, #1364	; 0x554
    5438:	4293      	cmp	r3, r2
    543a:	d822      	bhi.n	5482 <_malloc_r+0x4fa>
    543c:	0cb3      	lsrs	r3, r6, #18
    543e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5442:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
    5446:	00c3      	lsls	r3, r0, #3
    5448:	e5c0      	b.n	4fcc <_malloc_r+0x44>
    544a:	f103 0b10 	add.w	fp, r3, #16
    544e:	e6ae      	b.n	51ae <_malloc_r+0x226>
    5450:	2a54      	cmp	r2, #84	; 0x54
    5452:	d829      	bhi.n	54a8 <_malloc_r+0x520>
    5454:	0b1a      	lsrs	r2, r3, #12
    5456:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    545a:	00c9      	lsls	r1, r1, #3
    545c:	326e      	adds	r2, #110	; 0x6e
    545e:	e74d      	b.n	52fc <_malloc_r+0x374>
    5460:	4b20      	ldr	r3, [pc, #128]	; (54e4 <_malloc_r+0x55c>)
    5462:	6819      	ldr	r1, [r3, #0]
    5464:	4459      	add	r1, fp
    5466:	6019      	str	r1, [r3, #0]
    5468:	e6b2      	b.n	51d0 <_malloc_r+0x248>
    546a:	f3ca 000b 	ubfx	r0, sl, #0, #12
    546e:	2800      	cmp	r0, #0
    5470:	f47f aeae 	bne.w	51d0 <_malloc_r+0x248>
    5474:	eb08 030b 	add.w	r3, r8, fp
    5478:	68ba      	ldr	r2, [r7, #8]
    547a:	f043 0301 	orr.w	r3, r3, #1
    547e:	6053      	str	r3, [r2, #4]
    5480:	e6ee      	b.n	5260 <_malloc_r+0x2d8>
    5482:	207f      	movs	r0, #127	; 0x7f
    5484:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5488:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
    548c:	e59e      	b.n	4fcc <_malloc_r+0x44>
    548e:	f104 0108 	add.w	r1, r4, #8
    5492:	4628      	mov	r0, r5
    5494:	9300      	str	r3, [sp, #0]
    5496:	f7ff fa61 	bl	495c <_free_r>
    549a:	9b00      	ldr	r3, [sp, #0]
    549c:	6819      	ldr	r1, [r3, #0]
    549e:	e6df      	b.n	5260 <_malloc_r+0x2d8>
    54a0:	2001      	movs	r0, #1
    54a2:	f04f 0900 	mov.w	r9, #0
    54a6:	e6bc      	b.n	5222 <_malloc_r+0x29a>
    54a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    54ac:	d805      	bhi.n	54ba <_malloc_r+0x532>
    54ae:	0bda      	lsrs	r2, r3, #15
    54b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    54b4:	00c9      	lsls	r1, r1, #3
    54b6:	3277      	adds	r2, #119	; 0x77
    54b8:	e720      	b.n	52fc <_malloc_r+0x374>
    54ba:	f240 5154 	movw	r1, #1364	; 0x554
    54be:	428a      	cmp	r2, r1
    54c0:	d805      	bhi.n	54ce <_malloc_r+0x546>
    54c2:	0c9a      	lsrs	r2, r3, #18
    54c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    54c8:	00c9      	lsls	r1, r1, #3
    54ca:	327c      	adds	r2, #124	; 0x7c
    54cc:	e716      	b.n	52fc <_malloc_r+0x374>
    54ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    54d2:	227e      	movs	r2, #126	; 0x7e
    54d4:	e712      	b.n	52fc <_malloc_r+0x374>
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	e780      	b.n	53dc <_malloc_r+0x454>
    54da:	08f0      	lsrs	r0, r6, #3
    54dc:	f106 0308 	add.w	r3, r6, #8
    54e0:	e600      	b.n	50e4 <_malloc_r+0x15c>
    54e2:	bf00      	nop
    54e4:	20000cbc 	.word	0x20000cbc

000054e8 <__ascii_mbtowc>:
    54e8:	b082      	sub	sp, #8
    54ea:	b149      	cbz	r1, 5500 <__ascii_mbtowc+0x18>
    54ec:	b15a      	cbz	r2, 5506 <__ascii_mbtowc+0x1e>
    54ee:	b16b      	cbz	r3, 550c <__ascii_mbtowc+0x24>
    54f0:	7813      	ldrb	r3, [r2, #0]
    54f2:	600b      	str	r3, [r1, #0]
    54f4:	7812      	ldrb	r2, [r2, #0]
    54f6:	1c10      	adds	r0, r2, #0
    54f8:	bf18      	it	ne
    54fa:	2001      	movne	r0, #1
    54fc:	b002      	add	sp, #8
    54fe:	4770      	bx	lr
    5500:	a901      	add	r1, sp, #4
    5502:	2a00      	cmp	r2, #0
    5504:	d1f3      	bne.n	54ee <__ascii_mbtowc+0x6>
    5506:	4610      	mov	r0, r2
    5508:	b002      	add	sp, #8
    550a:	4770      	bx	lr
    550c:	f06f 0001 	mvn.w	r0, #1
    5510:	e7f4      	b.n	54fc <__ascii_mbtowc+0x14>
    5512:	bf00      	nop
	...

00005520 <memchr>:
    5520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5524:	2a10      	cmp	r2, #16
    5526:	db2b      	blt.n	5580 <memchr+0x60>
    5528:	f010 0f07 	tst.w	r0, #7
    552c:	d008      	beq.n	5540 <memchr+0x20>
    552e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5532:	3a01      	subs	r2, #1
    5534:	428b      	cmp	r3, r1
    5536:	d02d      	beq.n	5594 <memchr+0x74>
    5538:	f010 0f07 	tst.w	r0, #7
    553c:	b342      	cbz	r2, 5590 <memchr+0x70>
    553e:	d1f6      	bne.n	552e <memchr+0xe>
    5540:	b4f0      	push	{r4, r5, r6, r7}
    5542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    554a:	f022 0407 	bic.w	r4, r2, #7
    554e:	f07f 0700 	mvns.w	r7, #0
    5552:	2300      	movs	r3, #0
    5554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5558:	3c08      	subs	r4, #8
    555a:	ea85 0501 	eor.w	r5, r5, r1
    555e:	ea86 0601 	eor.w	r6, r6, r1
    5562:	fa85 f547 	uadd8	r5, r5, r7
    5566:	faa3 f587 	sel	r5, r3, r7
    556a:	fa86 f647 	uadd8	r6, r6, r7
    556e:	faa5 f687 	sel	r6, r5, r7
    5572:	b98e      	cbnz	r6, 5598 <memchr+0x78>
    5574:	d1ee      	bne.n	5554 <memchr+0x34>
    5576:	bcf0      	pop	{r4, r5, r6, r7}
    5578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    557c:	f002 0207 	and.w	r2, r2, #7
    5580:	b132      	cbz	r2, 5590 <memchr+0x70>
    5582:	f810 3b01 	ldrb.w	r3, [r0], #1
    5586:	3a01      	subs	r2, #1
    5588:	ea83 0301 	eor.w	r3, r3, r1
    558c:	b113      	cbz	r3, 5594 <memchr+0x74>
    558e:	d1f8      	bne.n	5582 <memchr+0x62>
    5590:	2000      	movs	r0, #0
    5592:	4770      	bx	lr
    5594:	3801      	subs	r0, #1
    5596:	4770      	bx	lr
    5598:	2d00      	cmp	r5, #0
    559a:	bf06      	itte	eq
    559c:	4635      	moveq	r5, r6
    559e:	3803      	subeq	r0, #3
    55a0:	3807      	subne	r0, #7
    55a2:	f015 0f01 	tst.w	r5, #1
    55a6:	d107      	bne.n	55b8 <memchr+0x98>
    55a8:	3001      	adds	r0, #1
    55aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    55ae:	bf02      	ittt	eq
    55b0:	3001      	addeq	r0, #1
    55b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    55b6:	3001      	addeq	r0, #1
    55b8:	bcf0      	pop	{r4, r5, r6, r7}
    55ba:	3801      	subs	r0, #1
    55bc:	4770      	bx	lr
    55be:	bf00      	nop

000055c0 <memmove>:
    55c0:	4288      	cmp	r0, r1
    55c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    55c4:	d90d      	bls.n	55e2 <memmove+0x22>
    55c6:	188b      	adds	r3, r1, r2
    55c8:	4298      	cmp	r0, r3
    55ca:	d20a      	bcs.n	55e2 <memmove+0x22>
    55cc:	1884      	adds	r4, r0, r2
    55ce:	2a00      	cmp	r2, #0
    55d0:	d051      	beq.n	5676 <memmove+0xb6>
    55d2:	4622      	mov	r2, r4
    55d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    55d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
    55dc:	4299      	cmp	r1, r3
    55de:	d1f9      	bne.n	55d4 <memmove+0x14>
    55e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55e2:	2a0f      	cmp	r2, #15
    55e4:	d948      	bls.n	5678 <memmove+0xb8>
    55e6:	ea41 0300 	orr.w	r3, r1, r0
    55ea:	079b      	lsls	r3, r3, #30
    55ec:	d146      	bne.n	567c <memmove+0xbc>
    55ee:	f100 0410 	add.w	r4, r0, #16
    55f2:	f101 0310 	add.w	r3, r1, #16
    55f6:	4615      	mov	r5, r2
    55f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
    55fc:	f844 6c10 	str.w	r6, [r4, #-16]
    5600:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    5604:	f844 6c0c 	str.w	r6, [r4, #-12]
    5608:	f853 6c08 	ldr.w	r6, [r3, #-8]
    560c:	f844 6c08 	str.w	r6, [r4, #-8]
    5610:	3d10      	subs	r5, #16
    5612:	f853 6c04 	ldr.w	r6, [r3, #-4]
    5616:	f844 6c04 	str.w	r6, [r4, #-4]
    561a:	2d0f      	cmp	r5, #15
    561c:	f103 0310 	add.w	r3, r3, #16
    5620:	f104 0410 	add.w	r4, r4, #16
    5624:	d8e8      	bhi.n	55f8 <memmove+0x38>
    5626:	f1a2 0310 	sub.w	r3, r2, #16
    562a:	f023 030f 	bic.w	r3, r3, #15
    562e:	f002 0e0f 	and.w	lr, r2, #15
    5632:	3310      	adds	r3, #16
    5634:	f1be 0f03 	cmp.w	lr, #3
    5638:	4419      	add	r1, r3
    563a:	4403      	add	r3, r0
    563c:	d921      	bls.n	5682 <memmove+0xc2>
    563e:	1f1e      	subs	r6, r3, #4
    5640:	460d      	mov	r5, r1
    5642:	4674      	mov	r4, lr
    5644:	3c04      	subs	r4, #4
    5646:	f855 7b04 	ldr.w	r7, [r5], #4
    564a:	f846 7f04 	str.w	r7, [r6, #4]!
    564e:	2c03      	cmp	r4, #3
    5650:	d8f8      	bhi.n	5644 <memmove+0x84>
    5652:	f1ae 0404 	sub.w	r4, lr, #4
    5656:	f024 0403 	bic.w	r4, r4, #3
    565a:	3404      	adds	r4, #4
    565c:	4421      	add	r1, r4
    565e:	4423      	add	r3, r4
    5660:	f002 0203 	and.w	r2, r2, #3
    5664:	b162      	cbz	r2, 5680 <memmove+0xc0>
    5666:	3b01      	subs	r3, #1
    5668:	440a      	add	r2, r1
    566a:	f811 4b01 	ldrb.w	r4, [r1], #1
    566e:	f803 4f01 	strb.w	r4, [r3, #1]!
    5672:	428a      	cmp	r2, r1
    5674:	d1f9      	bne.n	566a <memmove+0xaa>
    5676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5678:	4603      	mov	r3, r0
    567a:	e7f3      	b.n	5664 <memmove+0xa4>
    567c:	4603      	mov	r3, r0
    567e:	e7f2      	b.n	5666 <memmove+0xa6>
    5680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5682:	4672      	mov	r2, lr
    5684:	e7ee      	b.n	5664 <memmove+0xa4>
    5686:	bf00      	nop

00005688 <__malloc_lock>:
    5688:	4801      	ldr	r0, [pc, #4]	; (5690 <__malloc_lock+0x8>)
    568a:	f7ff bc01 	b.w	4e90 <__retarget_lock_acquire_recursive>
    568e:	bf00      	nop
    5690:	20000e38 	.word	0x20000e38

00005694 <__malloc_unlock>:
    5694:	4801      	ldr	r0, [pc, #4]	; (569c <__malloc_unlock+0x8>)
    5696:	f7ff bbfd 	b.w	4e94 <__retarget_lock_release_recursive>
    569a:	bf00      	nop
    569c:	20000e38 	.word	0x20000e38

000056a0 <_realloc_r>:
    56a0:	2900      	cmp	r1, #0
    56a2:	f000 8095 	beq.w	57d0 <_realloc_r+0x130>
    56a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56aa:	460d      	mov	r5, r1
    56ac:	4616      	mov	r6, r2
    56ae:	b083      	sub	sp, #12
    56b0:	4680      	mov	r8, r0
    56b2:	f106 070b 	add.w	r7, r6, #11
    56b6:	f7ff ffe7 	bl	5688 <__malloc_lock>
    56ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
    56be:	2f16      	cmp	r7, #22
    56c0:	f02e 0403 	bic.w	r4, lr, #3
    56c4:	f1a5 0908 	sub.w	r9, r5, #8
    56c8:	d83c      	bhi.n	5744 <_realloc_r+0xa4>
    56ca:	2210      	movs	r2, #16
    56cc:	4617      	mov	r7, r2
    56ce:	42be      	cmp	r6, r7
    56d0:	d83d      	bhi.n	574e <_realloc_r+0xae>
    56d2:	4294      	cmp	r4, r2
    56d4:	da43      	bge.n	575e <_realloc_r+0xbe>
    56d6:	4bc4      	ldr	r3, [pc, #784]	; (59e8 <_realloc_r+0x348>)
    56d8:	6899      	ldr	r1, [r3, #8]
    56da:	eb09 0004 	add.w	r0, r9, r4
    56de:	4288      	cmp	r0, r1
    56e0:	f000 80b4 	beq.w	584c <_realloc_r+0x1ac>
    56e4:	6843      	ldr	r3, [r0, #4]
    56e6:	f023 0101 	bic.w	r1, r3, #1
    56ea:	4401      	add	r1, r0
    56ec:	6849      	ldr	r1, [r1, #4]
    56ee:	07c9      	lsls	r1, r1, #31
    56f0:	d54c      	bpl.n	578c <_realloc_r+0xec>
    56f2:	f01e 0f01 	tst.w	lr, #1
    56f6:	f000 809b 	beq.w	5830 <_realloc_r+0x190>
    56fa:	4631      	mov	r1, r6
    56fc:	4640      	mov	r0, r8
    56fe:	f7ff fc43 	bl	4f88 <_malloc_r>
    5702:	4606      	mov	r6, r0
    5704:	2800      	cmp	r0, #0
    5706:	d03a      	beq.n	577e <_realloc_r+0xde>
    5708:	f855 3c04 	ldr.w	r3, [r5, #-4]
    570c:	f023 0301 	bic.w	r3, r3, #1
    5710:	444b      	add	r3, r9
    5712:	f1a0 0208 	sub.w	r2, r0, #8
    5716:	429a      	cmp	r2, r3
    5718:	f000 8121 	beq.w	595e <_realloc_r+0x2be>
    571c:	1f22      	subs	r2, r4, #4
    571e:	2a24      	cmp	r2, #36	; 0x24
    5720:	f200 8107 	bhi.w	5932 <_realloc_r+0x292>
    5724:	2a13      	cmp	r2, #19
    5726:	f200 80db 	bhi.w	58e0 <_realloc_r+0x240>
    572a:	4603      	mov	r3, r0
    572c:	462a      	mov	r2, r5
    572e:	6811      	ldr	r1, [r2, #0]
    5730:	6019      	str	r1, [r3, #0]
    5732:	6851      	ldr	r1, [r2, #4]
    5734:	6059      	str	r1, [r3, #4]
    5736:	6892      	ldr	r2, [r2, #8]
    5738:	609a      	str	r2, [r3, #8]
    573a:	4629      	mov	r1, r5
    573c:	4640      	mov	r0, r8
    573e:	f7ff f90d 	bl	495c <_free_r>
    5742:	e01c      	b.n	577e <_realloc_r+0xde>
    5744:	f027 0707 	bic.w	r7, r7, #7
    5748:	2f00      	cmp	r7, #0
    574a:	463a      	mov	r2, r7
    574c:	dabf      	bge.n	56ce <_realloc_r+0x2e>
    574e:	2600      	movs	r6, #0
    5750:	230c      	movs	r3, #12
    5752:	4630      	mov	r0, r6
    5754:	f8c8 3000 	str.w	r3, [r8]
    5758:	b003      	add	sp, #12
    575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    575e:	462e      	mov	r6, r5
    5760:	1be3      	subs	r3, r4, r7
    5762:	2b0f      	cmp	r3, #15
    5764:	d81e      	bhi.n	57a4 <_realloc_r+0x104>
    5766:	f8d9 3004 	ldr.w	r3, [r9, #4]
    576a:	f003 0301 	and.w	r3, r3, #1
    576e:	4323      	orrs	r3, r4
    5770:	444c      	add	r4, r9
    5772:	f8c9 3004 	str.w	r3, [r9, #4]
    5776:	6863      	ldr	r3, [r4, #4]
    5778:	f043 0301 	orr.w	r3, r3, #1
    577c:	6063      	str	r3, [r4, #4]
    577e:	4640      	mov	r0, r8
    5780:	f7ff ff88 	bl	5694 <__malloc_unlock>
    5784:	4630      	mov	r0, r6
    5786:	b003      	add	sp, #12
    5788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    578c:	f023 0303 	bic.w	r3, r3, #3
    5790:	18e1      	adds	r1, r4, r3
    5792:	4291      	cmp	r1, r2
    5794:	db1f      	blt.n	57d6 <_realloc_r+0x136>
    5796:	68c3      	ldr	r3, [r0, #12]
    5798:	6882      	ldr	r2, [r0, #8]
    579a:	462e      	mov	r6, r5
    579c:	60d3      	str	r3, [r2, #12]
    579e:	460c      	mov	r4, r1
    57a0:	609a      	str	r2, [r3, #8]
    57a2:	e7dd      	b.n	5760 <_realloc_r+0xc0>
    57a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    57a8:	eb09 0107 	add.w	r1, r9, r7
    57ac:	f002 0201 	and.w	r2, r2, #1
    57b0:	444c      	add	r4, r9
    57b2:	f043 0301 	orr.w	r3, r3, #1
    57b6:	4317      	orrs	r7, r2
    57b8:	f8c9 7004 	str.w	r7, [r9, #4]
    57bc:	604b      	str	r3, [r1, #4]
    57be:	6863      	ldr	r3, [r4, #4]
    57c0:	f043 0301 	orr.w	r3, r3, #1
    57c4:	3108      	adds	r1, #8
    57c6:	6063      	str	r3, [r4, #4]
    57c8:	4640      	mov	r0, r8
    57ca:	f7ff f8c7 	bl	495c <_free_r>
    57ce:	e7d6      	b.n	577e <_realloc_r+0xde>
    57d0:	4611      	mov	r1, r2
    57d2:	f7ff bbd9 	b.w	4f88 <_malloc_r>
    57d6:	f01e 0f01 	tst.w	lr, #1
    57da:	d18e      	bne.n	56fa <_realloc_r+0x5a>
    57dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
    57e0:	eba9 0a01 	sub.w	sl, r9, r1
    57e4:	f8da 1004 	ldr.w	r1, [sl, #4]
    57e8:	f021 0103 	bic.w	r1, r1, #3
    57ec:	440b      	add	r3, r1
    57ee:	4423      	add	r3, r4
    57f0:	4293      	cmp	r3, r2
    57f2:	db25      	blt.n	5840 <_realloc_r+0x1a0>
    57f4:	68c2      	ldr	r2, [r0, #12]
    57f6:	6881      	ldr	r1, [r0, #8]
    57f8:	4656      	mov	r6, sl
    57fa:	60ca      	str	r2, [r1, #12]
    57fc:	6091      	str	r1, [r2, #8]
    57fe:	f8da 100c 	ldr.w	r1, [sl, #12]
    5802:	f856 0f08 	ldr.w	r0, [r6, #8]!
    5806:	1f22      	subs	r2, r4, #4
    5808:	2a24      	cmp	r2, #36	; 0x24
    580a:	60c1      	str	r1, [r0, #12]
    580c:	6088      	str	r0, [r1, #8]
    580e:	f200 8094 	bhi.w	593a <_realloc_r+0x29a>
    5812:	2a13      	cmp	r2, #19
    5814:	d96f      	bls.n	58f6 <_realloc_r+0x256>
    5816:	6829      	ldr	r1, [r5, #0]
    5818:	f8ca 1008 	str.w	r1, [sl, #8]
    581c:	6869      	ldr	r1, [r5, #4]
    581e:	f8ca 100c 	str.w	r1, [sl, #12]
    5822:	2a1b      	cmp	r2, #27
    5824:	f200 80a2 	bhi.w	596c <_realloc_r+0x2cc>
    5828:	3508      	adds	r5, #8
    582a:	f10a 0210 	add.w	r2, sl, #16
    582e:	e063      	b.n	58f8 <_realloc_r+0x258>
    5830:	f855 3c08 	ldr.w	r3, [r5, #-8]
    5834:	eba9 0a03 	sub.w	sl, r9, r3
    5838:	f8da 1004 	ldr.w	r1, [sl, #4]
    583c:	f021 0103 	bic.w	r1, r1, #3
    5840:	1863      	adds	r3, r4, r1
    5842:	4293      	cmp	r3, r2
    5844:	f6ff af59 	blt.w	56fa <_realloc_r+0x5a>
    5848:	4656      	mov	r6, sl
    584a:	e7d8      	b.n	57fe <_realloc_r+0x15e>
    584c:	6841      	ldr	r1, [r0, #4]
    584e:	f021 0b03 	bic.w	fp, r1, #3
    5852:	44a3      	add	fp, r4
    5854:	f107 0010 	add.w	r0, r7, #16
    5858:	4583      	cmp	fp, r0
    585a:	da56      	bge.n	590a <_realloc_r+0x26a>
    585c:	f01e 0f01 	tst.w	lr, #1
    5860:	f47f af4b 	bne.w	56fa <_realloc_r+0x5a>
    5864:	f855 1c08 	ldr.w	r1, [r5, #-8]
    5868:	eba9 0a01 	sub.w	sl, r9, r1
    586c:	f8da 1004 	ldr.w	r1, [sl, #4]
    5870:	f021 0103 	bic.w	r1, r1, #3
    5874:	448b      	add	fp, r1
    5876:	4558      	cmp	r0, fp
    5878:	dce2      	bgt.n	5840 <_realloc_r+0x1a0>
    587a:	4656      	mov	r6, sl
    587c:	f8da 100c 	ldr.w	r1, [sl, #12]
    5880:	f856 0f08 	ldr.w	r0, [r6, #8]!
    5884:	1f22      	subs	r2, r4, #4
    5886:	2a24      	cmp	r2, #36	; 0x24
    5888:	60c1      	str	r1, [r0, #12]
    588a:	6088      	str	r0, [r1, #8]
    588c:	f200 808f 	bhi.w	59ae <_realloc_r+0x30e>
    5890:	2a13      	cmp	r2, #19
    5892:	f240 808a 	bls.w	59aa <_realloc_r+0x30a>
    5896:	6829      	ldr	r1, [r5, #0]
    5898:	f8ca 1008 	str.w	r1, [sl, #8]
    589c:	6869      	ldr	r1, [r5, #4]
    589e:	f8ca 100c 	str.w	r1, [sl, #12]
    58a2:	2a1b      	cmp	r2, #27
    58a4:	f200 808a 	bhi.w	59bc <_realloc_r+0x31c>
    58a8:	3508      	adds	r5, #8
    58aa:	f10a 0210 	add.w	r2, sl, #16
    58ae:	6829      	ldr	r1, [r5, #0]
    58b0:	6011      	str	r1, [r2, #0]
    58b2:	6869      	ldr	r1, [r5, #4]
    58b4:	6051      	str	r1, [r2, #4]
    58b6:	68a9      	ldr	r1, [r5, #8]
    58b8:	6091      	str	r1, [r2, #8]
    58ba:	eb0a 0107 	add.w	r1, sl, r7
    58be:	ebab 0207 	sub.w	r2, fp, r7
    58c2:	f042 0201 	orr.w	r2, r2, #1
    58c6:	6099      	str	r1, [r3, #8]
    58c8:	604a      	str	r2, [r1, #4]
    58ca:	f8da 3004 	ldr.w	r3, [sl, #4]
    58ce:	f003 0301 	and.w	r3, r3, #1
    58d2:	431f      	orrs	r7, r3
    58d4:	4640      	mov	r0, r8
    58d6:	f8ca 7004 	str.w	r7, [sl, #4]
    58da:	f7ff fedb 	bl	5694 <__malloc_unlock>
    58de:	e751      	b.n	5784 <_realloc_r+0xe4>
    58e0:	682b      	ldr	r3, [r5, #0]
    58e2:	6003      	str	r3, [r0, #0]
    58e4:	686b      	ldr	r3, [r5, #4]
    58e6:	6043      	str	r3, [r0, #4]
    58e8:	2a1b      	cmp	r2, #27
    58ea:	d82d      	bhi.n	5948 <_realloc_r+0x2a8>
    58ec:	f100 0308 	add.w	r3, r0, #8
    58f0:	f105 0208 	add.w	r2, r5, #8
    58f4:	e71b      	b.n	572e <_realloc_r+0x8e>
    58f6:	4632      	mov	r2, r6
    58f8:	6829      	ldr	r1, [r5, #0]
    58fa:	6011      	str	r1, [r2, #0]
    58fc:	6869      	ldr	r1, [r5, #4]
    58fe:	6051      	str	r1, [r2, #4]
    5900:	68a9      	ldr	r1, [r5, #8]
    5902:	6091      	str	r1, [r2, #8]
    5904:	461c      	mov	r4, r3
    5906:	46d1      	mov	r9, sl
    5908:	e72a      	b.n	5760 <_realloc_r+0xc0>
    590a:	eb09 0107 	add.w	r1, r9, r7
    590e:	ebab 0b07 	sub.w	fp, fp, r7
    5912:	f04b 0201 	orr.w	r2, fp, #1
    5916:	6099      	str	r1, [r3, #8]
    5918:	604a      	str	r2, [r1, #4]
    591a:	f855 3c04 	ldr.w	r3, [r5, #-4]
    591e:	f003 0301 	and.w	r3, r3, #1
    5922:	431f      	orrs	r7, r3
    5924:	4640      	mov	r0, r8
    5926:	f845 7c04 	str.w	r7, [r5, #-4]
    592a:	f7ff feb3 	bl	5694 <__malloc_unlock>
    592e:	462e      	mov	r6, r5
    5930:	e728      	b.n	5784 <_realloc_r+0xe4>
    5932:	4629      	mov	r1, r5
    5934:	f7ff fe44 	bl	55c0 <memmove>
    5938:	e6ff      	b.n	573a <_realloc_r+0x9a>
    593a:	4629      	mov	r1, r5
    593c:	4630      	mov	r0, r6
    593e:	461c      	mov	r4, r3
    5940:	46d1      	mov	r9, sl
    5942:	f7ff fe3d 	bl	55c0 <memmove>
    5946:	e70b      	b.n	5760 <_realloc_r+0xc0>
    5948:	68ab      	ldr	r3, [r5, #8]
    594a:	6083      	str	r3, [r0, #8]
    594c:	68eb      	ldr	r3, [r5, #12]
    594e:	60c3      	str	r3, [r0, #12]
    5950:	2a24      	cmp	r2, #36	; 0x24
    5952:	d017      	beq.n	5984 <_realloc_r+0x2e4>
    5954:	f100 0310 	add.w	r3, r0, #16
    5958:	f105 0210 	add.w	r2, r5, #16
    595c:	e6e7      	b.n	572e <_realloc_r+0x8e>
    595e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5962:	f023 0303 	bic.w	r3, r3, #3
    5966:	441c      	add	r4, r3
    5968:	462e      	mov	r6, r5
    596a:	e6f9      	b.n	5760 <_realloc_r+0xc0>
    596c:	68a9      	ldr	r1, [r5, #8]
    596e:	f8ca 1010 	str.w	r1, [sl, #16]
    5972:	68e9      	ldr	r1, [r5, #12]
    5974:	f8ca 1014 	str.w	r1, [sl, #20]
    5978:	2a24      	cmp	r2, #36	; 0x24
    597a:	d00c      	beq.n	5996 <_realloc_r+0x2f6>
    597c:	3510      	adds	r5, #16
    597e:	f10a 0218 	add.w	r2, sl, #24
    5982:	e7b9      	b.n	58f8 <_realloc_r+0x258>
    5984:	692b      	ldr	r3, [r5, #16]
    5986:	6103      	str	r3, [r0, #16]
    5988:	696b      	ldr	r3, [r5, #20]
    598a:	6143      	str	r3, [r0, #20]
    598c:	f105 0218 	add.w	r2, r5, #24
    5990:	f100 0318 	add.w	r3, r0, #24
    5994:	e6cb      	b.n	572e <_realloc_r+0x8e>
    5996:	692a      	ldr	r2, [r5, #16]
    5998:	f8ca 2018 	str.w	r2, [sl, #24]
    599c:	696a      	ldr	r2, [r5, #20]
    599e:	f8ca 201c 	str.w	r2, [sl, #28]
    59a2:	3518      	adds	r5, #24
    59a4:	f10a 0220 	add.w	r2, sl, #32
    59a8:	e7a6      	b.n	58f8 <_realloc_r+0x258>
    59aa:	4632      	mov	r2, r6
    59ac:	e77f      	b.n	58ae <_realloc_r+0x20e>
    59ae:	4629      	mov	r1, r5
    59b0:	4630      	mov	r0, r6
    59b2:	9301      	str	r3, [sp, #4]
    59b4:	f7ff fe04 	bl	55c0 <memmove>
    59b8:	9b01      	ldr	r3, [sp, #4]
    59ba:	e77e      	b.n	58ba <_realloc_r+0x21a>
    59bc:	68a9      	ldr	r1, [r5, #8]
    59be:	f8ca 1010 	str.w	r1, [sl, #16]
    59c2:	68e9      	ldr	r1, [r5, #12]
    59c4:	f8ca 1014 	str.w	r1, [sl, #20]
    59c8:	2a24      	cmp	r2, #36	; 0x24
    59ca:	d003      	beq.n	59d4 <_realloc_r+0x334>
    59cc:	3510      	adds	r5, #16
    59ce:	f10a 0218 	add.w	r2, sl, #24
    59d2:	e76c      	b.n	58ae <_realloc_r+0x20e>
    59d4:	692a      	ldr	r2, [r5, #16]
    59d6:	f8ca 2018 	str.w	r2, [sl, #24]
    59da:	696a      	ldr	r2, [r5, #20]
    59dc:	f8ca 201c 	str.w	r2, [sl, #28]
    59e0:	3518      	adds	r5, #24
    59e2:	f10a 0220 	add.w	r2, sl, #32
    59e6:	e762      	b.n	58ae <_realloc_r+0x20e>
    59e8:	200006a8 	.word	0x200006a8

000059ec <_sbrk_r>:
    59ec:	b538      	push	{r3, r4, r5, lr}
    59ee:	4c07      	ldr	r4, [pc, #28]	; (5a0c <_sbrk_r+0x20>)
    59f0:	2300      	movs	r3, #0
    59f2:	4605      	mov	r5, r0
    59f4:	4608      	mov	r0, r1
    59f6:	6023      	str	r3, [r4, #0]
    59f8:	f7fd fb62 	bl	30c0 <_sbrk>
    59fc:	1c43      	adds	r3, r0, #1
    59fe:	d000      	beq.n	5a02 <_sbrk_r+0x16>
    5a00:	bd38      	pop	{r3, r4, r5, pc}
    5a02:	6823      	ldr	r3, [r4, #0]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d0fb      	beq.n	5a00 <_sbrk_r+0x14>
    5a08:	602b      	str	r3, [r5, #0]
    5a0a:	bd38      	pop	{r3, r4, r5, pc}
    5a0c:	20000e4c 	.word	0x20000e4c

00005a10 <__sread>:
    5a10:	b510      	push	{r4, lr}
    5a12:	460c      	mov	r4, r1
    5a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a18:	f000 fa78 	bl	5f0c <_read_r>
    5a1c:	2800      	cmp	r0, #0
    5a1e:	db03      	blt.n	5a28 <__sread+0x18>
    5a20:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5a22:	4403      	add	r3, r0
    5a24:	6523      	str	r3, [r4, #80]	; 0x50
    5a26:	bd10      	pop	{r4, pc}
    5a28:	89a3      	ldrh	r3, [r4, #12]
    5a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5a2e:	81a3      	strh	r3, [r4, #12]
    5a30:	bd10      	pop	{r4, pc}
    5a32:	bf00      	nop

00005a34 <__swrite>:
    5a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a38:	4616      	mov	r6, r2
    5a3a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    5a3e:	461f      	mov	r7, r3
    5a40:	05d3      	lsls	r3, r2, #23
    5a42:	460c      	mov	r4, r1
    5a44:	4605      	mov	r5, r0
    5a46:	d507      	bpl.n	5a58 <__swrite+0x24>
    5a48:	2200      	movs	r2, #0
    5a4a:	2302      	movs	r3, #2
    5a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a50:	f000 fa46 	bl	5ee0 <_lseek_r>
    5a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    5a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5a5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    5a60:	81a2      	strh	r2, [r4, #12]
    5a62:	463b      	mov	r3, r7
    5a64:	4632      	mov	r2, r6
    5a66:	4628      	mov	r0, r5
    5a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a6c:	f000 b926 	b.w	5cbc <_write_r>

00005a70 <__sseek>:
    5a70:	b510      	push	{r4, lr}
    5a72:	460c      	mov	r4, r1
    5a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a78:	f000 fa32 	bl	5ee0 <_lseek_r>
    5a7c:	89a3      	ldrh	r3, [r4, #12]
    5a7e:	1c42      	adds	r2, r0, #1
    5a80:	bf0e      	itee	eq
    5a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5a8a:	6520      	strne	r0, [r4, #80]	; 0x50
    5a8c:	81a3      	strh	r3, [r4, #12]
    5a8e:	bd10      	pop	{r4, pc}

00005a90 <__sclose>:
    5a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5a94:	f000 b98a 	b.w	5dac <_close_r>
	...

00005ac0 <strlen>:
    5ac0:	f890 f000 	pld	[r0]
    5ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5ac8:	f020 0107 	bic.w	r1, r0, #7
    5acc:	f06f 0c00 	mvn.w	ip, #0
    5ad0:	f010 0407 	ands.w	r4, r0, #7
    5ad4:	f891 f020 	pld	[r1, #32]
    5ad8:	f040 8049 	bne.w	5b6e <strlen+0xae>
    5adc:	f04f 0400 	mov.w	r4, #0
    5ae0:	f06f 0007 	mvn.w	r0, #7
    5ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
    5ae8:	f891 f040 	pld	[r1, #64]	; 0x40
    5aec:	f100 0008 	add.w	r0, r0, #8
    5af0:	fa82 f24c 	uadd8	r2, r2, ip
    5af4:	faa4 f28c 	sel	r2, r4, ip
    5af8:	fa83 f34c 	uadd8	r3, r3, ip
    5afc:	faa2 f38c 	sel	r3, r2, ip
    5b00:	bb4b      	cbnz	r3, 5b56 <strlen+0x96>
    5b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5b06:	fa82 f24c 	uadd8	r2, r2, ip
    5b0a:	f100 0008 	add.w	r0, r0, #8
    5b0e:	faa4 f28c 	sel	r2, r4, ip
    5b12:	fa83 f34c 	uadd8	r3, r3, ip
    5b16:	faa2 f38c 	sel	r3, r2, ip
    5b1a:	b9e3      	cbnz	r3, 5b56 <strlen+0x96>
    5b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5b20:	fa82 f24c 	uadd8	r2, r2, ip
    5b24:	f100 0008 	add.w	r0, r0, #8
    5b28:	faa4 f28c 	sel	r2, r4, ip
    5b2c:	fa83 f34c 	uadd8	r3, r3, ip
    5b30:	faa2 f38c 	sel	r3, r2, ip
    5b34:	b97b      	cbnz	r3, 5b56 <strlen+0x96>
    5b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    5b3a:	f101 0120 	add.w	r1, r1, #32
    5b3e:	fa82 f24c 	uadd8	r2, r2, ip
    5b42:	f100 0008 	add.w	r0, r0, #8
    5b46:	faa4 f28c 	sel	r2, r4, ip
    5b4a:	fa83 f34c 	uadd8	r3, r3, ip
    5b4e:	faa2 f38c 	sel	r3, r2, ip
    5b52:	2b00      	cmp	r3, #0
    5b54:	d0c6      	beq.n	5ae4 <strlen+0x24>
    5b56:	2a00      	cmp	r2, #0
    5b58:	bf04      	itt	eq
    5b5a:	3004      	addeq	r0, #4
    5b5c:	461a      	moveq	r2, r3
    5b5e:	ba12      	rev	r2, r2
    5b60:	fab2 f282 	clz	r2, r2
    5b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    5b6c:	4770      	bx	lr
    5b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5b72:	f004 0503 	and.w	r5, r4, #3
    5b76:	f1c4 0000 	rsb	r0, r4, #0
    5b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5b7e:	f014 0f04 	tst.w	r4, #4
    5b82:	f891 f040 	pld	[r1, #64]	; 0x40
    5b86:	fa0c f505 	lsl.w	r5, ip, r5
    5b8a:	ea62 0205 	orn	r2, r2, r5
    5b8e:	bf1c      	itt	ne
    5b90:	ea63 0305 	ornne	r3, r3, r5
    5b94:	4662      	movne	r2, ip
    5b96:	f04f 0400 	mov.w	r4, #0
    5b9a:	e7a9      	b.n	5af0 <strlen+0x30>

00005b9c <__swbuf_r>:
    5b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b9e:	460d      	mov	r5, r1
    5ba0:	4614      	mov	r4, r2
    5ba2:	4606      	mov	r6, r0
    5ba4:	b110      	cbz	r0, 5bac <__swbuf_r+0x10>
    5ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d04b      	beq.n	5c44 <__swbuf_r+0xa8>
    5bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    5bb0:	69a3      	ldr	r3, [r4, #24]
    5bb2:	60a3      	str	r3, [r4, #8]
    5bb4:	b291      	uxth	r1, r2
    5bb6:	0708      	lsls	r0, r1, #28
    5bb8:	d539      	bpl.n	5c2e <__swbuf_r+0x92>
    5bba:	6923      	ldr	r3, [r4, #16]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d036      	beq.n	5c2e <__swbuf_r+0x92>
    5bc0:	b2ed      	uxtb	r5, r5
    5bc2:	0489      	lsls	r1, r1, #18
    5bc4:	462f      	mov	r7, r5
    5bc6:	d515      	bpl.n	5bf4 <__swbuf_r+0x58>
    5bc8:	6822      	ldr	r2, [r4, #0]
    5bca:	6961      	ldr	r1, [r4, #20]
    5bcc:	1ad3      	subs	r3, r2, r3
    5bce:	428b      	cmp	r3, r1
    5bd0:	da1c      	bge.n	5c0c <__swbuf_r+0x70>
    5bd2:	3301      	adds	r3, #1
    5bd4:	68a1      	ldr	r1, [r4, #8]
    5bd6:	1c50      	adds	r0, r2, #1
    5bd8:	3901      	subs	r1, #1
    5bda:	60a1      	str	r1, [r4, #8]
    5bdc:	6020      	str	r0, [r4, #0]
    5bde:	7015      	strb	r5, [r2, #0]
    5be0:	6962      	ldr	r2, [r4, #20]
    5be2:	429a      	cmp	r2, r3
    5be4:	d01a      	beq.n	5c1c <__swbuf_r+0x80>
    5be6:	89a3      	ldrh	r3, [r4, #12]
    5be8:	07db      	lsls	r3, r3, #31
    5bea:	d501      	bpl.n	5bf0 <__swbuf_r+0x54>
    5bec:	2d0a      	cmp	r5, #10
    5bee:	d015      	beq.n	5c1c <__swbuf_r+0x80>
    5bf0:	4638      	mov	r0, r7
    5bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    5bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    5bfa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    5bfe:	81a2      	strh	r2, [r4, #12]
    5c00:	6822      	ldr	r2, [r4, #0]
    5c02:	6661      	str	r1, [r4, #100]	; 0x64
    5c04:	6961      	ldr	r1, [r4, #20]
    5c06:	1ad3      	subs	r3, r2, r3
    5c08:	428b      	cmp	r3, r1
    5c0a:	dbe2      	blt.n	5bd2 <__swbuf_r+0x36>
    5c0c:	4621      	mov	r1, r4
    5c0e:	4630      	mov	r0, r6
    5c10:	f7fe fd26 	bl	4660 <_fflush_r>
    5c14:	b940      	cbnz	r0, 5c28 <__swbuf_r+0x8c>
    5c16:	6822      	ldr	r2, [r4, #0]
    5c18:	2301      	movs	r3, #1
    5c1a:	e7db      	b.n	5bd4 <__swbuf_r+0x38>
    5c1c:	4621      	mov	r1, r4
    5c1e:	4630      	mov	r0, r6
    5c20:	f7fe fd1e 	bl	4660 <_fflush_r>
    5c24:	2800      	cmp	r0, #0
    5c26:	d0e3      	beq.n	5bf0 <__swbuf_r+0x54>
    5c28:	f04f 37ff 	mov.w	r7, #4294967295
    5c2c:	e7e0      	b.n	5bf0 <__swbuf_r+0x54>
    5c2e:	4621      	mov	r1, r4
    5c30:	4630      	mov	r0, r6
    5c32:	f7fe fc01 	bl	4438 <__swsetup_r>
    5c36:	2800      	cmp	r0, #0
    5c38:	d1f6      	bne.n	5c28 <__swbuf_r+0x8c>
    5c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    5c3e:	6923      	ldr	r3, [r4, #16]
    5c40:	b291      	uxth	r1, r2
    5c42:	e7bd      	b.n	5bc0 <__swbuf_r+0x24>
    5c44:	f7fe fd64 	bl	4710 <__sinit>
    5c48:	e7b0      	b.n	5bac <__swbuf_r+0x10>
    5c4a:	bf00      	nop

00005c4c <_wcrtomb_r>:
    5c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4e:	4606      	mov	r6, r0
    5c50:	b085      	sub	sp, #20
    5c52:	461f      	mov	r7, r3
    5c54:	b189      	cbz	r1, 5c7a <_wcrtomb_r+0x2e>
    5c56:	4c10      	ldr	r4, [pc, #64]	; (5c98 <_wcrtomb_r+0x4c>)
    5c58:	4d10      	ldr	r5, [pc, #64]	; (5c9c <_wcrtomb_r+0x50>)
    5c5a:	6824      	ldr	r4, [r4, #0]
    5c5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    5c5e:	2c00      	cmp	r4, #0
    5c60:	bf08      	it	eq
    5c62:	462c      	moveq	r4, r5
    5c64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    5c68:	47a0      	blx	r4
    5c6a:	1c43      	adds	r3, r0, #1
    5c6c:	d103      	bne.n	5c76 <_wcrtomb_r+0x2a>
    5c6e:	2200      	movs	r2, #0
    5c70:	238a      	movs	r3, #138	; 0x8a
    5c72:	603a      	str	r2, [r7, #0]
    5c74:	6033      	str	r3, [r6, #0]
    5c76:	b005      	add	sp, #20
    5c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7a:	460c      	mov	r4, r1
    5c7c:	4906      	ldr	r1, [pc, #24]	; (5c98 <_wcrtomb_r+0x4c>)
    5c7e:	4a07      	ldr	r2, [pc, #28]	; (5c9c <_wcrtomb_r+0x50>)
    5c80:	6809      	ldr	r1, [r1, #0]
    5c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5c84:	2900      	cmp	r1, #0
    5c86:	bf08      	it	eq
    5c88:	4611      	moveq	r1, r2
    5c8a:	4622      	mov	r2, r4
    5c8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
    5c90:	a901      	add	r1, sp, #4
    5c92:	47a0      	blx	r4
    5c94:	e7e9      	b.n	5c6a <_wcrtomb_r+0x1e>
    5c96:	bf00      	nop
    5c98:	20000108 	.word	0x20000108
    5c9c:	2000053c 	.word	0x2000053c

00005ca0 <__ascii_wctomb>:
    5ca0:	b121      	cbz	r1, 5cac <__ascii_wctomb+0xc>
    5ca2:	2aff      	cmp	r2, #255	; 0xff
    5ca4:	d804      	bhi.n	5cb0 <__ascii_wctomb+0x10>
    5ca6:	700a      	strb	r2, [r1, #0]
    5ca8:	2001      	movs	r0, #1
    5caa:	4770      	bx	lr
    5cac:	4608      	mov	r0, r1
    5cae:	4770      	bx	lr
    5cb0:	238a      	movs	r3, #138	; 0x8a
    5cb2:	6003      	str	r3, [r0, #0]
    5cb4:	f04f 30ff 	mov.w	r0, #4294967295
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop

00005cbc <_write_r>:
    5cbc:	b570      	push	{r4, r5, r6, lr}
    5cbe:	460d      	mov	r5, r1
    5cc0:	4c08      	ldr	r4, [pc, #32]	; (5ce4 <_write_r+0x28>)
    5cc2:	4611      	mov	r1, r2
    5cc4:	4606      	mov	r6, r0
    5cc6:	461a      	mov	r2, r3
    5cc8:	4628      	mov	r0, r5
    5cca:	2300      	movs	r3, #0
    5ccc:	6023      	str	r3, [r4, #0]
    5cce:	f000 fac3 	bl	6258 <_write>
    5cd2:	1c43      	adds	r3, r0, #1
    5cd4:	d000      	beq.n	5cd8 <_write_r+0x1c>
    5cd6:	bd70      	pop	{r4, r5, r6, pc}
    5cd8:	6823      	ldr	r3, [r4, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d0fb      	beq.n	5cd6 <_write_r+0x1a>
    5cde:	6033      	str	r3, [r6, #0]
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
    5ce2:	bf00      	nop
    5ce4:	20000e4c 	.word	0x20000e4c

00005ce8 <__register_exitproc>:
    5ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cec:	4d2c      	ldr	r5, [pc, #176]	; (5da0 <__register_exitproc+0xb8>)
    5cee:	4606      	mov	r6, r0
    5cf0:	6828      	ldr	r0, [r5, #0]
    5cf2:	4698      	mov	r8, r3
    5cf4:	460f      	mov	r7, r1
    5cf6:	4691      	mov	r9, r2
    5cf8:	f7ff f8ca 	bl	4e90 <__retarget_lock_acquire_recursive>
    5cfc:	4b29      	ldr	r3, [pc, #164]	; (5da4 <__register_exitproc+0xbc>)
    5cfe:	681c      	ldr	r4, [r3, #0]
    5d00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    5d04:	2b00      	cmp	r3, #0
    5d06:	d03e      	beq.n	5d86 <__register_exitproc+0x9e>
    5d08:	685a      	ldr	r2, [r3, #4]
    5d0a:	2a1f      	cmp	r2, #31
    5d0c:	dc1c      	bgt.n	5d48 <__register_exitproc+0x60>
    5d0e:	f102 0e01 	add.w	lr, r2, #1
    5d12:	b176      	cbz	r6, 5d32 <__register_exitproc+0x4a>
    5d14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5d18:	2401      	movs	r4, #1
    5d1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    5d1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    5d22:	4094      	lsls	r4, r2
    5d24:	4320      	orrs	r0, r4
    5d26:	2e02      	cmp	r6, #2
    5d28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    5d2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5d30:	d023      	beq.n	5d7a <__register_exitproc+0x92>
    5d32:	3202      	adds	r2, #2
    5d34:	f8c3 e004 	str.w	lr, [r3, #4]
    5d38:	6828      	ldr	r0, [r5, #0]
    5d3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    5d3e:	f7ff f8a9 	bl	4e94 <__retarget_lock_release_recursive>
    5d42:	2000      	movs	r0, #0
    5d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d48:	4b17      	ldr	r3, [pc, #92]	; (5da8 <__register_exitproc+0xc0>)
    5d4a:	b30b      	cbz	r3, 5d90 <__register_exitproc+0xa8>
    5d4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5d50:	f3af 8000 	nop.w
    5d54:	4603      	mov	r3, r0
    5d56:	b1d8      	cbz	r0, 5d90 <__register_exitproc+0xa8>
    5d58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    5d5c:	6002      	str	r2, [r0, #0]
    5d5e:	2100      	movs	r1, #0
    5d60:	6041      	str	r1, [r0, #4]
    5d62:	460a      	mov	r2, r1
    5d64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5d68:	f04f 0e01 	mov.w	lr, #1
    5d6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5d70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    5d74:	2e00      	cmp	r6, #0
    5d76:	d0dc      	beq.n	5d32 <__register_exitproc+0x4a>
    5d78:	e7cc      	b.n	5d14 <__register_exitproc+0x2c>
    5d7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    5d7e:	430c      	orrs	r4, r1
    5d80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    5d84:	e7d5      	b.n	5d32 <__register_exitproc+0x4a>
    5d86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    5d8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    5d8e:	e7bb      	b.n	5d08 <__register_exitproc+0x20>
    5d90:	6828      	ldr	r0, [r5, #0]
    5d92:	f7ff f87f 	bl	4e94 <__retarget_lock_release_recursive>
    5d96:	f04f 30ff 	mov.w	r0, #4294967295
    5d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d9e:	bf00      	nop
    5da0:	20000538 	.word	0x20000538
    5da4:	00006284 	.word	0x00006284
    5da8:	00000000 	.word	0x00000000

00005dac <_close_r>:
    5dac:	b538      	push	{r3, r4, r5, lr}
    5dae:	4c07      	ldr	r4, [pc, #28]	; (5dcc <_close_r+0x20>)
    5db0:	2300      	movs	r3, #0
    5db2:	4605      	mov	r5, r0
    5db4:	4608      	mov	r0, r1
    5db6:	6023      	str	r3, [r4, #0]
    5db8:	f7fd f99e 	bl	30f8 <_close>
    5dbc:	1c43      	adds	r3, r0, #1
    5dbe:	d000      	beq.n	5dc2 <_close_r+0x16>
    5dc0:	bd38      	pop	{r3, r4, r5, pc}
    5dc2:	6823      	ldr	r3, [r4, #0]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d0fb      	beq.n	5dc0 <_close_r+0x14>
    5dc8:	602b      	str	r3, [r5, #0]
    5dca:	bd38      	pop	{r3, r4, r5, pc}
    5dcc:	20000e4c 	.word	0x20000e4c

00005dd0 <_fclose_r>:
    5dd0:	b570      	push	{r4, r5, r6, lr}
    5dd2:	b159      	cbz	r1, 5dec <_fclose_r+0x1c>
    5dd4:	4605      	mov	r5, r0
    5dd6:	460c      	mov	r4, r1
    5dd8:	b110      	cbz	r0, 5de0 <_fclose_r+0x10>
    5dda:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d03c      	beq.n	5e5a <_fclose_r+0x8a>
    5de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5de2:	07d8      	lsls	r0, r3, #31
    5de4:	d505      	bpl.n	5df2 <_fclose_r+0x22>
    5de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5dea:	b92b      	cbnz	r3, 5df8 <_fclose_r+0x28>
    5dec:	2600      	movs	r6, #0
    5dee:	4630      	mov	r0, r6
    5df0:	bd70      	pop	{r4, r5, r6, pc}
    5df2:	89a3      	ldrh	r3, [r4, #12]
    5df4:	0599      	lsls	r1, r3, #22
    5df6:	d53c      	bpl.n	5e72 <_fclose_r+0xa2>
    5df8:	4621      	mov	r1, r4
    5dfa:	4628      	mov	r0, r5
    5dfc:	f7fe fb90 	bl	4520 <__sflush_r>
    5e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5e02:	4606      	mov	r6, r0
    5e04:	b133      	cbz	r3, 5e14 <_fclose_r+0x44>
    5e06:	69e1      	ldr	r1, [r4, #28]
    5e08:	4628      	mov	r0, r5
    5e0a:	4798      	blx	r3
    5e0c:	2800      	cmp	r0, #0
    5e0e:	bfb8      	it	lt
    5e10:	f04f 36ff 	movlt.w	r6, #4294967295
    5e14:	89a3      	ldrh	r3, [r4, #12]
    5e16:	061a      	lsls	r2, r3, #24
    5e18:	d422      	bmi.n	5e60 <_fclose_r+0x90>
    5e1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5e1c:	b141      	cbz	r1, 5e30 <_fclose_r+0x60>
    5e1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5e22:	4299      	cmp	r1, r3
    5e24:	d002      	beq.n	5e2c <_fclose_r+0x5c>
    5e26:	4628      	mov	r0, r5
    5e28:	f7fe fd98 	bl	495c <_free_r>
    5e2c:	2300      	movs	r3, #0
    5e2e:	6323      	str	r3, [r4, #48]	; 0x30
    5e30:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5e32:	b121      	cbz	r1, 5e3e <_fclose_r+0x6e>
    5e34:	4628      	mov	r0, r5
    5e36:	f7fe fd91 	bl	495c <_free_r>
    5e3a:	2300      	movs	r3, #0
    5e3c:	6463      	str	r3, [r4, #68]	; 0x44
    5e3e:	f7fe fc93 	bl	4768 <__sfp_lock_acquire>
    5e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5e44:	2200      	movs	r2, #0
    5e46:	07db      	lsls	r3, r3, #31
    5e48:	81a2      	strh	r2, [r4, #12]
    5e4a:	d50e      	bpl.n	5e6a <_fclose_r+0x9a>
    5e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e4e:	f7ff f81d 	bl	4e8c <__retarget_lock_close_recursive>
    5e52:	f7fe fc8f 	bl	4774 <__sfp_lock_release>
    5e56:	4630      	mov	r0, r6
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	f7fe fc59 	bl	4710 <__sinit>
    5e5e:	e7bf      	b.n	5de0 <_fclose_r+0x10>
    5e60:	6921      	ldr	r1, [r4, #16]
    5e62:	4628      	mov	r0, r5
    5e64:	f7fe fd7a 	bl	495c <_free_r>
    5e68:	e7d7      	b.n	5e1a <_fclose_r+0x4a>
    5e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e6c:	f7ff f812 	bl	4e94 <__retarget_lock_release_recursive>
    5e70:	e7ec      	b.n	5e4c <_fclose_r+0x7c>
    5e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e74:	f7ff f80c 	bl	4e90 <__retarget_lock_acquire_recursive>
    5e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d1bb      	bne.n	5df8 <_fclose_r+0x28>
    5e80:	6e66      	ldr	r6, [r4, #100]	; 0x64
    5e82:	f016 0601 	ands.w	r6, r6, #1
    5e86:	d1b1      	bne.n	5dec <_fclose_r+0x1c>
    5e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e8a:	f7ff f803 	bl	4e94 <__retarget_lock_release_recursive>
    5e8e:	4630      	mov	r0, r6
    5e90:	bd70      	pop	{r4, r5, r6, pc}
    5e92:	bf00      	nop

00005e94 <_fstat_r>:
    5e94:	b538      	push	{r3, r4, r5, lr}
    5e96:	460b      	mov	r3, r1
    5e98:	4c07      	ldr	r4, [pc, #28]	; (5eb8 <_fstat_r+0x24>)
    5e9a:	4605      	mov	r5, r0
    5e9c:	4611      	mov	r1, r2
    5e9e:	4618      	mov	r0, r3
    5ea0:	2300      	movs	r3, #0
    5ea2:	6023      	str	r3, [r4, #0]
    5ea4:	f7fd f92b 	bl	30fe <_fstat>
    5ea8:	1c43      	adds	r3, r0, #1
    5eaa:	d000      	beq.n	5eae <_fstat_r+0x1a>
    5eac:	bd38      	pop	{r3, r4, r5, pc}
    5eae:	6823      	ldr	r3, [r4, #0]
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	d0fb      	beq.n	5eac <_fstat_r+0x18>
    5eb4:	602b      	str	r3, [r5, #0]
    5eb6:	bd38      	pop	{r3, r4, r5, pc}
    5eb8:	20000e4c 	.word	0x20000e4c

00005ebc <_isatty_r>:
    5ebc:	b538      	push	{r3, r4, r5, lr}
    5ebe:	4c07      	ldr	r4, [pc, #28]	; (5edc <_isatty_r+0x20>)
    5ec0:	2300      	movs	r3, #0
    5ec2:	4605      	mov	r5, r0
    5ec4:	4608      	mov	r0, r1
    5ec6:	6023      	str	r3, [r4, #0]
    5ec8:	f7fd f91e 	bl	3108 <_isatty>
    5ecc:	1c43      	adds	r3, r0, #1
    5ece:	d000      	beq.n	5ed2 <_isatty_r+0x16>
    5ed0:	bd38      	pop	{r3, r4, r5, pc}
    5ed2:	6823      	ldr	r3, [r4, #0]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d0fb      	beq.n	5ed0 <_isatty_r+0x14>
    5ed8:	602b      	str	r3, [r5, #0]
    5eda:	bd38      	pop	{r3, r4, r5, pc}
    5edc:	20000e4c 	.word	0x20000e4c

00005ee0 <_lseek_r>:
    5ee0:	b570      	push	{r4, r5, r6, lr}
    5ee2:	460d      	mov	r5, r1
    5ee4:	4c08      	ldr	r4, [pc, #32]	; (5f08 <_lseek_r+0x28>)
    5ee6:	4611      	mov	r1, r2
    5ee8:	4606      	mov	r6, r0
    5eea:	461a      	mov	r2, r3
    5eec:	4628      	mov	r0, r5
    5eee:	2300      	movs	r3, #0
    5ef0:	6023      	str	r3, [r4, #0]
    5ef2:	f7fd f90b 	bl	310c <_lseek>
    5ef6:	1c43      	adds	r3, r0, #1
    5ef8:	d000      	beq.n	5efc <_lseek_r+0x1c>
    5efa:	bd70      	pop	{r4, r5, r6, pc}
    5efc:	6823      	ldr	r3, [r4, #0]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d0fb      	beq.n	5efa <_lseek_r+0x1a>
    5f02:	6033      	str	r3, [r6, #0]
    5f04:	bd70      	pop	{r4, r5, r6, pc}
    5f06:	bf00      	nop
    5f08:	20000e4c 	.word	0x20000e4c

00005f0c <_read_r>:
    5f0c:	b570      	push	{r4, r5, r6, lr}
    5f0e:	460d      	mov	r5, r1
    5f10:	4c08      	ldr	r4, [pc, #32]	; (5f34 <_read_r+0x28>)
    5f12:	4611      	mov	r1, r2
    5f14:	4606      	mov	r6, r0
    5f16:	461a      	mov	r2, r3
    5f18:	4628      	mov	r0, r5
    5f1a:	2300      	movs	r3, #0
    5f1c:	6023      	str	r3, [r4, #0]
    5f1e:	f000 f993 	bl	6248 <_read>
    5f22:	1c43      	adds	r3, r0, #1
    5f24:	d000      	beq.n	5f28 <_read_r+0x1c>
    5f26:	bd70      	pop	{r4, r5, r6, pc}
    5f28:	6823      	ldr	r3, [r4, #0]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d0fb      	beq.n	5f26 <_read_r+0x1a>
    5f2e:	6033      	str	r3, [r6, #0]
    5f30:	bd70      	pop	{r4, r5, r6, pc}
    5f32:	bf00      	nop
    5f34:	20000e4c 	.word	0x20000e4c

00005f38 <__aeabi_uldivmod>:
    5f38:	b953      	cbnz	r3, 5f50 <__aeabi_uldivmod+0x18>
    5f3a:	b94a      	cbnz	r2, 5f50 <__aeabi_uldivmod+0x18>
    5f3c:	2900      	cmp	r1, #0
    5f3e:	bf08      	it	eq
    5f40:	2800      	cmpeq	r0, #0
    5f42:	bf1c      	itt	ne
    5f44:	f04f 31ff 	movne.w	r1, #4294967295
    5f48:	f04f 30ff 	movne.w	r0, #4294967295
    5f4c:	f000 b97a 	b.w	6244 <__aeabi_idiv0>
    5f50:	f1ad 0c08 	sub.w	ip, sp, #8
    5f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5f58:	f000 f806 	bl	5f68 <__udivmoddi4>
    5f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
    5f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5f64:	b004      	add	sp, #16
    5f66:	4770      	bx	lr

00005f68 <__udivmoddi4>:
    5f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f6c:	468c      	mov	ip, r1
    5f6e:	460d      	mov	r5, r1
    5f70:	4604      	mov	r4, r0
    5f72:	9e08      	ldr	r6, [sp, #32]
    5f74:	2b00      	cmp	r3, #0
    5f76:	d151      	bne.n	601c <__udivmoddi4+0xb4>
    5f78:	428a      	cmp	r2, r1
    5f7a:	4617      	mov	r7, r2
    5f7c:	d96d      	bls.n	605a <__udivmoddi4+0xf2>
    5f7e:	fab2 fe82 	clz	lr, r2
    5f82:	f1be 0f00 	cmp.w	lr, #0
    5f86:	d00b      	beq.n	5fa0 <__udivmoddi4+0x38>
    5f88:	f1ce 0c20 	rsb	ip, lr, #32
    5f8c:	fa01 f50e 	lsl.w	r5, r1, lr
    5f90:	fa20 fc0c 	lsr.w	ip, r0, ip
    5f94:	fa02 f70e 	lsl.w	r7, r2, lr
    5f98:	ea4c 0c05 	orr.w	ip, ip, r5
    5f9c:	fa00 f40e 	lsl.w	r4, r0, lr
    5fa0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    5fa4:	0c25      	lsrs	r5, r4, #16
    5fa6:	fbbc f8fa 	udiv	r8, ip, sl
    5faa:	fa1f f987 	uxth.w	r9, r7
    5fae:	fb0a cc18 	mls	ip, sl, r8, ip
    5fb2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    5fb6:	fb08 f309 	mul.w	r3, r8, r9
    5fba:	42ab      	cmp	r3, r5
    5fbc:	d90a      	bls.n	5fd4 <__udivmoddi4+0x6c>
    5fbe:	19ed      	adds	r5, r5, r7
    5fc0:	f108 32ff 	add.w	r2, r8, #4294967295
    5fc4:	f080 8123 	bcs.w	620e <__udivmoddi4+0x2a6>
    5fc8:	42ab      	cmp	r3, r5
    5fca:	f240 8120 	bls.w	620e <__udivmoddi4+0x2a6>
    5fce:	f1a8 0802 	sub.w	r8, r8, #2
    5fd2:	443d      	add	r5, r7
    5fd4:	1aed      	subs	r5, r5, r3
    5fd6:	b2a4      	uxth	r4, r4
    5fd8:	fbb5 f0fa 	udiv	r0, r5, sl
    5fdc:	fb0a 5510 	mls	r5, sl, r0, r5
    5fe0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    5fe4:	fb00 f909 	mul.w	r9, r0, r9
    5fe8:	45a1      	cmp	r9, r4
    5fea:	d909      	bls.n	6000 <__udivmoddi4+0x98>
    5fec:	19e4      	adds	r4, r4, r7
    5fee:	f100 33ff 	add.w	r3, r0, #4294967295
    5ff2:	f080 810a 	bcs.w	620a <__udivmoddi4+0x2a2>
    5ff6:	45a1      	cmp	r9, r4
    5ff8:	f240 8107 	bls.w	620a <__udivmoddi4+0x2a2>
    5ffc:	3802      	subs	r0, #2
    5ffe:	443c      	add	r4, r7
    6000:	eba4 0409 	sub.w	r4, r4, r9
    6004:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    6008:	2100      	movs	r1, #0
    600a:	2e00      	cmp	r6, #0
    600c:	d061      	beq.n	60d2 <__udivmoddi4+0x16a>
    600e:	fa24 f40e 	lsr.w	r4, r4, lr
    6012:	2300      	movs	r3, #0
    6014:	6034      	str	r4, [r6, #0]
    6016:	6073      	str	r3, [r6, #4]
    6018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    601c:	428b      	cmp	r3, r1
    601e:	d907      	bls.n	6030 <__udivmoddi4+0xc8>
    6020:	2e00      	cmp	r6, #0
    6022:	d054      	beq.n	60ce <__udivmoddi4+0x166>
    6024:	2100      	movs	r1, #0
    6026:	e886 0021 	stmia.w	r6, {r0, r5}
    602a:	4608      	mov	r0, r1
    602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6030:	fab3 f183 	clz	r1, r3
    6034:	2900      	cmp	r1, #0
    6036:	f040 808e 	bne.w	6156 <__udivmoddi4+0x1ee>
    603a:	42ab      	cmp	r3, r5
    603c:	d302      	bcc.n	6044 <__udivmoddi4+0xdc>
    603e:	4282      	cmp	r2, r0
    6040:	f200 80fa 	bhi.w	6238 <__udivmoddi4+0x2d0>
    6044:	1a84      	subs	r4, r0, r2
    6046:	eb65 0503 	sbc.w	r5, r5, r3
    604a:	2001      	movs	r0, #1
    604c:	46ac      	mov	ip, r5
    604e:	2e00      	cmp	r6, #0
    6050:	d03f      	beq.n	60d2 <__udivmoddi4+0x16a>
    6052:	e886 1010 	stmia.w	r6, {r4, ip}
    6056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    605a:	b912      	cbnz	r2, 6062 <__udivmoddi4+0xfa>
    605c:	2701      	movs	r7, #1
    605e:	fbb7 f7f2 	udiv	r7, r7, r2
    6062:	fab7 fe87 	clz	lr, r7
    6066:	f1be 0f00 	cmp.w	lr, #0
    606a:	d134      	bne.n	60d6 <__udivmoddi4+0x16e>
    606c:	1beb      	subs	r3, r5, r7
    606e:	0c3a      	lsrs	r2, r7, #16
    6070:	fa1f fc87 	uxth.w	ip, r7
    6074:	2101      	movs	r1, #1
    6076:	fbb3 f8f2 	udiv	r8, r3, r2
    607a:	0c25      	lsrs	r5, r4, #16
    607c:	fb02 3318 	mls	r3, r2, r8, r3
    6080:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    6084:	fb0c f308 	mul.w	r3, ip, r8
    6088:	42ab      	cmp	r3, r5
    608a:	d907      	bls.n	609c <__udivmoddi4+0x134>
    608c:	19ed      	adds	r5, r5, r7
    608e:	f108 30ff 	add.w	r0, r8, #4294967295
    6092:	d202      	bcs.n	609a <__udivmoddi4+0x132>
    6094:	42ab      	cmp	r3, r5
    6096:	f200 80d1 	bhi.w	623c <__udivmoddi4+0x2d4>
    609a:	4680      	mov	r8, r0
    609c:	1aed      	subs	r5, r5, r3
    609e:	b2a3      	uxth	r3, r4
    60a0:	fbb5 f0f2 	udiv	r0, r5, r2
    60a4:	fb02 5510 	mls	r5, r2, r0, r5
    60a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    60ac:	fb0c fc00 	mul.w	ip, ip, r0
    60b0:	45a4      	cmp	ip, r4
    60b2:	d907      	bls.n	60c4 <__udivmoddi4+0x15c>
    60b4:	19e4      	adds	r4, r4, r7
    60b6:	f100 33ff 	add.w	r3, r0, #4294967295
    60ba:	d202      	bcs.n	60c2 <__udivmoddi4+0x15a>
    60bc:	45a4      	cmp	ip, r4
    60be:	f200 80b8 	bhi.w	6232 <__udivmoddi4+0x2ca>
    60c2:	4618      	mov	r0, r3
    60c4:	eba4 040c 	sub.w	r4, r4, ip
    60c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    60cc:	e79d      	b.n	600a <__udivmoddi4+0xa2>
    60ce:	4631      	mov	r1, r6
    60d0:	4630      	mov	r0, r6
    60d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60d6:	f1ce 0420 	rsb	r4, lr, #32
    60da:	fa05 f30e 	lsl.w	r3, r5, lr
    60de:	fa07 f70e 	lsl.w	r7, r7, lr
    60e2:	fa20 f804 	lsr.w	r8, r0, r4
    60e6:	0c3a      	lsrs	r2, r7, #16
    60e8:	fa25 f404 	lsr.w	r4, r5, r4
    60ec:	ea48 0803 	orr.w	r8, r8, r3
    60f0:	fbb4 f1f2 	udiv	r1, r4, r2
    60f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
    60f8:	fb02 4411 	mls	r4, r2, r1, r4
    60fc:	fa1f fc87 	uxth.w	ip, r7
    6100:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    6104:	fb01 f30c 	mul.w	r3, r1, ip
    6108:	42ab      	cmp	r3, r5
    610a:	fa00 f40e 	lsl.w	r4, r0, lr
    610e:	d909      	bls.n	6124 <__udivmoddi4+0x1bc>
    6110:	19ed      	adds	r5, r5, r7
    6112:	f101 30ff 	add.w	r0, r1, #4294967295
    6116:	f080 808a 	bcs.w	622e <__udivmoddi4+0x2c6>
    611a:	42ab      	cmp	r3, r5
    611c:	f240 8087 	bls.w	622e <__udivmoddi4+0x2c6>
    6120:	3902      	subs	r1, #2
    6122:	443d      	add	r5, r7
    6124:	1aeb      	subs	r3, r5, r3
    6126:	fa1f f588 	uxth.w	r5, r8
    612a:	fbb3 f0f2 	udiv	r0, r3, r2
    612e:	fb02 3310 	mls	r3, r2, r0, r3
    6132:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    6136:	fb00 f30c 	mul.w	r3, r0, ip
    613a:	42ab      	cmp	r3, r5
    613c:	d907      	bls.n	614e <__udivmoddi4+0x1e6>
    613e:	19ed      	adds	r5, r5, r7
    6140:	f100 38ff 	add.w	r8, r0, #4294967295
    6144:	d26f      	bcs.n	6226 <__udivmoddi4+0x2be>
    6146:	42ab      	cmp	r3, r5
    6148:	d96d      	bls.n	6226 <__udivmoddi4+0x2be>
    614a:	3802      	subs	r0, #2
    614c:	443d      	add	r5, r7
    614e:	1aeb      	subs	r3, r5, r3
    6150:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    6154:	e78f      	b.n	6076 <__udivmoddi4+0x10e>
    6156:	f1c1 0720 	rsb	r7, r1, #32
    615a:	fa22 f807 	lsr.w	r8, r2, r7
    615e:	408b      	lsls	r3, r1
    6160:	fa05 f401 	lsl.w	r4, r5, r1
    6164:	ea48 0303 	orr.w	r3, r8, r3
    6168:	fa20 fe07 	lsr.w	lr, r0, r7
    616c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6170:	40fd      	lsrs	r5, r7
    6172:	ea4e 0e04 	orr.w	lr, lr, r4
    6176:	fbb5 f9fc 	udiv	r9, r5, ip
    617a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    617e:	fb0c 5519 	mls	r5, ip, r9, r5
    6182:	fa1f f883 	uxth.w	r8, r3
    6186:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    618a:	fb09 f408 	mul.w	r4, r9, r8
    618e:	42ac      	cmp	r4, r5
    6190:	fa02 f201 	lsl.w	r2, r2, r1
    6194:	fa00 fa01 	lsl.w	sl, r0, r1
    6198:	d908      	bls.n	61ac <__udivmoddi4+0x244>
    619a:	18ed      	adds	r5, r5, r3
    619c:	f109 30ff 	add.w	r0, r9, #4294967295
    61a0:	d243      	bcs.n	622a <__udivmoddi4+0x2c2>
    61a2:	42ac      	cmp	r4, r5
    61a4:	d941      	bls.n	622a <__udivmoddi4+0x2c2>
    61a6:	f1a9 0902 	sub.w	r9, r9, #2
    61aa:	441d      	add	r5, r3
    61ac:	1b2d      	subs	r5, r5, r4
    61ae:	fa1f fe8e 	uxth.w	lr, lr
    61b2:	fbb5 f0fc 	udiv	r0, r5, ip
    61b6:	fb0c 5510 	mls	r5, ip, r0, r5
    61ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    61be:	fb00 f808 	mul.w	r8, r0, r8
    61c2:	45a0      	cmp	r8, r4
    61c4:	d907      	bls.n	61d6 <__udivmoddi4+0x26e>
    61c6:	18e4      	adds	r4, r4, r3
    61c8:	f100 35ff 	add.w	r5, r0, #4294967295
    61cc:	d229      	bcs.n	6222 <__udivmoddi4+0x2ba>
    61ce:	45a0      	cmp	r8, r4
    61d0:	d927      	bls.n	6222 <__udivmoddi4+0x2ba>
    61d2:	3802      	subs	r0, #2
    61d4:	441c      	add	r4, r3
    61d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    61da:	eba4 0408 	sub.w	r4, r4, r8
    61de:	fba0 8902 	umull	r8, r9, r0, r2
    61e2:	454c      	cmp	r4, r9
    61e4:	46c6      	mov	lr, r8
    61e6:	464d      	mov	r5, r9
    61e8:	d315      	bcc.n	6216 <__udivmoddi4+0x2ae>
    61ea:	d012      	beq.n	6212 <__udivmoddi4+0x2aa>
    61ec:	b156      	cbz	r6, 6204 <__udivmoddi4+0x29c>
    61ee:	ebba 030e 	subs.w	r3, sl, lr
    61f2:	eb64 0405 	sbc.w	r4, r4, r5
    61f6:	fa04 f707 	lsl.w	r7, r4, r7
    61fa:	40cb      	lsrs	r3, r1
    61fc:	431f      	orrs	r7, r3
    61fe:	40cc      	lsrs	r4, r1
    6200:	6037      	str	r7, [r6, #0]
    6202:	6074      	str	r4, [r6, #4]
    6204:	2100      	movs	r1, #0
    6206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    620a:	4618      	mov	r0, r3
    620c:	e6f8      	b.n	6000 <__udivmoddi4+0x98>
    620e:	4690      	mov	r8, r2
    6210:	e6e0      	b.n	5fd4 <__udivmoddi4+0x6c>
    6212:	45c2      	cmp	sl, r8
    6214:	d2ea      	bcs.n	61ec <__udivmoddi4+0x284>
    6216:	ebb8 0e02 	subs.w	lr, r8, r2
    621a:	eb69 0503 	sbc.w	r5, r9, r3
    621e:	3801      	subs	r0, #1
    6220:	e7e4      	b.n	61ec <__udivmoddi4+0x284>
    6222:	4628      	mov	r0, r5
    6224:	e7d7      	b.n	61d6 <__udivmoddi4+0x26e>
    6226:	4640      	mov	r0, r8
    6228:	e791      	b.n	614e <__udivmoddi4+0x1e6>
    622a:	4681      	mov	r9, r0
    622c:	e7be      	b.n	61ac <__udivmoddi4+0x244>
    622e:	4601      	mov	r1, r0
    6230:	e778      	b.n	6124 <__udivmoddi4+0x1bc>
    6232:	3802      	subs	r0, #2
    6234:	443c      	add	r4, r7
    6236:	e745      	b.n	60c4 <__udivmoddi4+0x15c>
    6238:	4608      	mov	r0, r1
    623a:	e708      	b.n	604e <__udivmoddi4+0xe6>
    623c:	f1a8 0802 	sub.w	r8, r8, #2
    6240:	443d      	add	r5, r7
    6242:	e72b      	b.n	609c <__udivmoddi4+0x134>

00006244 <__aeabi_idiv0>:
    6244:	4770      	bx	lr
    6246:	bf00      	nop

00006248 <_read>:
    6248:	4b02      	ldr	r3, [pc, #8]	; (6254 <_read+0xc>)
    624a:	2258      	movs	r2, #88	; 0x58
    624c:	601a      	str	r2, [r3, #0]
    624e:	f04f 30ff 	mov.w	r0, #4294967295
    6252:	4770      	bx	lr
    6254:	20000e4c 	.word	0x20000e4c

00006258 <_write>:
    6258:	4b02      	ldr	r3, [pc, #8]	; (6264 <_write+0xc>)
    625a:	2258      	movs	r2, #88	; 0x58
    625c:	601a      	str	r2, [r3, #0]
    625e:	f04f 30ff 	mov.w	r0, #4294967295
    6262:	4770      	bx	lr
    6264:	20000e4c 	.word	0x20000e4c
    6268:	20746553 	.word	0x20746553
    626c:	206e6970 	.word	0x206e6970
    6270:	6c6c6163 	.word	0x6c6c6163
    6274:	6b636162 	.word	0x6b636162
    6278:	69616620 	.word	0x69616620
    627c:	6572756c 	.word	0x6572756c
    6280:	000a0d21 	.word	0x000a0d21

00006284 <_global_impure_ptr>:
    6284:	20000110 33323130 37363534 42413938     ... 0123456789AB
    6294:	46454443 00000000 33323130 37363534     CDEF....01234567
    62a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
    62b4:	0000296c                                l)..

000062b8 <blanks.7217>:
    62b8:	20202020 20202020 20202020 20202020                     

000062c8 <zeroes.7218>:
    62c8:	30303030 30303030 30303030 30303030     0000000000000000
    62d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000062e8 <_ctype_>:
    62e8:	20202000 20202020 28282020 20282828     .         ((((( 
    62f8:	20202020 20202020 20202020 20202020                     
    6308:	10108820 10101010 10101010 10101010      ...............
    6318:	04040410 04040404 10040404 10101010     ................
    6328:	41411010 41414141 01010101 01010101     ..AAAAAA........
    6338:	01010101 01010101 01010101 10101010     ................
    6348:	42421010 42424242 02020202 02020202     ..BBBBBB........
    6358:	02020202 02020202 02020202 10101010     ................
    6368:	00000020 00000000 00000000 00000000      ...............
	...

000063ec <_init>:
    63ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ee:	bf00      	nop
    63f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63f2:	bc08      	pop	{r3}
    63f4:	469e      	mov	lr, r3
    63f6:	4770      	bx	lr

000063f8 <__init_array_start>:
    63f8:	00004501 	.word	0x00004501

000063fc <__frame_dummy_init_array_entry>:
    63fc:	000001a5                                ....

00006400 <_fini>:
    6400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6402:	bf00      	nop
    6404:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6406:	bc08      	pop	{r3}
    6408:	469e      	mov	lr, r3
    640a:	4770      	bx	lr

0000640c <__fini_array_start>:
    640c:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
	BPM_UNLOCK(PMCON);
20000000:	4a07      	ldr	r2, [pc, #28]	; (20000020 <bpm_ps_no_halt_exec+0x20>)
20000002:	4b08      	ldr	r3, [pc, #32]	; (20000024 <bpm_ps_no_halt_exec+0x24>)
20000004:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000006:	61c1      	str	r1, [r0, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000008:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000a:	4a07      	ldr	r2, [pc, #28]	; (20000028 <bpm_ps_no_halt_exec+0x28>)
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000000c:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000e:	6813      	ldr	r3, [r2, #0]
20000010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000014:	f010 0001 	ands.w	r0, r0, #1
20000018:	d101      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
2000001a:	2b00      	cmp	r3, #0
2000001c:	d0f6      	beq.n	2000000c <bpm_ps_no_halt_exec+0xc>
}
2000001e:	4770      	bx	lr
20000020:	aa00001c 	.word	0xaa00001c
20000024:	400f0000 	.word	0x400f0000
20000028:	e000e010 	.word	0xe000e010

2000002c <udi_api_hid_generic>:
2000002c:	00000269 000001ed 000002b5 000001ef     i...............
2000003c:	00000000                                ....

20000040 <udi_hid_generic_report_desc>:
20000040:	08090105 0b8501a1 21090d05 090500a1     ...........!....
20000050:	01950109 00151075 02810125 37090105     ....u...%......7
20000060:	10750195 26f1f016 06810e10 37090105     ..u....&.......7
20000070:	08750195 7f258115 c0c00681              ..u...%.....

2000007c <udc_string_desc>:
2000007c:	00000300 00000000 00000000 00000000     ................
2000008c:	00000000                                ....

20000090 <udc_string_desc_languageid>:
20000090:	04090304                                ....

20000094 <udc_string_manufacturer_name>:
20000094:	52504150 00005453                       PAPRST..

2000009c <udc_string_product_name>:
2000009c:	204f4656 6c616944 00000000              VFO Dial....

200000a8 <udc_config>:
200000a8:	200000e8 200000b4 00000000              ... ... ....

200000b4 <udc_config_fshs>:
200000b4:	200000bc 200000fc                       ... ... 

200000bc <udc_desc>:
200000bc:	00290209 80000101 00040932 00030200     ..).....2.......
200000cc:	21090000 01000111 07003c22 40038105     ...!...."<.....@
200000dc:	05070400 00400302 00000004              ......@.....

200000e8 <udc_device_desc>:
200000e8:	02000112 08000000 240203eb 02010100     ...........$....
200000f8:	00000100                                ....

200000fc <udi_apis>:
200000fc:	2000002c                                ,.. 

20000100 <flashcalw_wait_until_ready>:
20000100:	0000260d                                .&..

20000104 <g_interrupt_enabled>:
20000104:	00000001                                ....

20000108 <_impure_ptr>:
20000108:	20000110 00000000                       ... ....

20000110 <impure_data>:
20000110:	00000000 200003fc 20000464 200004cc     ....... d.. ... 
	...
200001b8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001c8:	0005deec 0000000b 00000000 00000000     ................
	...

20000538 <__atexit_recursive_mutex>:
20000538:	20000e28                                (.. 

2000053c <__global_locale>:
2000053c:	00000043 00000000 00000000 00000000     C...............
	...
2000055c:	00000043 00000000 00000000 00000000     C...............
	...
2000057c:	00000043 00000000 00000000 00000000     C...............
	...
2000059c:	00000043 00000000 00000000 00000000     C...............
	...
200005bc:	00000043 00000000 00000000 00000000     C...............
	...
200005dc:	00000043 00000000 00000000 00000000     C...............
	...
200005fc:	00000043 00000000 00000000 00000000     C...............
	...
2000061c:	00005ca1 000054e9 00000000 000062e8     .\...T.......b..
2000062c:	000062e4 00006298 00006298 00006298     .b...b...b...b..
2000063c:	00006298 00006298 00006298 00006298     .b...b...b...b..
2000064c:	00006298 00006298 ffffffff ffffffff     .b...b..........
2000065c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000684:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200006a8 <__malloc_av_>:
	...
200006b0:	200006a8 200006a8 200006b0 200006b0     ... ... ... ... 
200006c0:	200006b8 200006b8 200006c0 200006c0     ... ... ... ... 
200006d0:	200006c8 200006c8 200006d0 200006d0     ... ... ... ... 
200006e0:	200006d8 200006d8 200006e0 200006e0     ... ... ... ... 
200006f0:	200006e8 200006e8 200006f0 200006f0     ... ... ... ... 
20000700:	200006f8 200006f8 20000700 20000700     ... ... ... ... 
20000710:	20000708 20000708 20000710 20000710     ... ... ... ... 
20000720:	20000718 20000718 20000720 20000720     ... ...  ..  .. 
20000730:	20000728 20000728 20000730 20000730     (.. (.. 0.. 0.. 
20000740:	20000738 20000738 20000740 20000740     8.. 8.. @.. @.. 
20000750:	20000748 20000748 20000750 20000750     H.. H.. P.. P.. 
20000760:	20000758 20000758 20000760 20000760     X.. X.. `.. `.. 
20000770:	20000768 20000768 20000770 20000770     h.. h.. p.. p.. 
20000780:	20000778 20000778 20000780 20000780     x.. x.. ... ... 
20000790:	20000788 20000788 20000790 20000790     ... ... ... ... 
200007a0:	20000798 20000798 200007a0 200007a0     ... ... ... ... 
200007b0:	200007a8 200007a8 200007b0 200007b0     ... ... ... ... 
200007c0:	200007b8 200007b8 200007c0 200007c0     ... ... ... ... 
200007d0:	200007c8 200007c8 200007d0 200007d0     ... ... ... ... 
200007e0:	200007d8 200007d8 200007e0 200007e0     ... ... ... ... 
200007f0:	200007e8 200007e8 200007f0 200007f0     ... ... ... ... 
20000800:	200007f8 200007f8 20000800 20000800     ... ... ... ... 
20000810:	20000808 20000808 20000810 20000810     ... ... ... ... 
20000820:	20000818 20000818 20000820 20000820     ... ...  ..  .. 
20000830:	20000828 20000828 20000830 20000830     (.. (.. 0.. 0.. 
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 
20000940:	20000938 20000938 20000940 20000940     8.. 8.. @.. @.. 
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 

20000ab0 <__malloc_sbrk_base>:
20000ab0:	ffffffff                                ....

20000ab4 <__malloc_trim_threshold>:
20000ab4:	00020000                                ....
